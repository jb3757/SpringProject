{"ast":null,"code":"import gnbBar from \"../components/gnbBar.vue\";\n// import Footer from '../components/footer.vue'\n\nimport axios from 'axios';\naxios.defaults.baseURL = 'http://localhost:3000';\naxios.defaults.headers.post['Content-Type'] = 'application/json;charset=utf-8';\naxios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';\nexport default {\n  components: {\n    gnbBar\n  },\n  data() {\n    return {\n      // 회원 입력정보\n      name: '',\n      email: '',\n      emailFirst: '',\n      emailSecond: '',\n      password: '',\n      password2: '',\n      phone_num: '',\n      sex: '',\n      agegroup: '',\n      name_check: true,\n      email_check: false,\n      password_check: false,\n      password_check2: false,\n      sex_check: false,\n      age_range_check: false,\n      phone_check: false,\n      error_border_check: false,\n      //이메일 인증하기\n      clickSendEmail: false,\n      countdown: 180,\n      interval: null,\n      verifyNum: '',\n      userVerifyNum: '',\n      email_auth_check: true,\n      //주소 데이터\n      epostNum: \"\",\n      epostAdress: \"\",\n      epostDetailAdress: \"\",\n      epostreference: \"\",\n      allcheck: true,\n      allcheck1: true,\n      allcheck2: true,\n      allcheck3: true,\n      allcheck4: true,\n      allcheck5: true,\n      allcheck6: true,\n      allcheck7: true,\n      emailcheck: 3,\n      nicknamecheck: 3\n    };\n  },\n  watch: {\n    'name': function () {\n      this.checkName();\n      this.inputAllCheck();\n    },\n    'emailFirst': function () {\n      this.checkEmail();\n      this.funcWatch();\n    },\n    'emailSecond': function () {\n      this.checkEmail();\n      this.funcWatch();\n    },\n    'password': function () {\n      this.checkPassword();\n      this.inputAllCheck();\n    },\n    'password2': function () {\n      this.checkPassword2();\n      this.inputAllCheck();\n    },\n    'sex': function () {\n      this.checksex();\n      this.inputAllCheck();\n    },\n    'agegroup': function () {\n      this.checkage_range();\n      this.inputAllCheck();\n    },\n    'phone_num': function () {\n      this.checkphone();\n      this.inputAllCheck();\n    }\n  },\n  computed: {\n    formattedTime() {\n      const minutes = Math.floor(this.countdown / 60);\n      const seconds = this.countdown % 60;\n      return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n    }\n  },\n  methods: {\n    funcWatch() {\n      this.emailCheckForm();\n      this.inputAllCheck();\n    },\n    movetomain() {\n      window.location.href = '/';\n    },\n    checkName() {\n      console.log(this.countdown);\n      if (this.name === '' || !this.name) {\n        this.name_check = true;\n        this.error_border_check = true;\n        this.allcheck1 = true;\n      } else {\n        this.name_check = false;\n        this.error_border_check = false;\n        this.allcheck1 = false;\n      }\n    },\n    checkEmail() {\n      // 이메일 형식 검사\n      this.email = this.emailFirst + this.emailSecond;\n      const validateEmail1 = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\n      const validateEmail2 = /^[a-zA-Z0-9]*$/;\n      console.log(this.email);\n      if (this.email === '' || !validateEmail1.test(this.email) || !this.email || !validateEmail2.test(this.emailFirst)) {\n        this.email_check = true;\n        this.error_border_check = true;\n        this.allcheck2 = true; //입력조건 안맞을시 true\n      } else {\n        this.email_check = false;\n        this.error_border_check = false;\n        this.allcheck2 = false;\n      }\n    },\n    checkPassword() {\n      // 최소 8자리 이상 영문, 숫자, 특수문자가 각각 1개 이상\n      const validatePassword = /^(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{8,}$/;\n      if (this.password === '' || !validatePassword.test(this.password) || !this.password) {\n        this.password_check = true;\n        this.error_border_check = true;\n        this.allcheck3 = true;\n      } else {\n        this.password_check = false;\n        this.error_border_check = false;\n        this.allcheck3 = false;\n      }\n    },\n    checkPassword2() {\n      if (this.password === this.password2) {\n        this.password_check2 = false;\n        this.error_border_check = false;\n        this.allcheck4 = false;\n      } else {\n        this.password_check2 = true;\n        this.error_border_check = true;\n        this.allcheck4 = true;\n      }\n    },\n    checksex() {\n      if (this.sex == null) {\n        //선택했으면\n        this.allcheck5 = true;\n      } else {\n        this.allcheck5 = false;\n      }\n    },\n    checkage_range() {\n      if (this.agegroup == null) {\n        this.allcheck6 = true;\n      } else {\n        this.allcheck6 = false;\n      }\n    },\n    checkphone() {\n      const validatephone = /^01([0|1|6|7|8|9])-?([0-9]{3,4})-?([0-9]{4})$/;\n      if (this.phone_num === '' || !validatephone.test(this.phone_num) || !this.phone_num) {\n        this.phone_check = true;\n        this.error_border_check = true;\n        this.allcheck7 = true;\n      } else {\n        this.phone_check = false;\n        this.error_border_check = false;\n        this.allcheck7 = false;\n      }\n    },\n    formatPhoneNumber() {\n      // 숫자 이외의 문자 제거\n      this.phone_num = this.phone_num.replace(/[^\\d-]/g, '');\n      // 하이픈(-) 삽입\n      if (this.phone_num.length > 2) {\n        this.phone_num = this.phone_num.replace(/^01([0|1|6|7|8|9])-?(\\d{4})-?(\\d{4})$/, '01$1-$2-$3');\n      }\n    },\n    inputAllCheck() {\n      if (this.allcheck1 || this.allcheck2 || this.allcheck3 || this.allcheck4 || this.allcheck5 || this.allcheck6 || this.allcheck7 || this.email_check || this.email_auth_check) {\n        //하나라도 입력조건이 안맞을시\n        this.allcheck = true; //버튼 비활성\n      } else {\n        this.allcheck = false;\n      }\n    },\n    async sendEmail() {\n      await axios({\n        url: \"http://localhost:3000/auth/sendEmail\",\n        method: \"POST\",\n        data: {\n          email: this.email\n        }\n      }).then(async res => {\n        this.verifyNum = res.data.verifyNum;\n        console.log(res.data.verifyNum, \"서버 코드\");\n      }).catch(error => {\n        alert(error);\n      });\n    },\n    startCountdown() {\n      this.clickSendEmail = true;\n      this.interval = setInterval(() => {\n        if (this.countdown > 0) {\n          this.countdown--;\n        } else {\n          alert('인증에 실패하였습니다.');\n          clearInterval(this.interval); // 컴포넌트가 제거되기 전에 interval을 정리해야합니다.\n          this.countdown = 180;\n          this.userVerifyNum = \"\";\n          this.clickSendEmail = false; // 인증번호입력창 초기화\n        }\n      }, 1000);\n    },\n    completeAuthEmail() {\n      console.log(this.userVerifyNum, \"사용자입력 코드\");\n      if (this.verifyNum == this.userVerifyNum && !this.userVerifyNum == \"\") {\n        alert(\"인증이 완료되었습니다.\");\n        this.email_auth_check = false;\n        this.clickSendEmail = false; // 인증번호입력창 초기화\n        this.userVerifyNum = \"\"; //사용자입력 인증코드 초기화\n        this.countdown = 180; // 인증시간 초기화\n        clearInterval(this.interval); // 컴포넌트가 제거되기 전에 interval을 정리해야합니다.\n      } else {\n        alert(\"인증번호가 일치하지 않습니다.\");\n        this.email_auth_check = true;\n        this.userVerifyNum = \"\"; //사용자입력 인증코드 초기화\n      }\n\n      this.inputAllCheck();\n    },\n    async emailCheckForm() {\n      await axios({\n        url: \"http://localhost:3000/auth/checkemail\",\n        method: \"GET\",\n        params: {\n          email: this.email\n        }\n      }).then(async res => {\n        const validateEmail = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\n        console.log(res.data.result);\n        // console.log(this.emailcheck);\n        if (res.data == \"사용가능한 이메일입니다.\" && validateEmail.test(this.email)) {\n          this.emailcheck = 2;\n        } else if (res.data == \"존재하는 이메일입니다.\") {\n          this.emailcheck = 1;\n          this.allcheck = true;\n        } else if (!this.email) {\n          this.emailcheck = 3;\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    },\n    sample6_execDaumPostcode() {\n      // 다음 지도API\n      new daum.Postcode({\n        oncomplete: data => {\n          let addr = ''; // 주소 변수\n\n          if (data.userSelectedType === 'R') {\n            addr = data.roadAddress;\n            // 우편번호와 주소 정보를 해당 필드에 넣는다.\n            this.epostNum = data.zonecode;\n            this.epostAdress = addr;\n          } else if (data.userSelectedType === 'J') {\n            addr = data.jibunAddress;\n            // 우편번호와 주소 정보를 해당 필드에 넣는다.\n            this.epostNum = data.zonecode;\n            this.epostAdress = addr;\n          }\n\n          // 상세주소가 비어있지 않을 때만 기존의 상세주소를 유지하도록 처리\n          if (this.epostDetailAdress !== '') {\n            document.getElementById('epostDetailAdress').value = this.epostDetailAdress;\n          }\n\n          // 커서를 상세주소 필드로 이동한다.\n          document.getElementById('epostDetailAdress').focus();\n        }\n      }).open();\n    },\n    async joinForm() {\n      //백엔드로 회원가입 정보 전달\n      if (this.allcheck == true) {\n        alert(\"회원정보를 확인해주세요.\");\n      } else {\n        await axios({\n          url: \"http://localhost:3000/auth/join\",\n          method: \"POST\",\n          data: {\n            name: this.name,\n            email: this.email,\n            password: this.password,\n            sex: this.sex,\n            agegroup: this.agegroup,\n            phone: this.phone_num,\n            zipcode: this.epostNum,\n            add1: this.epostAdress,\n            add2: this.epostDetailAdress\n          }\n        }).then(async res => {\n          alert(res.data);\n          this.autoLogin();\n        }).catch(error => {\n          alert(error);\n        });\n      }\n    },\n    async autoLogin() {\n      await axios({\n        url: \"http://localhost:3000/auth/login\",\n        method: \"POST\",\n        data: {\n          email: this.email,\n          password: this.password\n        }\n      }).then(async res => {\n        if (res.data.code == 200) {\n          localStorage.setItem(\"userID\", res.data.email);\n          localStorage.setItem(\"userNick\", res.data.nick);\n          localStorage.setItem(\"userProvider\", res.data.provider);\n          window.location.href = \"/\";\n        }\n      }).catch(error => {\n        alert(error);\n      });\n    },\n    kakaoLogin() {\n      window.Kakao.Auth.login({\n        scope: \"profile_nickname, profile_image, account_email, gender, age_range\",\n        success: this.getProfile\n      });\n    },\n    getProfile(autoObj) {\n      window.Kakao.API.request({\n        url: \"/v2/user/me\",\n        success: res => {\n          const kakao_account = res.kakao_account;\n          this.login(kakao_account);\n        }\n      });\n    },\n    async login(kakao_account) {\n      const email = kakao_account.email;\n      await axios({\n        url: \"http://localhost:3000/auth/kakaologin\",\n        method: \"POST\",\n        data: {\n          email: kakao_account.email,\n          nick: kakao_account.profile.nickname,\n          sex: kakao_account.gender,\n          agegroup: kakao_account.age_range,\n          provider: \"kakao\"\n        }\n      }).then(async res => {\n        this.pullData(email);\n      });\n    },\n    pullData(email) {\n      axios({\n        url: \"http://localhost:3000/auth/kakaoData\",\n        method: \"POST\",\n        data: {\n          email: email\n        }\n      }).then(async res => {\n        localStorage.setItem(\"userID\", res.data.email);\n        localStorage.setItem(\"userNick\", res.data.nick);\n        localStorage.setItem(\"userProvider\", res.data.provider);\n        window.location.href = \"/\";\n      });\n    }\n  }\n};","map":{"version":3,"names":["gnbBar","axios","defaults","baseURL","headers","post","components","data","name","email","emailFirst","emailSecond","password","password2","phone_num","sex","agegroup","name_check","email_check","password_check","password_check2","sex_check","age_range_check","phone_check","error_border_check","clickSendEmail","countdown","interval","verifyNum","userVerifyNum","email_auth_check","epostNum","epostAdress","epostDetailAdress","epostreference","allcheck","allcheck1","allcheck2","allcheck3","allcheck4","allcheck5","allcheck6","allcheck7","emailcheck","nicknamecheck","watch","checkName","inputAllCheck","checkEmail","funcWatch","checkPassword","checkPassword2","checksex","checkage_range","checkphone","computed","formattedTime","minutes","Math","floor","seconds","methods","emailCheckForm","movetomain","window","location","href","console","log","validateEmail1","validateEmail2","test","validatePassword","validatephone","formatPhoneNumber","replace","length","sendEmail","url","method","then","res","catch","error","alert","startCountdown","setInterval","clearInterval","completeAuthEmail","params","validateEmail","result","sample6_execDaumPostcode","daum","Postcode","oncomplete","addr","userSelectedType","roadAddress","zonecode","jibunAddress","document","getElementById","value","focus","open","joinForm","phone","zipcode","add1","add2","autoLogin","code","localStorage","setItem","nick","provider","kakaoLogin","Kakao","Auth","login","scope","success","getProfile","autoObj","API","request","kakao_account","profile","nickname","gender","age_range","pullData"],"sources":["C:\\Users\\bj375\\Documents\\workspace-sts-3.9.18.RELEASE\\Moonmoon\\vue_front\\src\\views\\Join.vue"],"sourcesContent":["<style src=\"../assets/css/Join.css\"></style>\r\n\r\n<template>\r\n    <gnbBar />\r\n    <div class=\"join\">\r\n        <div class=\"title-bar\">\r\n            <div class=\"join_header_logo\">\r\n                <a href=\"/\"><img src=\"../assets/img/logo.png\" alt=\"\"></a>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- 소셜로그인 -->\r\n        <div class=\"join_wrap2\">\r\n            <form method=\"post\">\r\n                <div class=\"user_social_btns\">\r\n                    <div class=\"user_social_btns_p\">\r\n                        <p>소셜로 간편하게 로그인하세요</p>\r\n                    </div>\r\n                    <a class=\"social_btn\" href=\"/naverlogin\"><img class=\"social_btn_naver\" src=\"../assets/img/naver.png\"\r\n                            alt=\"\"></a>\r\n                    <a class=\"social_btn\" @click=\"kakaoLogin\"><img class=\"social_btn_kakao\" src=\"../assets/img/kakao.png\"\r\n                            alt=\"\"></a>\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n        <!-- 로컬회원가입 -->\r\n        <div class=\"join_wrap\">\r\n            <p><span class=\"fontRed\">*</span> 필수입력 항목</p>\r\n            <form @submit.prevent=\"joinForm\">\r\n                <label for=\"name\">이름<span class=\"fontRed\">*</span></label>\r\n                <input v-model=\"name\" type=\"text\" id=\"name\" placeholder=\"이름 입력\" :class=\"{ error_border: name_check }\"\r\n                    maxlength=\"25\"><br />\r\n                <label for=\"email\">아이디<span class=\"fontRed\">*</span></label>\r\n                <input :disabled=\"!email_auth_check\" v-model=\"emailFirst\" type=\"text\" id=\"email\" placeholder=\"이메일 입력\"\r\n                    :class=\"{ error_border: email_check || emailcheck == 2 }\" maxlength=\"25\">\r\n                <select :disabled=\"!email_auth_check\" v-model=\"emailSecond\" class=\"email_list\" name=\"emailList\"\r\n                    id=\"emailList\">\r\n                    <option value=\"@naver.com\">@naver.com</option>\r\n                    <option value=\"@hanmail.net\">@hanmail.net</option>\r\n                    <option value=\"@gmail.com\">@gmail.com</option>\r\n                    <option value=\"@nate.com\">@nate.com</option>\r\n                    <option value=\"@hotmail.com\">@hotmail.com</option>\r\n                </select>\r\n                <button type=\"button\" @click=\" startCountdown(), sendEmail()\" :disabled=\"emailcheck != 2\"\r\n                    class=\"email_auth\">이메일 인증</button>\r\n                <div v-if=\"clickSendEmail && emailcheck == 2\" class=\"email_auth_complete\">\r\n                    <input class=\"email_auth_complete_input\" v-model=\"userVerifyNum\" type=\"text\" maxlength=\"6\">\r\n                    <span>{{ formattedTime }}</span>\r\n                    <button type=\"button\" @click=\"completeAuthEmail\">인증완료</button>\r\n\r\n                </div>\r\n                <form @submit.prevent=\"emailCheckForm\">\r\n                    <a href=\"/auth/checkemail\"><button type=\"submit\" id=\"email_check\"\r\n                            class=\"username_submit\">중복확인</button></a>\r\n                </form>\r\n                <p id=\"error\" v-if=\"email_check\">이메일주소를 정확히 입력해주세요. 예)abcd@naver.com</p>\r\n                <p id=\"error\" v-show=\"emailcheck == 1\">존재하는 이메일입니다.</p>\r\n                <p id=\"complete\" v-show=\"emailcheck == 2 && !email_check\">사용가능한 이메일입니다.</p>\r\n                <label for=\"password\">비밀번호<span class=\"fontRed\">*</span></label>\r\n                <input v-model=\"password\" type=\"password\" id=\"password\" :class=\"{ error_border: password_check }\"\r\n                    placeholder=\"비밀번호 입력\" maxlength=\"15\"><br />\r\n                <p id=\"error\" v-if=\"password_check\">비밀번호를 정확히 입력해주세요.<br /> *8자리 이상 영문, 숫자, 특수문자가 각각 1개 이상</p>\r\n                <label for=\"password_check2\">비밀번호 확인<span class=\"fontRed\">*</span></label>\r\n                <input v-model=\"password2\" type=\"password\" id=\"password_check\" :class=\"{ error_border: password_check2 }\"\r\n                    placeholder=\"비밀번호 확인 입력\"><br />\r\n                <p id=\"error\" v-if=\"password_check2\">비밀번호가 일치하지 않습니다.</p>\r\n                <div class=\"gender\">\r\n                    <label for=\"sex\">성별<span class=\"fontRed\">*</span></label>\r\n                    <input v-model=\"sex\" type='radio' name='gender' value='m' class=\"input_sex\" />남자\r\n                    <input v-model=\"sex\" type='radio' name='gender' value='f' class=\"input_sex\" />여자\r\n                </div>\r\n                <p id=\"error\" v-if=\"sex_check\">성별을 선택하세요.</p>\r\n                <div class=\"age_range\">\r\n                    <label for=\"age_range\">나이대<span class=\"fontRed\">*</span></label>\r\n                    <input v-model=\"agegroup\" type='radio' name='agegroup' value='10' class=\"input_sex\" />10대\r\n                    <input v-model=\"agegroup\" type='radio' name='agegroup' value='20' class=\"input_sex\" />20대\r\n                    <input v-model=\"agegroup\" type='radio' name='agegroup' value='30' class=\"input_sex\" />30대\r\n                    <input v-model=\"agegroup\" type='radio' name='agegroup' value='40' class=\"input_sex\" />40대\r\n                    <input v-model=\"agegroup\" type='radio' name='agegroup' value='50' class=\"input_sex\" />50대\r\n                    <input v-model=\"agegroup\" type='radio' name='agegroup' value='60' class=\"input_sex\" />60세 이상\r\n                </div>\r\n                <p id=\"error\" v-if=\"age_range_check\">나이대를 선택하세요.</p>\r\n                <label for=\"phone_num\">전화번호<span class=\"fontRed\">*</span></label>\r\n                <input v-model=\"phone_num\" @input=\"formatPhoneNumber\" type=\"text\" id=\"phone_num\" placeholder=\"전화번호 입력\"\r\n                    :class=\"{ error_border: phone_check }\" maxlength=\"13\"><br />\r\n                <p id=\"error\" v-if=\"phone_check\">전화번호를 정확히 입력해주세요.</p>\r\n                <label for=\"epostNum\">우편번호</label>\r\n                <input v-model=\"epostNum\" ref=\"epostNum\" type=\"text\" id=\"epostNum\" placeholder=\"우편번호 입력\">\r\n                <input @click=\"sample6_execDaumPostcode\" class=\"epostNumBtn\" type=\"button\" value=\"우편번호 검색\"><br />\r\n                <label for=\"epostAdress\">주소</label>\r\n                <input v-model=\"epostAdress\" ref=\"epostAdress\" type=\"text\" id=\"epostAdress\" placeholder=\"주소 입력\"><br />\r\n                <label for=\"epostDetailAdress\">상세주소</label>\r\n                <input v-model=\"epostDetailAdress\" ref=\"epostDetailAdress\" type=\"text\" id=\"epostDetailAdress\"\r\n                    placeholder=\"상세주소 입력\"><br />\r\n                <!-- 가입하기버튼 -->\r\n                <input type=\"submit\" :class=\"{ 'error_submit': allcheck, 'submit': !allcheck }\" id=\"login\" value=\"가입하기\">\r\n            </form>\r\n        </div>\r\n    </div>\r\n    <!-- <Footer /> -->\r\n</template>\r\n\r\n<script>\r\n  import gnbBar from \"../components/gnbBar.vue\";\r\n// import Footer from '../components/footer.vue'\r\n\r\nimport axios from 'axios'\r\naxios.defaults.baseURL = 'http://localhost:3000';\r\naxios.defaults.headers.post['Content-Type'] = 'application/json;charset=utf-8';\r\naxios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';\r\n\r\nexport default {\r\n    components: { gnbBar },\r\n    data() {\r\n        return {\r\n            // 회원 입력정보\r\n            name: '',\r\n            email: '',\r\n            emailFirst: '',\r\n            emailSecond: '',\r\n            password: '',\r\n            password2: '',\r\n            phone_num: '',\r\n            sex: '',\r\n            agegroup: '',\r\n\r\n\r\n            name_check: true,\r\n            email_check: false,\r\n            password_check: false,\r\n            password_check2: false,\r\n            sex_check: false,\r\n            age_range_check: false,\r\n            phone_check: false,\r\n            error_border_check: false,\r\n\r\n            //이메일 인증하기\r\n            clickSendEmail: false,\r\n            countdown: 180,\r\n            interval: null,\r\n            verifyNum: '',\r\n            userVerifyNum: '',\r\n            email_auth_check: true,\r\n\r\n            //주소 데이터\r\n            epostNum: \"\",\r\n            epostAdress: \"\",\r\n            epostDetailAdress: \"\",\r\n            epostreference: \"\",\r\n\r\n            allcheck: true,\r\n            allcheck1: true,\r\n            allcheck2: true,\r\n            allcheck3: true,\r\n            allcheck4: true,\r\n            allcheck5: true,\r\n            allcheck6: true,\r\n            allcheck7: true,\r\n            emailcheck: 3,\r\n            nicknamecheck: 3,\r\n        };\r\n    },\r\n    watch: {\r\n        'name': function () {\r\n            this.checkName()\r\n            this.inputAllCheck()\r\n        },\r\n        'emailFirst': function () {\r\n            this.checkEmail()\r\n            this.funcWatch()\r\n        },\r\n        'emailSecond': function () {\r\n            this.checkEmail()\r\n            this.funcWatch()\r\n        },\r\n        'password': function () {\r\n            this.checkPassword()\r\n            this.inputAllCheck()\r\n        },\r\n        'password2': function () {\r\n            this.checkPassword2()\r\n            this.inputAllCheck()\r\n        },\r\n        'sex': function () {\r\n            this.checksex()\r\n            this.inputAllCheck()\r\n        },\r\n        'agegroup': function () {\r\n            this.checkage_range()\r\n            this.inputAllCheck()\r\n        },\r\n        'phone_num': function () {\r\n            this.checkphone()\r\n            this.inputAllCheck()\r\n        }\r\n\r\n    },\r\n    computed: {\r\n        formattedTime() {\r\n            const minutes = Math.floor(this.countdown / 60);\r\n            const seconds = this.countdown % 60;\r\n            return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\r\n        },\r\n    },\r\n    methods: {\r\n        funcWatch() {\r\n            this.emailCheckForm()\r\n            this.inputAllCheck()\r\n        },\r\n        movetomain() {\r\n            window.location.href = '/';\r\n        },\r\n        checkName() {\r\n            console.log(this.countdown);\r\n            if (this.name === '' || !this.name) {\r\n                this.name_check = true;\r\n                this.error_border_check = true;\r\n                this.allcheck1 = true;\r\n            } else {\r\n                this.name_check = false;\r\n                this.error_border_check = false;\r\n                this.allcheck1 = false;\r\n            }\r\n        },\r\n        checkEmail() {\r\n            // 이메일 형식 검사\r\n            this.email = this.emailFirst + this.emailSecond;\r\n            const validateEmail1 = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\r\n            const validateEmail2 = /^[a-zA-Z0-9]*$/;\r\n            console.log(this.email);\r\n            if (this.email === '' || !validateEmail1.test(this.email) || !this.email || !validateEmail2.test(this.emailFirst)) {\r\n                this.email_check = true;\r\n                this.error_border_check = true;\r\n                this.allcheck2 = true; //입력조건 안맞을시 true\r\n            } else {\r\n                this.email_check = false;\r\n                this.error_border_check = false;\r\n                this.allcheck2 = false;\r\n            }\r\n        },\r\n        checkPassword() {\r\n            // 최소 8자리 이상 영문, 숫자, 특수문자가 각각 1개 이상\r\n            const validatePassword = /^(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{8,}$/\r\n\r\n            if (this.password === '' || !validatePassword.test(this.password) || !this.password) {\r\n                this.password_check = true;\r\n                this.error_border_check = true;\r\n                this.allcheck3 = true;\r\n            } else {\r\n                this.password_check = false;\r\n                this.error_border_check = false;\r\n                this.allcheck3 = false;\r\n            }\r\n        },\r\n        checkPassword2() {\r\n            if (this.password === this.password2) {\r\n                this.password_check2 = false;\r\n                this.error_border_check = false;\r\n                this.allcheck4 = false;\r\n            } else {\r\n                this.password_check2 = true;\r\n                this.error_border_check = true;\r\n                this.allcheck4 = true;\r\n            }\r\n        },\r\n        checksex() {\r\n            if (this.sex == null) { //선택했으면\r\n                this.allcheck5 = true;\r\n            } else {\r\n                this.allcheck5 = false;\r\n            }\r\n        },\r\n        checkage_range() {\r\n            if (this.agegroup == null) {\r\n                this.allcheck6 = true;\r\n            } else {\r\n                this.allcheck6 = false;\r\n            }\r\n        },\r\n        checkphone() {\r\n            const validatephone = /^01([0|1|6|7|8|9])-?([0-9]{3,4})-?([0-9]{4})$/;\r\n\r\n            if (this.phone_num === '' || !validatephone.test(this.phone_num) || !this.phone_num) {\r\n                this.phone_check = true;\r\n                this.error_border_check = true;\r\n                this.allcheck7 = true;\r\n            } else {\r\n                this.phone_check = false;\r\n                this.error_border_check = false;\r\n                this.allcheck7 = false;\r\n            }\r\n        },\r\n        formatPhoneNumber() {\r\n            // 숫자 이외의 문자 제거\r\n            this.phone_num = this.phone_num.replace(/[^\\d-]/g, '');\r\n            // 하이픈(-) 삽입\r\n            if (this.phone_num.length > 2) {\r\n                this.phone_num = this.phone_num.replace(/^01([0|1|6|7|8|9])-?(\\d{4})-?(\\d{4})$/, '01$1-$2-$3');\r\n            }\r\n        },\r\n        inputAllCheck() {\r\n            if (this.allcheck1 || this.allcheck2 || this.allcheck3 || this.allcheck4 || this.allcheck5 || this.allcheck6 || this.allcheck7 || this.email_check || this.email_auth_check) { //하나라도 입력조건이 안맞을시\r\n                this.allcheck = true; //버튼 비활성\r\n            } else {\r\n                this.allcheck = false;\r\n            }\r\n        },\r\n        async sendEmail() {\r\n            await axios({\r\n                url: \"http://localhost:3000/auth/sendEmail\",\r\n                method: \"POST\",\r\n                data: {\r\n                    email: this.email\r\n                },\r\n            }).then(async (res) => {\r\n                this.verifyNum = res.data.verifyNum;\r\n                console.log(res.data.verifyNum, \"서버 코드\");\r\n            }).catch(error => {\r\n                alert(error);\r\n            })\r\n        },\r\n        startCountdown() {\r\n            this.clickSendEmail = true;\r\n            this.interval = setInterval(() => {\r\n                if (this.countdown > 0) {\r\n                    this.countdown--;\r\n                } else {\r\n                    alert('인증에 실패하였습니다.');\r\n                    clearInterval(this.interval); // 컴포넌트가 제거되기 전에 interval을 정리해야합니다.\r\n                    this.countdown = 180;\r\n                    this.userVerifyNum = \"\";\r\n                    this.clickSendEmail = false; // 인증번호입력창 초기화\r\n                }\r\n            }, 1000);\r\n        },\r\n        completeAuthEmail() {\r\n            console.log(this.userVerifyNum, \"사용자입력 코드\");\r\n            if (this.verifyNum == this.userVerifyNum && !this.userVerifyNum == \"\") {\r\n                alert(\"인증이 완료되었습니다.\");\r\n                this.email_auth_check = false;\r\n                this.clickSendEmail = false; // 인증번호입력창 초기화\r\n                this.userVerifyNum = \"\"; //사용자입력 인증코드 초기화\r\n                this.countdown = 180; // 인증시간 초기화\r\n                clearInterval(this.interval); // 컴포넌트가 제거되기 전에 interval을 정리해야합니다.\r\n            } else {\r\n                alert(\"인증번호가 일치하지 않습니다.\");\r\n                this.email_auth_check = true;\r\n                this.userVerifyNum = \"\"; //사용자입력 인증코드 초기화\r\n            }\r\n            this.inputAllCheck()\r\n        },\r\n        async emailCheckForm() {\r\n            await axios({\r\n                url: \"http://localhost:3000/auth/checkemail\",\r\n                method: \"GET\",\r\n                params: {\r\n                    email: this.email,\r\n                },\r\n            }).then(async (res) => {\r\n                const validateEmail = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\r\n                console.log(res.data.result);\r\n                // console.log(this.emailcheck);\r\n                if (res.data == \"사용가능한 이메일입니다.\" && validateEmail.test(this.email)) {\r\n                    this.emailcheck = 2;\r\n                } else if (res.data == \"존재하는 이메일입니다.\") {\r\n                    this.emailcheck = 1;\r\n                    this.allcheck = true;\r\n                } else if (!this.email) {\r\n                    this.emailcheck = 3;\r\n                }\r\n            }).catch(error => {\r\n                alert(error);\r\n            })\r\n        },\r\n\r\n        sample6_execDaumPostcode() { // 다음 지도API\r\n            new daum.Postcode({\r\n                oncomplete: (data) => {\r\n                    let addr = ''; // 주소 변수\r\n\r\n                    if (data.userSelectedType === 'R') {\r\n                        addr = data.roadAddress;\r\n                        // 우편번호와 주소 정보를 해당 필드에 넣는다.\r\n                        this.epostNum = data.zonecode;\r\n                        this.epostAdress = addr;\r\n                    } else if (data.userSelectedType === 'J') {\r\n                        addr = data.jibunAddress;\r\n                        // 우편번호와 주소 정보를 해당 필드에 넣는다.\r\n                        this.epostNum = data.zonecode;\r\n                        this.epostAdress = addr;\r\n                    }\r\n\r\n                    // 상세주소가 비어있지 않을 때만 기존의 상세주소를 유지하도록 처리\r\n                    if (this.epostDetailAdress !== '') {\r\n                        document.getElementById('epostDetailAdress').value = this.epostDetailAdress;\r\n                    }\r\n\r\n                    // 커서를 상세주소 필드로 이동한다.\r\n                    document.getElementById('epostDetailAdress').focus();\r\n                }\r\n            }).open();\r\n        },\r\n        async joinForm() { //백엔드로 회원가입 정보 전달\r\n            if (this.allcheck == true) {\r\n                alert(\"회원정보를 확인해주세요.\");\r\n            } else {\r\n                await axios({\r\n                    url: \"http://localhost:3000/auth/join\",\r\n                    method: \"POST\",\r\n                    data: {\r\n                        name: this.name,\r\n                        email: this.email,\r\n                        password: this.password,\r\n                        sex: this.sex,\r\n                        agegroup: this.agegroup,\r\n                        phone: this.phone_num,\r\n                        zipcode: this.epostNum,\r\n                        add1: this.epostAdress,\r\n                        add2: this.epostDetailAdress\r\n                    },\r\n                }).then(async (res) => {\r\n                    alert(res.data);\r\n                    this.autoLogin();\r\n                }).catch(error => {\r\n                    alert(error);\r\n                })\r\n            }\r\n\r\n        },\r\n        async autoLogin() {\r\n            await axios({\r\n                url: \"http://localhost:3000/auth/login\",\r\n                method: \"POST\",\r\n                data: {\r\n                    email: this.email,\r\n                    password: this.password,\r\n                },\r\n            }).then(async (res) => {\r\n                if (res.data.code == 200) {\r\n                    localStorage.setItem(\"userID\", res.data.email);\r\n                    localStorage.setItem(\"userNick\", res.data.nick);\r\n                    localStorage.setItem(\"userProvider\", res.data.provider);\r\n\r\n                    window.location.href = \"/\";\r\n                }\r\n            }).catch((error) => {\r\n                alert(error);\r\n            });\r\n        },\r\n        kakaoLogin() {\r\n            window.Kakao.Auth.login({\r\n                scope:\r\n                    \"profile_nickname, profile_image, account_email, gender, age_range\",\r\n                success: this.getProfile,\r\n            });\r\n        },\r\n        getProfile(autoObj) {\r\n            window.Kakao.API.request({\r\n                url: \"/v2/user/me\",\r\n                success: (res) => {\r\n                    const kakao_account = res.kakao_account;\r\n                    this.login(kakao_account);\r\n                },\r\n            });\r\n        },\r\n        async login(kakao_account) {\r\n            const email = kakao_account.email;\r\n\r\n            await axios({\r\n                url: \"http://localhost:3000/auth/kakaologin\",\r\n                method: \"POST\",\r\n                data: {\r\n                    email: kakao_account.email,\r\n                    nick: kakao_account.profile.nickname,\r\n                    sex: kakao_account.gender,\r\n                    agegroup: kakao_account.age_range,\r\n                    provider: \"kakao\",\r\n                },\r\n            }).then(async (res) => {\r\n                this.pullData(email);\r\n            });\r\n        },\r\n        pullData(email) {\r\n            axios({\r\n                url: \"http://localhost:3000/auth/kakaoData\",\r\n                method: \"POST\",\r\n                data: {\r\n                    email: email,\r\n                },\r\n            }).then(async (res) => {\r\n                localStorage.setItem(\"userID\", res.data.email);\r\n                localStorage.setItem(\"userNick\", res.data.nick);\r\n                localStorage.setItem(\"userProvider\", res.data.provider);\r\n\r\n                window.location.href = \"/\";\r\n            });\r\n        },\r\n    },\r\n}\r\n</script> \r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}