{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport GnbBar from \"../components/gnbBar.vue\";\nimport Floating from \"../components/floating.vue\";\nimport StarIcon from \"../components/star.vue\"; // 별점 아이콘 컴포넌트의 경로를 수정해주세요.\nimport ScrollTop from \"@/components/scrollTop.vue\";\nimport axios from \"axios\";\naxios.defaults.baseURL = \"http://localhost:3000\";\naxios.defaults.headers.post[\"Contents-Type\"] = \"application/json;charset=utf-8\";\naxios.defaults.headers.post[\"Access-Control-Allow-Origin\"] = \"*\";\nexport default {\n  name: \"\",\n  components: {\n    GnbBar,\n    StarIcon,\n    Floating,\n    ScrollTop\n  },\n  data() {\n    return {\n      categoryData: [],\n      // 카테고리 게시글 데이터\n      // 페이징\n      perPage: 10,\n      //한 페이지에 보여줄 게시물 수\n      currentPage: 1,\n      // 현재 페이지 번호\n      totalPages: 1,\n      // 총 페이지 수\n      maxDisplayedPages: 9,\n      // 표시할 최대 페이지 수 (현재 페이지를 중심으로 좌우로 표시)\n\n      //현재 카테고리 올바른 출력 위한 배열\n      categoryHeader: [{\n        id: 1,\n        top: \"경제경영\",\n        middle: [\"경제학/경제일반\", \"기업 경영\", \"재테크/투자\"],\n        expanded: false\n      }, {\n        id: 2,\n        top: \"과학\",\n        middle: [\"기초과학/교양과학\", \"의학\", \"화학\", \"공학\"],\n        expanded: false\n      }, {\n        id: 3,\n        top: \"사회과학\",\n        middle: [\"비평/칼럼\", \"기업 사회문제\", \" 정치학/외교학/행정학\"],\n        expanded: false\n      }, {\n        id: 4,\n        top: \"소설/시/희곡\",\n        middle: [\"한국소설\", \"일본소설\", \"영미소설\", \"추리/미스터리소설\", \"과학소설(SF)\", \"호러,공포소설\", \"액션/스릴러소설\", \"로맨스소설\", \"시\", \"희곡\", \"영미소설\", \"영미소설\"],\n        expanded: false\n      }, {\n        id: 5,\n        top: \"수험서/자격증\",\n        middle: [\"국가기술자격\", \"국가전문자격\", \"공무원 수험서\", \"한국사능력검정시험\", \"공인중개사/주택관리사\", \"운전면허\", \"컴퓨터 활용능력\", \"편입/검정고시/독학사\"],\n        expanded: false\n      }, {\n        id: 6,\n        top: \"에세이\",\n        middle: [\"한국에세이\", \"외국에세이\", \"여행에세이\", \"사랑/연애 에세이\", \"자연에세이\"],\n        expanded: false\n      }, {\n        id: 7,\n        top: \"여행\",\n        middle: [\"서울/수도권 여행가이드\", \"국내 여행가이드\", \"캠핑여행\", \"유럽여행\", \"일본여행\", \"중국여행\", \"동남아시아여행\", \"세계일주여행\"],\n        expanded: false\n      }, {\n        id: 8,\n        top: \"역사\",\n        middle: [\"동양사 일반\", \"역사학\", \"한국사 일반\", \"한국고대~고려시대\", \"조선사\", \"한국근현대사\", \"아시아사\", \"세계사 일반\"],\n        expanded: false\n      }, {\n        id: 9,\n        top: \"예술/대중문화\",\n        middle: [\"예술/대중문화의 이해\", \"미술\", \"음악\", \"영화/드라마\", \"사진\", \"건축\", \"뮤지컬/오페라\"],\n        expanded: false\n      }, {\n        id: 10,\n        top: \"외국어\",\n        middle: [\"어학사전\", \"토익\", \"토플\", \"영어회화\", \"영문법\", \"영어사전\", \"일본어\", \"중국어\", \"한자\", \" 통역/번역\"],\n        expanded: false\n      }, {\n        id: 11,\n        top: \"요리/살림\",\n        middle: [\"건강요리\", \"다이어트 요리\", \"도시락\", \"디저트\", \"살림/정리수납\", \"술/음료/차\", \"이유식\", \"제과제빵\"],\n        expanded: false\n      }, {\n        id: 12,\n        top: \"인문학\",\n        middle: [\"교양 인문학\", \"철학 일반\", \"서양철학\", \"동양철학\", \" 심리학/정신분석학\", \"인류학/고고학\"],\n        expanded: false\n      }, {\n        id: 13,\n        top: \"자기계발\",\n        middle: [\"성공\", \"리더십\", \"인간관계\", \"창의적사고/두뇌계발\", \"취업/진로/유망직업\", \"20대의자기계발\"],\n        expanded: false\n      }, {\n        id: 14,\n        top: \"장르소설\",\n        middle: [\"추리/미스터리소설\", \" 판타지/환상문학\", \"호러/공포\", \"액션/스릴러\", \"로맨스\"],\n        expanded: false\n      }, {\n        id: 15,\n        top: \"컴퓨터/모바일\",\n        middle: [\"웹디자인/홈페이지\", \"인공지능\", \"프로그래밍 개발/방법론\", \"프로그래밍 언어\", \"PC/게임/디지털 카메라\"],\n        expanded: false\n      }],\n      currentHeaderCategory: \"\",\n      reviewScore: [],\n      // 리뷰 점수를 얻어온다고 가정\n      email: \"\",\n      bookId: \"\",\n      filterValue: \"판매순\",\n      currentCategory: \"\",\n      //좋아요 여부\n      isLiked: false,\n      likeBook: [],\n      nextDay: 0,\n      month: 0\n    };\n  },\n  setup() {},\n  created() {\n    this.email = localStorage.getItem(\"userID\");\n    this.getLikeBook();\n    this.getNextDate();\n  },\n  mounted() {\n    this.$route.params.category == '장르소설' ? this.currentCategory = '소설/시/희곡' : this.currentCategory = this.$route.params.category;\n    this.isCategoryHeaderMatch();\n    console.log(this.currentCategory);\n    this.$nextTick(() => {\n      this.getCateGoryData();\n    });\n  },\n  unmounted() {},\n  computed: {\n    totalPages() {\n      // 전체 페이지 수 계산\n      this.totalPages = Math.ceil(this.categoryData.length / this.perPage);\n      return Math.ceil(this.categoryData.length / this.perPage);\n    },\n    pageNumbers() {\n      const start = Math.max(1, this.currentPage - Math.floor(this.maxDisplayedPages / 2));\n      const end = Math.min(this.totalPages, start + this.maxDisplayedPages - 1);\n      return Array.from({\n        length: end - start + 1\n      }, (_, i) => start + i);\n    }\n  },\n  watch: {\n    '$route'(to, from) {\n      this.$route.params.category == '장르소설' ? this.currentCategory = '소설/시/희곡' : this.currentCategory = this.$route.params.category;\n      this.getCateGoryData();\n      this.isCategoryHeaderMatch();\n    }\n  },\n  methods: {\n    changePage(pageNumber) {\n      if (pageNumber === 'first') {\n        // 맨 앞 페이지로 이동\n        pageNumber = 1;\n      } else if (pageNumber === 'last') {\n        // 맨 뒤 페이지로 이동\n        pageNumber = this.totalPages;\n      } else {\n        pageNumber = parseInt(pageNumber); // 페이지 번호로 변환\n      }\n\n      window.scrollTo({\n        top: 0,\n        behavior: 'auto'\n      });\n      if (pageNumber >= 1 && pageNumber <= this.totalPages) {\n        this.currentPage = pageNumber;\n        // 페이지 변경 시 추가 로직 수행\n        // 예: API 호출하여 해당 페이지 데이터 가져오기\n        // displayedPosts 업데이트\n        this.displayedPosts = this.categoryData.slice((this.currentPage - 1) * this.perPage, this.currentPage * this.perPage);\n      }\n    },\n    isCategoryHeaderMatch() {\n      if (!this.categoryHeader.some(category => category.top.includes(this.currentCategory))) {\n        const foundCategory = this.categoryHeader.find(category => category.middle.includes(this.currentCategory));\n        if (foundCategory) {\n          this.currentHeaderCategory = foundCategory.top + ' ➜ ' + this.currentCategory;\n        } else {\n          this.currentHeaderCategory = this.currentCategory;\n        }\n      } else {\n        this.currentHeaderCategory = this.currentCategory;\n      }\n    },\n    handleSearchKeyword(keyword) {\n      this.searchKeyword = keyword;\n      this.getCateGoryData();\n    },\n    //카테고리 데이터 가져오기\n    async getCateGoryData() {\n      //판매순\n      if (this.filterValue === \"판매순\") {\n        await axios({\n          url: \"http://localhost:3000/bookList/bestCate\",\n          method: \"POST\",\n          data: {\n            category: this.currentCategory\n          }\n        }).then(res => {\n          if (localStorage.getItem(\"userID\")) {\n            console.log(res, this.currentCategory + \"카테고리 데이터\");\n            this.categoryData = res.data;\n            this.categoryData = res.data.map(book => {\n              return {\n                ...book,\n                isLiked: this.likeBook.includes(book.BOOK_ID) // 해당 책의 BOOK_ID가 likeBook 배열에 포함되어 있는지 확인하여 isLiked 값을 설정\n              };\n            });\n\n            for (var i in res.data) {\n              //별이 5개이므로 총점10점을 2로 나눔\n              this.reviewScore.push(res.data[i].reviewpoint / 2);\n            }\n          } else {\n            this.categoryData = res.data.map(book => {\n              return {\n                ...book,\n                isLiked: false // 해당 책의 BOOK_ID가 likeBook 배열에 포함되어 있는지 확인하여 isLiked 값을 설정\n              };\n            });\n          }\n\n          console.log(this.categoryData, \"최종 카테고리\");\n          console.log(this.reviewScore, \"리뷰\");\n          // displayedPosts에 categoryData 데이터 복사\n          this.displayedPosts = this.categoryData.slice((this.currentPage - 1) * this.perPage, this.currentPage * this.perPage);\n        }).catch(err => {\n          console.log(err);\n        });\n      } else if (this.filterValue === \"신상품순\") {\n        await axios({\n          url: \"http://localhost:3000/bookList/newCate\",\n          method: \"POST\",\n          data: {\n            category: this.currentCategory\n          }\n        }).then(res => {\n          if (localStorage.getItem(\"userID\")) {\n            console.log(res, this.currentCategory + \"카테고리 데이터\");\n            this.categoryData = res.data;\n            this.categoryData = res.data.map(book => {\n              return {\n                ...book,\n                isLiked: this.likeBook.includes(book.BOOK_ID) // 해당 책의 BOOK_ID가 likeBook 배열에 포함되어 있는지 확인하여 isLiked 값을 설정\n              };\n            });\n\n            for (var i in res.data) {\n              //별이 5개이므로 총점10점을 2로 나눔\n              this.reviewScore.push(res.data[i].reviewpoint / 2);\n            }\n          } else {\n            this.categoryData = res.data.map(book => {\n              return {\n                ...book,\n                isLiked: false // 해당 책의 BOOK_ID가 likeBook 배열에 포함되어 있는지 확인하여 isLiked 값을 설정\n              };\n            });\n          }\n\n          console.log(this.categoryData, \"최종 카테고리\");\n          console.log(this.reviewScore, \"리뷰\");\n          // displayedPosts에 categoryData 데이터 복사\n          this.displayedPosts = this.categoryData.slice((this.currentPage - 1) * this.perPage, this.currentPage * this.perPage);\n        }).catch(err => {\n          console.log(err);\n        });\n      }\n    },\n    //회원이 좋아요한 책 ID 가져오기\n    async getLikeBook() {\n      await axios({\n        url: \"http://localhost:3000/bookList/checkLikeList\",\n        method: \"POST\",\n        data: {\n          email: this.email\n        }\n      }).then(res => {\n        this.likeBook = res.data;\n      });\n    },\n    async likeToggle(bookId) {\n      if (localStorage.getItem(\"userID\")) {\n        this.bookId = bookId;\n        await axios({\n          url: \"http://localhost:3000/detail/likeOrDislike\",\n          method: \"POST\",\n          data: {\n            email: this.email,\n            bookId: this.bookId\n          }\n        }).then(res => {\n          console.log(res.data, \"좋아요 추가삭제\");\n          this.getLikeBook();\n          this.getCateGoryData();\n        });\n      } else {\n        const conResult = confirm(\"로그인이 필요합니다. \\n 로그인 하시겠습니까?\");\n        conResult ? window.location.href = \"/login\" : null;\n      }\n    },\n    //입력된 숫자를 주어진 범위에 따라 적절한 별점으로 변환\n    convertRatingToHalfStars(number) {\n      if (Number.isInteger(number)) {\n        if (number >= 1 && number <= 5) {\n          return number;\n        } else {\n          return 0; // 범위를 벗어나는 경우\n        }\n      } else {\n        const integerPart = Math.floor(number);\n        const decimalPart = number - integerPart;\n        if (decimalPart < 0.5) {\n          return integerPart;\n        } else {\n          return integerPart + 0.5;\n        }\n      }\n    },\n    formatReviewScore(number) {\n      if (number === undefined) {\n        return 'N/A'; // 또는 다른 특별한 값으로 대체\n      }\n\n      if (Number.isInteger(number)) {\n        return number.toFixed(1); // 정수인 경우 소수점 자리를 1로 설정하여 변환\n      } else {\n        return number.toString(); // 소수인 경우 그대로 문자열로 변환\n      }\n    },\n\n    formatNumber(number) {\n      // 숫자를 천 단위마다 쉼표가 있는 형식으로 변환\n      return new Intl.NumberFormat().format(number);\n    },\n    //장바구니에 추가\n    async addToCart(bookId) {\n      if (localStorage.getItem(\"userID\")) {\n        this.bookId = bookId;\n        await axios({\n          url: \"http://localhost:3000/detail/gotoCart\",\n          method: \"POST\",\n          data: {\n            email: this.email,\n            bookId: this.bookId\n          }\n        }).then(res => {\n          alert(\"장바구니에 추가되었습니다.\");\n          this.$refs.childComponent.getCartNum();\n        });\n      } else {\n        const conResult = confirm(\"로그인이 필요합니다. \\n 로그인 하시겠습니까?\");\n        conResult ? window.location.href = \"/login\" : null;\n      }\n    },\n    // 결제하기 버튼 클릭시 서버로 보낼 데이터\n    async goToPay(bookId, bookPrice) {\n      const totalPoint = bookPrice * 0.05;\n      const bookfee = bookPrice >= 50000 ? 0 : 2500;\n      await axios({\n        url: \"http://localhost:3000/detail/gotoPay\",\n        method: \"POST\",\n        data: {\n          bookId: bookId,\n          bookNum: 1,\n          email: this.email,\n          total_pay: bookPrice,\n          total_point: totalPoint,\n          fee: bookfee\n        }\n      }).then(res => {\n        console.log(res.data.payID);\n        window.location.href = `/pay/${res.data.payID}`;\n      }).catch(error => {\n        console.error(\"Error goToPay :\", error);\n      });\n    },\n    getNextDate() {\n      //내일 배송일로 나오게 하는 함수\n      const today = new Date();\n      this.nextDay = today.getDate() + 1;\n      this.month = today.getMonth() + 1;\n    }\n  }\n};","map":{"version":3,"names":["GnbBar","Floating","StarIcon","ScrollTop","axios","defaults","baseURL","headers","post","name","components","data","categoryData","perPage","currentPage","totalPages","maxDisplayedPages","categoryHeader","id","top","middle","expanded","currentHeaderCategory","reviewScore","email","bookId","filterValue","currentCategory","isLiked","likeBook","nextDay","month","setup","created","localStorage","getItem","getLikeBook","getNextDate","mounted","$route","params","category","isCategoryHeaderMatch","console","log","$nextTick","getCateGoryData","unmounted","computed","Math","ceil","length","pageNumbers","start","max","floor","end","min","Array","from","_","i","watch","to","methods","changePage","pageNumber","parseInt","window","scrollTo","behavior","displayedPosts","slice","some","includes","foundCategory","find","handleSearchKeyword","keyword","searchKeyword","url","method","then","res","map","book","BOOK_ID","push","reviewpoint","catch","err","likeToggle","conResult","confirm","location","href","convertRatingToHalfStars","number","Number","isInteger","integerPart","decimalPart","formatReviewScore","undefined","toFixed","toString","formatNumber","Intl","NumberFormat","format","addToCart","alert","$refs","childComponent","getCartNum","goToPay","bookPrice","totalPoint","bookfee","bookNum","total_pay","total_point","fee","payID","error","today","Date","getDate","getMonth"],"sources":["C:\\Users\\Lim\\Desktop\\BOOK_0728\\MOONMOON\\vue_front\\src\\views\\categories.vue"],"sourcesContent":["<style src=\"../assets/css/searchList.css\"></style>\r\n\r\n<template>\r\n    <GnbBar ref=\"childComponent\" @search-keyword=\"handleSearchKeyword\" />\r\n    <div>\r\n        <h1 class=\"search_category_header\">카테고리 - {{ currentHeaderCategory }}</h1>\r\n    </div>\r\n    <div class=\"search\">\r\n        <div class=\"search_header\">\r\n            <div class=\"search_header_left\">\r\n                <span>'{{ currentCategory }}'</span>에 대한\r\n                <span>{{ categoryData.length }}</span>개의 결과\r\n            </div>\r\n            <div class=\"search_header_right\">\r\n                <select @change=\"getCateGoryData\" v-model=\"filterValue\">\r\n                    <option value=\"판매순\">판매순</option>\r\n                    <option value=\"신상품순\">신상품순</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n        <div class=\"search_items\">\r\n            <div v-for=\"(item, i) in displayedPosts\" :key=\"i\" class=\"search_item\">\r\n                <div class=\"search_item_img\">\r\n                    <a :href=\"`/detail/${item.BOOK_ID}`\"><img :src=\"item.BOOK_COVER\" alt=\"\" /></a>\r\n                </div>\r\n                <div class=\"search_item_info\">\r\n                    <h2 class=\"best_item_info_title\"><a :href=\"`/detail/${item.BOOK_ID}`\">{{ item.BOOK_TITLE }}</a></h2>\r\n                    <span class=\"search_item_info_author\">{{ item.BOOK_AUTHOR }} | {{ item.BOOK_PUBDATE }}</span>\r\n                    <div class=\"search_item_info_price\">\r\n                        <span>{{ formatNumber(item.BOOK_PRICE) }}</span>\r\n                        <span>원</span>\r\n                    </div>\r\n                    <p class=\"best_item_info_summary\">\r\n                        {{ item.BOOK_DESCRIPTION }}\r\n                    </p>\r\n                    <div class=\"search_item_info_star\">\r\n                        <span v-if=\"item.reviewpoint == 0\" class=\"best_item_info_star_num\">0.0</span>\r\n                        <span v-else class=\"best_item_info_star_num\">{{ formatReviewScore(item.reviewpoint) }}</span>\r\n                        <StarIcon :rating=\"convertRatingToHalfStars(reviewScore[i])\" />\r\n                    </div>\r\n                </div>\r\n                <div class=\"search_item_order\">\r\n                    <a @click=\"goToPay(item.BOOK_ID, item.BOOK_PRICE)\" href=\"#\">결제하러 가기</a>\r\n                    <p><span>내일({{ month }}/{{ nextDay }})</span> 도착예정</p>\r\n                </div>\r\n                <div class=\"search_item_btn\">\r\n                    <img v-if=\"item.isLiked == true\" @click=\"likeToggle(item.BOOK_ID)\" src=\"../assets/img/heartFill.png\"\r\n                        alt=\"Heart Filled\" />\r\n                    <img v-else-if=\"item.isLiked == false\" @click=\"likeToggle(item.BOOK_ID)\" src=\"../assets/img/heart.png\"\r\n                        alt=\"Heart\" />\r\n                    <img @click=\"addToCart(item.BOOK_ID)\" src=\"../assets/img/cart2.png\" alt=\"\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"booklist_paging\">\r\n            <button @click=\"changePage('first')\" :disabled=\"currentPage === 1\">맨앞</button>\r\n            <button @click=\"changePage(currentPage - 1)\" :disabled=\"currentPage === 1\">이전</button>\r\n            <button v-for=\"pageNumber in pageNumbers\" :key=\"pageNumber\" @click=\"changePage(pageNumber)\"\r\n                :class=\"{ active: pageNumber === currentPage }\">\r\n                {{ pageNumber }}\r\n            </button>\r\n            <button @click=\"changePage(currentPage + 1)\" :disabled=\"currentPage === totalPages\">다음</button>\r\n            <button @click=\"changePage('last')\" :disabled=\"currentPage === totalPages\">맨뒤</button>\r\n        </div>\r\n        <!-- 플로팅-->\r\n        <Floating />\r\n        <!-- 스크롤 TOP -->\r\n        <ScrollTop />\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport GnbBar from \"../components/gnbBar.vue\";\r\nimport Floating from \"../components/floating.vue\"\r\nimport StarIcon from \"../components/star.vue\"; // 별점 아이콘 컴포넌트의 경로를 수정해주세요.\r\nimport ScrollTop from \"@/components/scrollTop.vue\";\r\n\r\nimport axios from \"axios\";\r\naxios.defaults.baseURL = \"http://localhost:3000\";\r\naxios.defaults.headers.post[\"Contents-Type\"] = \"application/json;charset=utf-8\";\r\naxios.defaults.headers.post[\"Access-Control-Allow-Origin\"] = \"*\";\r\n\r\nexport default {\r\n\r\n    name: \"\",\r\n    components: { GnbBar, StarIcon, Floating, ScrollTop },\r\n    data() {\r\n        return {\r\n            categoryData: [], // 카테고리 게시글 데이터\r\n            // 페이징\r\n            perPage: 10, //한 페이지에 보여줄 게시물 수\r\n            currentPage: 1, // 현재 페이지 번호\r\n            totalPages: 1, // 총 페이지 수\r\n            maxDisplayedPages: 9, // 표시할 최대 페이지 수 (현재 페이지를 중심으로 좌우로 표시)\r\n\r\n            //현재 카테고리 올바른 출력 위한 배열\r\n            categoryHeader: [\r\n                {\r\n                    id: 1,\r\n                    top: \"경제경영\",\r\n                    middle: [\"경제학/경제일반\", \"기업 경영\", \"재테크/투자\"],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 2,\r\n                    top: \"과학\",\r\n                    middle: [\"기초과학/교양과학\", \"의학\", \"화학\", \"공학\"],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 3,\r\n                    top: \"사회과학\",\r\n                    middle: [\"비평/칼럼\", \"기업 사회문제\", \" 정치학/외교학/행정학\"],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 4,\r\n                    top: \"소설/시/희곡\",\r\n                    middle: [\r\n                        \"한국소설\",\r\n                        \"일본소설\",\r\n                        \"영미소설\",\r\n                        \"추리/미스터리소설\",\r\n                        \"과학소설(SF)\",\r\n                        \"호러,공포소설\",\r\n                        \"액션/스릴러소설\",\r\n                        \"로맨스소설\",\r\n                        \"시\",\r\n                        \"희곡\",\r\n                        \"영미소설\",\r\n                        \"영미소설\",\r\n                    ],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 5,\r\n                    top: \"수험서/자격증\",\r\n                    middle: [\r\n                        \"국가기술자격\",\r\n                        \"국가전문자격\",\r\n                        \"공무원 수험서\",\r\n                        \"한국사능력검정시험\",\r\n                        \"공인중개사/주택관리사\",\r\n                        \"운전면허\",\r\n                        \"컴퓨터 활용능력\",\r\n                        \"편입/검정고시/독학사\",\r\n                    ],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 6,\r\n                    top: \"에세이\",\r\n                    middle: [\"한국에세이\", \"외국에세이\", \"여행에세이\", \"사랑/연애 에세이\", \"자연에세이\"],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 7,\r\n                    top: \"여행\",\r\n                    middle: [\r\n                        \"서울/수도권 여행가이드\",\r\n                        \"국내 여행가이드\",\r\n                        \"캠핑여행\",\r\n                        \"유럽여행\",\r\n                        \"일본여행\",\r\n                        \"중국여행\",\r\n                        \"동남아시아여행\",\r\n                        \"세계일주여행\",\r\n                    ],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 8,\r\n                    top: \"역사\",\r\n                    middle: [\"동양사 일반\", \"역사학\", \"한국사 일반\", \"한국고대~고려시대\", \"조선사\", \"한국근현대사\", \"아시아사\", \"세계사 일반\"],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 9,\r\n                    top: \"예술/대중문화\",\r\n                    middle: [\"예술/대중문화의 이해\", \"미술\", \"음악\", \"영화/드라마\", \"사진\", \"건축\", \"뮤지컬/오페라\"],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 10,\r\n                    top: \"외국어\",\r\n                    middle: [\"어학사전\", \"토익\", \"토플\", \"영어회화\", \"영문법\", \"영어사전\", \"일본어\", \"중국어\", \"한자\", \" 통역/번역\"],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 11,\r\n                    top: \"요리/살림\",\r\n                    middle: [\"건강요리\", \"다이어트 요리\", \"도시락\", \"디저트\", \"살림/정리수납\", \"술/음료/차\", \"이유식\", \"제과제빵\"],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 12,\r\n                    top: \"인문학\",\r\n                    middle: [\"교양 인문학\", \"철학 일반\", \"서양철학\", \"동양철학\", \" 심리학/정신분석학\", \"인류학/고고학\"],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 13,\r\n                    top: \"자기계발\",\r\n                    middle: [\"성공\", \"리더십\", \"인간관계\", \"창의적사고/두뇌계발\", \"취업/진로/유망직업\", \"20대의자기계발\"],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 14,\r\n                    top: \"장르소설\",\r\n                    middle: [\"추리/미스터리소설\", \" 판타지/환상문학\", \"호러/공포\", \"액션/스릴러\", \"로맨스\"],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 15,\r\n                    top: \"컴퓨터/모바일\",\r\n                    middle: [\"웹디자인/홈페이지\", \"인공지능\", \"프로그래밍 개발/방법론\", \"프로그래밍 언어\", \"PC/게임/디지털 카메라\"],\r\n                    expanded: false,\r\n                },\r\n            ],\r\n            currentHeaderCategory: \"\",\r\n            reviewScore: [], // 리뷰 점수를 얻어온다고 가정\r\n            email: \"\",\r\n            bookId: \"\",\r\n            filterValue: \"판매순\",\r\n\r\n            currentCategory: \"\",\r\n\r\n            //좋아요 여부\r\n            isLiked: false,\r\n            likeBook: [],\r\n\r\n            nextDay: 0,\r\n            month: 0\r\n\r\n        };\r\n    },\r\n\r\n    setup() { },\r\n    created() {\r\n        this.email = localStorage.getItem(\"userID\");\r\n        this.getLikeBook();\r\n        this.getNextDate();\r\n    },\r\n    mounted() {\r\n        this.$route.params.category == '장르소설' ? this.currentCategory = '소설/시/희곡' : this.currentCategory = this.$route.params.category;\r\n        this.isCategoryHeaderMatch();\r\n        console.log(this.currentCategory);\r\n        this.$nextTick(() => {\r\n            this.getCateGoryData();\r\n        });\r\n    },\r\n    unmounted() { },\r\n    computed: {\r\n        totalPages() { // 전체 페이지 수 계산\r\n            this.totalPages = Math.ceil(this.categoryData.length / this.perPage);\r\n            return Math.ceil(this.categoryData.length / this.perPage);\r\n        },\r\n        pageNumbers() {\r\n            const start = Math.max(1, this.currentPage - Math.floor(this.maxDisplayedPages / 2));\r\n            const end = Math.min(this.totalPages, start + this.maxDisplayedPages - 1);\r\n            return Array.from({ length: end - start + 1 }, (_, i) => start + i);\r\n        }\r\n    },\r\n    watch: {\r\n        '$route'(to, from) {\r\n            this.$route.params.category == '장르소설' ? this.currentCategory = '소설/시/희곡' : this.currentCategory = this.$route.params.category;\r\n            this.getCateGoryData();\r\n            this.isCategoryHeaderMatch();\r\n        }\r\n    },\r\n    methods: {\r\n\r\n        changePage(pageNumber) {\r\n            if (pageNumber === 'first') { // 맨 앞 페이지로 이동\r\n                pageNumber = 1;\r\n            } else if (pageNumber === 'last') { // 맨 뒤 페이지로 이동\r\n                pageNumber = this.totalPages;\r\n            } else {\r\n                pageNumber = parseInt(pageNumber); // 페이지 번호로 변환\r\n            }\r\n\r\n            window.scrollTo({ top: 0, behavior: 'auto' });\r\n            if (pageNumber >= 1 && pageNumber <= this.totalPages) {\r\n                this.currentPage = pageNumber;\r\n                // 페이지 변경 시 추가 로직 수행\r\n                // 예: API 호출하여 해당 페이지 데이터 가져오기\r\n                // displayedPosts 업데이트\r\n                this.displayedPosts = this.categoryData.slice(\r\n                    (this.currentPage - 1) * this.perPage,\r\n                    this.currentPage * this.perPage\r\n                );\r\n            }\r\n        },\r\n        isCategoryHeaderMatch() {\r\n            if (!this.categoryHeader.some(category => category.top.includes(this.currentCategory))) {\r\n                const foundCategory = this.categoryHeader.find(category => category.middle.includes(this.currentCategory));\r\n                if (foundCategory) {\r\n                    this.currentHeaderCategory = foundCategory.top + ' ➜ ' + this.currentCategory;\r\n                } else {\r\n                    this.currentHeaderCategory = this.currentCategory;\r\n                }\r\n            } else {\r\n                this.currentHeaderCategory = this.currentCategory;\r\n            }\r\n        },\r\n        handleSearchKeyword(keyword) {\r\n            this.searchKeyword = keyword;\r\n            this.getCateGoryData();\r\n        },\r\n        //카테고리 데이터 가져오기\r\n        async getCateGoryData() {\r\n            //판매순\r\n            if (this.filterValue === \"판매순\") {\r\n                await axios({\r\n                    url: \"http://localhost:3000/bookList/bestCate\",\r\n                    method: \"POST\",\r\n                    data: {\r\n                        category: this.currentCategory\r\n                    }\r\n                })\r\n                    .then((res) => {\r\n                        if (localStorage.getItem(\"userID\")) {\r\n                            console.log(res, this.currentCategory + \"카테고리 데이터\");\r\n                            this.categoryData = res.data;\r\n\r\n                            this.categoryData = res.data.map(book => {\r\n                                return {\r\n                                    ...book,\r\n                                    isLiked: this.likeBook.includes(book.BOOK_ID) // 해당 책의 BOOK_ID가 likeBook 배열에 포함되어 있는지 확인하여 isLiked 값을 설정\r\n                                };\r\n                            });\r\n                            for (var i in res.data) {\r\n                                //별이 5개이므로 총점10점을 2로 나눔\r\n                                this.reviewScore.push((res.data[i].reviewpoint) / 2)\r\n                            }\r\n                        } else {\r\n                            this.categoryData = res.data.map(book => {\r\n                                return {\r\n                                    ...book,\r\n                                    isLiked: false // 해당 책의 BOOK_ID가 likeBook 배열에 포함되어 있는지 확인하여 isLiked 값을 설정\r\n                                };\r\n                            });\r\n                        }\r\n                        console.log(this.categoryData, \"최종 카테고리\")\r\n                        console.log(this.reviewScore, \"리뷰\")\r\n                        // displayedPosts에 categoryData 데이터 복사\r\n                        this.displayedPosts = this.categoryData.slice(\r\n                            (this.currentPage - 1) * this.perPage,\r\n                            this.currentPage * this.perPage\r\n                        );\r\n                    })\r\n                    .catch((err) => {\r\n                        console.log(err);\r\n                    })\r\n            } else if (this.filterValue === \"신상품순\") {\r\n                await axios({\r\n                    url: \"http://localhost:3000/bookList/newCate\",\r\n                    method: \"POST\",\r\n                    data: {\r\n                        category: this.currentCategory\r\n                    }\r\n                })\r\n                    .then((res) => {\r\n                        if (localStorage.getItem(\"userID\")) {\r\n                            console.log(res, this.currentCategory + \"카테고리 데이터\");\r\n                            this.categoryData = res.data;\r\n\r\n                            this.categoryData = res.data.map(book => {\r\n                                return {\r\n                                    ...book,\r\n                                    isLiked: this.likeBook.includes(book.BOOK_ID) // 해당 책의 BOOK_ID가 likeBook 배열에 포함되어 있는지 확인하여 isLiked 값을 설정\r\n                                };\r\n                            });\r\n                            for (var i in res.data) {\r\n                                //별이 5개이므로 총점10점을 2로 나눔\r\n                                this.reviewScore.push((res.data[i].reviewpoint) / 2)\r\n                            }\r\n                        } else {\r\n                            this.categoryData = res.data.map(book => {\r\n                                return {\r\n                                    ...book,\r\n                                    isLiked: false // 해당 책의 BOOK_ID가 likeBook 배열에 포함되어 있는지 확인하여 isLiked 값을 설정\r\n                                };\r\n                            });\r\n                        }\r\n                        console.log(this.categoryData, \"최종 카테고리\")\r\n                        console.log(this.reviewScore, \"리뷰\")\r\n                        // displayedPosts에 categoryData 데이터 복사\r\n                        this.displayedPosts = this.categoryData.slice(\r\n                            (this.currentPage - 1) * this.perPage,\r\n                            this.currentPage * this.perPage\r\n                        );\r\n                    })\r\n                    .catch((err) => {\r\n                        console.log(err);\r\n                    })\r\n            }\r\n\r\n        },\r\n        //회원이 좋아요한 책 ID 가져오기\r\n        async getLikeBook() {\r\n            await axios({\r\n                url: \"http://localhost:3000/bookList/checkLikeList\",\r\n                method: \"POST\",\r\n                data: {\r\n                    email: this.email\r\n                }\r\n            })\r\n                .then((res) => {\r\n                    this.likeBook = res.data;\r\n                })\r\n        },\r\n        async likeToggle(bookId) {\r\n            if (localStorage.getItem(\"userID\")) {\r\n                this.bookId = bookId;\r\n                await axios({\r\n                    url: \"http://localhost:3000/detail/likeOrDislike\",\r\n                    method: \"POST\",\r\n                    data: {\r\n                        email: this.email,\r\n                        bookId: this.bookId\r\n                    }\r\n                })\r\n                    .then((res) => {\r\n                        console.log(res.data, \"좋아요 추가삭제\")\r\n                        this.getLikeBook();\r\n                        this.getCateGoryData();\r\n                    })\r\n\r\n            } else {\r\n                const conResult = confirm(\"로그인이 필요합니다. \\n 로그인 하시겠습니까?\");\r\n                conResult ? window.location.href = \"/login\" : null;\r\n            }\r\n\r\n        },\r\n        //입력된 숫자를 주어진 범위에 따라 적절한 별점으로 변환\r\n        convertRatingToHalfStars(number) {\r\n            if (Number.isInteger(number)) {\r\n                if (number >= 1 && number <= 5) {\r\n                    return number;\r\n                } else {\r\n                    return 0; // 범위를 벗어나는 경우\r\n                }\r\n            } else {\r\n                const integerPart = Math.floor(number);\r\n                const decimalPart = number - integerPart;\r\n\r\n                if (decimalPart < 0.5) {\r\n                    return integerPart;\r\n                } else {\r\n                    return integerPart + 0.5;\r\n                }\r\n            }\r\n        },\r\n        formatReviewScore(number) {\r\n            if (number === undefined) {\r\n                return 'N/A'; // 또는 다른 특별한 값으로 대체\r\n            }\r\n\r\n            if (Number.isInteger(number)) {\r\n                return number.toFixed(1); // 정수인 경우 소수점 자리를 1로 설정하여 변환\r\n            } else {\r\n                return number.toString(); // 소수인 경우 그대로 문자열로 변환\r\n            }\r\n        },\r\n        formatNumber(number) {\r\n            // 숫자를 천 단위마다 쉼표가 있는 형식으로 변환\r\n            return new Intl.NumberFormat().format(number);\r\n        },\r\n        //장바구니에 추가\r\n        async addToCart(bookId) {\r\n            if (localStorage.getItem(\"userID\")) {\r\n                this.bookId = bookId;\r\n                await axios({\r\n                    url: \"http://localhost:3000/detail/gotoCart\",\r\n                    method: \"POST\",\r\n                    data: {\r\n                        email: this.email,\r\n                        bookId: this.bookId\r\n                    }\r\n                })\r\n                    .then((res) => {\r\n                        alert(\"장바구니에 추가되었습니다.\");\r\n                        this.$refs.childComponent.getCartNum();\r\n                    })\r\n            } else {\r\n                const conResult = confirm(\"로그인이 필요합니다. \\n 로그인 하시겠습니까?\");\r\n                conResult ? window.location.href = \"/login\" : null;\r\n            }\r\n        },\r\n        // 결제하기 버튼 클릭시 서버로 보낼 데이터\r\n        async goToPay(bookId, bookPrice) {\r\n            const totalPoint = bookPrice * 0.05;\r\n            const bookfee = bookPrice >= 50000 ? 0 : 2500;\r\n            await axios({\r\n                url: \"http://localhost:3000/detail/gotoPay\",\r\n                method: \"POST\",\r\n                data: {\r\n                    bookId: bookId,\r\n                    bookNum: 1,\r\n                    email: this.email,\r\n                    total_pay: bookPrice,\r\n                    total_point: totalPoint,\r\n                    fee: bookfee\r\n                },\r\n            })\r\n                .then((res) => {\r\n                    console.log(res.data.payID);\r\n                    window.location.href = `/pay/${res.data.payID}`;\r\n                })\r\n                .catch((error) => {\r\n                    console.error(\"Error goToPay :\", error);\r\n                });\r\n        },\r\n        getNextDate() {\r\n            //내일 배송일로 나오게 하는 함수\r\n            const today = new Date();\r\n            this.nextDay = today.getDate() + 1;\r\n            this.month = today.getMonth() + 1;\r\n        },\r\n    },\r\n};\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}