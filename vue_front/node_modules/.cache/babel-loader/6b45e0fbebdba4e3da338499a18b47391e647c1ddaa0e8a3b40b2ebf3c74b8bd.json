{"ast":null,"code":"import axios from \"axios\";\nimport myPageSide from \"../components/myPageSide.vue\";\nimport gnbBar from \"@/components/gnbBar.vue\";\nexport default {\n  components: {\n    myPageSide,\n    gnbBar\n  },\n  data() {\n    return {\n      originalData: {},\n      // 기존 데이터를 저장할 객체\n      updatedFields: {},\n      // 수정한 데이터를 저장할 객체\n      message: \"\",\n      passwordModal: false,\n      newPassword: \"\",\n      confirmPassword: \"\",\n      passwordValidationMessage: \"\",\n      passwordMatchMessage: \"\",\n      isPasswordModalClosed: false\n    };\n  },\n  created() {\n    const email = localStorage.getItem(\"userID\");\n    this.fetchUserInfo(email); // 컴포넌트 생성 시 기존 데이터를 불러오는 메소드 호출\n  },\n\n  methods: {\n    convertAgeRange(age) {\n      if (age === \"14~19\" || age === \"14-19\") {\n        return \"10\";\n      } else if (age === \"20~29\" || age === \"20-29\") {\n        return \"20\";\n      } else if (age === \"30~39\" || age === \"30-39\") {\n        return \"30\";\n      } else if (age === \"40~49\" || age === \"40-49\") {\n        return \"40\";\n      } else if (age === \"50~59\" || age === \"50-59\") {\n        return \"50\";\n      } else {\n        return age;\n      }\n    },\n    async fetchUserInfo(email) {\n      try {\n        const response = await axios.get(\"mypage/getUserInfo\", {\n          params: {\n            userEmail: email\n          }\n        });\n        this.originalData = {\n          ...response.data,\n          //age: response.data.age, // age 프로퍼티에 값을 할당\n          ageRange: this.convertAgeRange(response.data.age) // 나이대 변환\n        };\n\n        this.updatedFields = {\n          ...this.originalData\n        }; // 수정할 정보를 updatedFields에 복사\n        console.log(this.updatedFields);\n      } catch (error) {\n        console.error(\"기존 회원정보 불러오기 오류:\", error);\n      }\n    },\n    async updateUserInfo() {\n      // console.log(\"!\");\n      const email = localStorage.getItem(\"userID\");\n      alert(\"수정이 완료되었습니다\");\n\n      // POST 요청을 보내기 위한 데이터 구성\n      const updatedFields = {\n        email: email,\n        updatedFields: {\n          add1: this.updatedFields.add1,\n          add2: this.updatedFields.add2,\n          zipcode: this.updatedFields.zipcode,\n          phone_num: this.updatedFields.phone_num,\n          password: this.updatedFields.password\n        }\n      };\n      const requestData = {\n        email: email,\n        updatedFields: updatedFields\n      };\n      try {\n        const response = await axios.post(\"mypage/updateUserInfo\", requestData);\n        this.message = response.data.message;\n        this.fetchUserInfo(localStorage.getItem(\"userID\"));\n        // alert(\"수정되었습니다.\");\n      } catch (error) {\n        console.error(\"회원정보 수정 오류:\", error);\n        this.message = \"회원정보 수정에 실패했습니다.\";\n      }\n    },\n    convertGender(genderCode) {\n      if (genderCode === \"f\") {\n        return \"여자\";\n      } else if (genderCode === \"m\") {\n        return \"남자\";\n      }\n    },\n    openAddressSearch() {\n      new daum.Postcode({\n        oncomplete: data => {\n          if (data.userSelectedType === \"R\" || data.userSelectedType === \"J\") {\n            // 우편번호와 주소 정보를 업데이트\n            this.updatedFields.zipcode = data.zonecode;\n            this.updatedFields.add1 = data.roadAddress || data.jibunAddress;\n            this.updatedFields.add2 = \"\"; // 상세주소 초기화\n            console.log(this.updatedFields);\n\n            // 상세주소 필드로 포커스 이동\n            document.getElementById(\"add2\").focus();\n          }\n        }\n      }).open();\n    },\n    cancelUpdate() {\n      // 수정 취소 시 원래 데이터로 초기화\n      this.updatedFields = {\n        ...this.originalData\n      };\n      this.message = \"\"; // 메시지 초기화\n      window.location.href = \"/mypage\";\n    },\n    openPasswordModal() {\n      this.passwordModal = true;\n    },\n    closePasswordModal() {\n      this.passwordModal = false;\n      this.newPassword = \"\";\n      this.confirmPassword = \"\";\n      this.isPasswordModalClosed = true;\n    },\n    checkNewPassword() {\n      const validatePassword = /^(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/;\n      if (this.newPassword === \"\") {\n        this.passwordValidationMessage = \"\";\n      } else if (!validatePassword.test(this.newPassword)) {\n        this.passwordValidationMessage = \"비밀번호는 최소 8자리 이상 영문, 숫자, 특수문자가 각각 1개 이상 포함되어야 합니다.\";\n      } else {\n        this.passwordValidationMessage = \"\";\n      }\n    },\n    async changePassword() {\n      console.log(\"?\");\n      if (this.newPassword === this.confirmPassword) {\n        try {\n          const email = localStorage.getItem(\"userID\");\n          const requestData = {\n            email: email,\n            updatedFields: {\n              password: this.newPassword\n            }\n          };\n          const response = await axios.post(\"/mypage/updateUserPw\", requestData);\n          this.message = response.data;\n          this.closePasswordModal();\n          alert(\"비밀번호가 변경되었습니다.\");\n\n          //this.originalData.password = this.newPassword;\n\n          // 모달을 닫는 함수 호출\n          //this.closePasswordModal();\n\n          // newPassword와 confirmPassword 초기화\n          this.newPassword = \"\";\n          this.confirmPassword = \"\";\n        } catch (error) {\n          console.error(\"비밀번호 변경 오류:\", error);\n        }\n      } else {\n        console.error(\"비밀번호가 일치하지 않습니다.\");\n      }\n    },\n    formatPhoneNumber() {\n      // 숫자 이외의 문자 제거\n      this.updatedFields.phone_num = this.updatedFields.phone_num.replace(/[^\\d-]/g, \"\");\n      // 하이픈(-) 삽입\n      if (this.updatedFields.phone_num.length > 2) {\n        this.updatedFields.phone_num = this.updatedFields.phone_num.replace(/^01([0|1|6|7|8|9])-?(\\d{4})-?(\\d{4})$/, \"01$1-$2-$3\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","myPageSide","gnbBar","components","data","originalData","updatedFields","message","passwordModal","newPassword","confirmPassword","passwordValidationMessage","passwordMatchMessage","isPasswordModalClosed","created","email","localStorage","getItem","fetchUserInfo","methods","convertAgeRange","age","response","get","params","userEmail","ageRange","console","log","error","updateUserInfo","alert","add1","add2","zipcode","phone_num","password","requestData","post","convertGender","genderCode","openAddressSearch","daum","Postcode","oncomplete","userSelectedType","zonecode","roadAddress","jibunAddress","document","getElementById","focus","open","cancelUpdate","window","location","href","openPasswordModal","closePasswordModal","checkNewPassword","validatePassword","test","changePassword","formatPhoneNumber","replace","length"],"sources":["C:\\Users\\Lim\\Desktop\\BOOK_0728\\MOONMOON\\vue_front\\src\\views\\mypageUserInfo.vue"],"sourcesContent":["<template>\r\n    <gnbBar />\r\n    <div class=\"mypage_menu\">\r\n        <myPageSide />\r\n    </div>\r\n    <div class=\"right_box\">\r\n        <h2 class=\"userUpdateTitle\">회원정보 관리</h2>\r\n        <hr class=\"section-divider\" />\r\n\r\n        <div class=\"input-group\">\r\n            <div class=\"input-item\">\r\n                <label for=\"email\">아이디</label>\r\n                <input type=\"text\" id=\"email\" v-model=\"originalData.email\" :readonly=\"true\" />\r\n            </div>\r\n            <div class=\"input-item\">\r\n                <label for=\"name\">이름</label>\r\n                <input type=\"text\" id=\"name\" v-model=\"originalData.name\" :readonly=\"true\" />\r\n            </div>\r\n\r\n            <div>\r\n                <div class=\"input-item\">\r\n                    <label for=\"password\">비밀번호</label>\r\n                    <input\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        :value=\"isPasswordModalClosed ? '*********' : originalData.password\"\r\n                        @click=\"openPasswordModal\"\r\n                    />\r\n                </div>\r\n\r\n                <!-- 모달 요소 -->\r\n                <div v-if=\"passwordModal\" class=\"password_modal\">\r\n                    <div class=\"pass_modal_content\">\r\n                        <h3>비밀번호 변경</h3>\r\n                        <div class=\"mypage_new_pw\">\r\n                            <label for=\"newPassword\">새 비밀번호</label>\r\n                            <input type=\"password\" id=\"newPassword\" v-model=\"newPassword\" @input=\"checkNewPassword\" />\r\n                            <span v-if=\"passwordValidationMessage\">{{ passwordValidationMessage }}</span>\r\n                        </div>\r\n                        <div class=\"mypage_new_pw\">\r\n                            <label for=\"confirmPassword\">비밀번호 확인</label>\r\n                            <input type=\"password\" id=\"confirmPassword\" v-model=\"confirmPassword\" />\r\n                            <span v-if=\"passwordMatchMessage\">{{ passwordMatchMessage }}</span>\r\n                        </div>\r\n                        <div class=\"button-group-center\">\r\n                            <button class=\"mypage_group_first\" @click=\"changePassword\">비밀번호 변경</button>\r\n                            <button @click=\"closePasswordModal\">취소</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"input-item\">\r\n                <label for=\"sex\">성별</label>\r\n                <input type=\"text\" id=\"sex\" :value=\"convertGender(originalData.sex)\" :readonly=\"true\" />\r\n            </div>\r\n            <div class=\"input-item\">\r\n                <label for=\"age\">나이대</label>\r\n                <input type=\"number\" id=\"age\" :value=\"convertAgeRange(originalData.age)\" :readonly=\"true\" />\r\n            </div>\r\n\r\n            <div class=\"input-item\">\r\n                <label for=\"add1\">주소</label>\r\n                <input type=\"text\" id=\"add1\" v-model=\"updatedFields.add1\" @click=\"openAddressSearch\" />\r\n            </div>\r\n            <div class=\"input-item\">\r\n                <label for=\"add2\">상세주소</label>\r\n                <input type=\"text\" id=\"add2\" v-model=\"updatedFields.add2\" />\r\n            </div>\r\n            <div class=\"input-item\">\r\n                <label for=\"zipcode\">우편번호</label>\r\n                <input type=\"text\" id=\"zipcode\" v-model=\"updatedFields.zipcode\" />\r\n            </div>\r\n\r\n            <div class=\"input-item\">\r\n                <label for=\"phone_num\">전화번호</label>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"phone_num\"\r\n                    v-model=\"updatedFields.phone_num\"\r\n                    @input=\"formatPhoneNumber(updatedFields.phone_num)\"\r\n                    maxlength=\"13\"\r\n                />\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"button_group\">\r\n            <button type=\"button\" @click=\"cancelUpdate\">취소</button>\r\n            <button type=\"button\" @click=\"updateUserInfo\">수정</button>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport axios from \"axios\";\r\nimport myPageSide from \"../components/myPageSide.vue\";\r\nimport gnbBar from \"@/components/gnbBar.vue\";\r\n\r\nexport default {\r\n    components: { myPageSide, gnbBar },\r\n    data() {\r\n        return {\r\n            originalData: {}, // 기존 데이터를 저장할 객체\r\n            updatedFields: {}, // 수정한 데이터를 저장할 객체\r\n            message: \"\",\r\n            passwordModal: false,\r\n            newPassword: \"\",\r\n            confirmPassword: \"\",\r\n            passwordValidationMessage: \"\",\r\n            passwordMatchMessage: \"\",\r\n            isPasswordModalClosed: false,\r\n        };\r\n    },\r\n    created() {\r\n        const email = localStorage.getItem(\"userID\");\r\n        this.fetchUserInfo(email); // 컴포넌트 생성 시 기존 데이터를 불러오는 메소드 호출\r\n    },\r\n    methods: {\r\n        convertAgeRange(age) {\r\n            if (age === \"14~19\" || age === \"14-19\") {\r\n                return \"10\";\r\n            } else if (age === \"20~29\" || age === \"20-29\") {\r\n                return \"20\";\r\n            } else if (age === \"30~39\" || age === \"30-39\") {\r\n                return \"30\";\r\n            } else if (age === \"40~49\" || age === \"40-49\") {\r\n                return \"40\";\r\n            } else if (age === \"50~59\" || age === \"50-59\") {\r\n                return \"50\";\r\n            } else {\r\n                return age;\r\n            }\r\n        },\r\n        async fetchUserInfo(email) {\r\n            try {\r\n                const response = await axios.get(\"mypage/getUserInfo\", {\r\n                    params: { userEmail: email },\r\n                });\r\n\r\n                this.originalData = {\r\n                    ...response.data,\r\n                    //age: response.data.age, // age 프로퍼티에 값을 할당\r\n                    ageRange: this.convertAgeRange(response.data.age), // 나이대 변환\r\n                };\r\n\r\n                this.updatedFields = { ...this.originalData }; // 수정할 정보를 updatedFields에 복사\r\n                console.log(this.updatedFields);\r\n            } catch (error) {\r\n                console.error(\"기존 회원정보 불러오기 오류:\", error);\r\n            }\r\n        },\r\n        async updateUserInfo() {\r\n            // console.log(\"!\");\r\n            const email = localStorage.getItem(\"userID\");\r\n            alert(\"수정이 완료되었습니다\");\r\n\r\n            // POST 요청을 보내기 위한 데이터 구성\r\n            const updatedFields = {\r\n                email: email,\r\n                updatedFields: {\r\n                    add1: this.updatedFields.add1,\r\n                    add2: this.updatedFields.add2,\r\n                    zipcode: this.updatedFields.zipcode,\r\n                    phone_num: this.updatedFields.phone_num,\r\n                    password: this.updatedFields.password,\r\n                },\r\n            };\r\n\r\n            const requestData = {\r\n                email: email,\r\n                updatedFields: updatedFields,\r\n            };\r\n\r\n            try {\r\n                const response = await axios.post(\"mypage/updateUserInfo\", requestData);\r\n                this.message = response.data.message;\r\n                this.fetchUserInfo(localStorage.getItem(\"userID\"));\r\n                // alert(\"수정되었습니다.\");\r\n            } catch (error) {\r\n                console.error(\"회원정보 수정 오류:\", error);\r\n                this.message = \"회원정보 수정에 실패했습니다.\";\r\n            }\r\n        },\r\n        convertGender(genderCode) {\r\n            if (genderCode === \"f\") {\r\n                return \"여자\";\r\n            } else if (genderCode === \"m\") {\r\n                return \"남자\";\r\n            }\r\n        },\r\n        openAddressSearch() {\r\n            new daum.Postcode({\r\n                oncomplete: (data) => {\r\n                    if (data.userSelectedType === \"R\" || data.userSelectedType === \"J\") {\r\n                        // 우편번호와 주소 정보를 업데이트\r\n                        this.updatedFields.zipcode = data.zonecode;\r\n                        this.updatedFields.add1 = data.roadAddress || data.jibunAddress;\r\n                        this.updatedFields.add2 = \"\"; // 상세주소 초기화\r\n                        console.log(this.updatedFields);\r\n\r\n                        // 상세주소 필드로 포커스 이동\r\n                        document.getElementById(\"add2\").focus();\r\n                    }\r\n                },\r\n            }).open();\r\n        },\r\n        cancelUpdate() {\r\n            // 수정 취소 시 원래 데이터로 초기화\r\n            this.updatedFields = { ...this.originalData };\r\n            this.message = \"\"; // 메시지 초기화\r\n            window.location.href = \"/mypage\";\r\n        },\r\n\r\n        openPasswordModal() {\r\n            this.passwordModal = true;\r\n        },\r\n        closePasswordModal() {\r\n            this.passwordModal = false;\r\n            this.newPassword = \"\";\r\n            this.confirmPassword = \"\";\r\n            this.isPasswordModalClosed = true;\r\n        },\r\n        checkNewPassword() {\r\n            const validatePassword = /^(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/;\r\n\r\n            if (this.newPassword === \"\") {\r\n                this.passwordValidationMessage = \"\";\r\n            } else if (!validatePassword.test(this.newPassword)) {\r\n                this.passwordValidationMessage = \"비밀번호는 최소 8자리 이상 영문, 숫자, 특수문자가 각각 1개 이상 포함되어야 합니다.\";\r\n            } else {\r\n                this.passwordValidationMessage = \"\";\r\n            }\r\n        },\r\n\r\n        async changePassword() {\r\n            console.log(\"?\");\r\n            if (this.newPassword === this.confirmPassword) {\r\n                try {\r\n                    const email = localStorage.getItem(\"userID\");\r\n\r\n                    const requestData = {\r\n                        email: email,\r\n                        updatedFields: {\r\n                            password: this.newPassword,\r\n                        },\r\n                    };\r\n\r\n                    const response = await axios.post(\"/mypage/updateUserPw\", requestData);\r\n                    this.message = response.data;\r\n\r\n                    this.closePasswordModal();\r\n\r\n                    alert(\"비밀번호가 변경되었습니다.\");\r\n\r\n                    //this.originalData.password = this.newPassword;\r\n\r\n                    // 모달을 닫는 함수 호출\r\n                    //this.closePasswordModal();\r\n\r\n                    // newPassword와 confirmPassword 초기화\r\n                    this.newPassword = \"\";\r\n                    this.confirmPassword = \"\";\r\n                } catch (error) {\r\n                    console.error(\"비밀번호 변경 오류:\", error);\r\n                }\r\n            } else {\r\n                console.error(\"비밀번호가 일치하지 않습니다.\");\r\n            }\r\n        },\r\n        formatPhoneNumber() {\r\n            // 숫자 이외의 문자 제거\r\n            this.updatedFields.phone_num = this.updatedFields.phone_num.replace(/[^\\d-]/g, \"\");\r\n            // 하이픈(-) 삽입\r\n            if (this.updatedFields.phone_num.length > 2) {\r\n                this.updatedFields.phone_num = this.updatedFields.phone_num.replace(/^01([0|1|6|7|8|9])-?(\\d{4})-?(\\d{4})$/, \"01$1-$2-$3\");\r\n            }\r\n        },\r\n    },\r\n};\r\n</script>\r\n<style scoped></style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}