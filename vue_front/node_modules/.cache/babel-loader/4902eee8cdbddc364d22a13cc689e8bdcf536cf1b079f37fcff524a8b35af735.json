{"ast":null,"code":"//   import gnbBar from \"../components/gnbBar.vue\";\n//   import Footer from '../components/footer.vue';\n\nimport axios from \"axios\";\naxios.defaults.baseURL = \"http://localhost:3000\";\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json;charset=utf-8\";\naxios.defaults.headers.post[\"Access-Control-Allow-Origin\"] = \"*\";\nexport default {\n  data() {\n    return {\n      email: \"\",\n      password: \"\",\n      passwordVisible: false,\n      passwordVisibleSrc: [require(\"../assets/img/visible.png\"), require(\"../assets/img/novisible.png\")],\n      passwordVisibleIndex: 0,\n      email_check: false,\n      password_check: false,\n      error_border_check: false,\n      allcheck: true,\n      allcheck1: true,\n      allcheck2: true\n    };\n  },\n  // components: { gnbBar, Footer },\n\n  watch: {\n    email: function () {\n      this.checkEmail();\n      this.inputAllCheck();\n    },\n    password: function () {\n      this.checkPassword();\n      this.inputAllCheck();\n    }\n  },\n  methods: {\n    passwordVisibleToggle() {\n      this.passwordVisibleIndex = (this.passwordVisibleIndex + 1) % this.passwordVisibleSrc.length;\n      if (!this.passwordVisible) {\n        this.$refs.passwordVisible.type = \"text\";\n        this.passwordVisible = true;\n      } else {\n        this.$refs.passwordVisible.type = \"password\";\n        this.passwordVisible = false;\n      }\n    },\n    checkEmail() {\n      // 이메일 형식 검사\n      const validateEmail = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\n      if (this.email === \"\" || !validateEmail.test(this.email) || !this.email) {\n        this.email_check = true;\n        this.error_border_check = true;\n        this.allcheck1 = true; //입력조건 안맞을시 true\n      } else {\n        this.email_check = false;\n        this.error_border_check = false;\n        this.allcheck1 = false;\n      }\n    },\n    checkPassword() {\n      // 최소 8자리 이상 영문 대소문자, 숫자, 특수문자가 각각 1개 이상\n      const validatePassword = /^(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{8,}$/;\n      if (this.password === \"\" || !validatePassword.test(this.password) || !this.password) {\n        this.password_check = true;\n        this.error_border_check = true;\n        this.allcheck2 = true;\n      } else {\n        this.password_check = false;\n        this.error_border_check = false;\n        this.allcheck2 = false;\n      }\n    },\n    inputAllCheck() {\n      if (this.allcheck1 || this.allcheck2) {\n        //하나라도 입력조건이 안맞을시\n        this.allcheck = true; //버튼 비활성\n      } else {\n        this.allcheck = false;\n      }\n    },\n    loginForm() {\n      //백엔드로 로그인정보 전달\n      axios({\n        url: \"http://localhost:3000/auth/login\",\n        method: \"POST\",\n        data: {\n          email: this.email,\n          password: this.password\n        }\n      }).then(res => {\n        if (res.data.code == 200) {\n          //로그인 성공시\n          localStorage.setItem(\"userID\", res.data.email);\n          localStorage.setItem(\"userNick\", res.data.nick);\n          localStorage.setItem(\"userProvider\", res.data.provider);\n          window.location.href = \"/\";\n        } else {\n          if (res.data.code == 204) {\n            //비밀번호 오류시\n            alert(res.data.error + \"\\n\" + res.data.message);\n            window.location.href = \"/login\";\n          } else if (res.data.code == 206) {\n            // 존재하지 않는 이메일 일때\n            alert(res.data.error + \"\\n\" + res.data.message);\n            window.location.href = \"/login\";\n          }\n        }\n      }).catch(err => {\n        alert(err);\n      });\n    },\n    kakaoLogin() {\n      window.Kakao.Auth.login({\n        scope: \"profile_nickname, profile_image, account_email, gender, age_range\",\n        success: this.getProfile\n      });\n    },\n    getProfile(autoObj) {\n      window.Kakao.API.request({\n        url: \"/v2/user/me\",\n        success: res => {\n          const kakao_account = res.kakao_account;\n          this.login(kakao_account);\n        }\n      });\n    },\n    async login(kakao_account) {\n      const email = kakao_account.email;\n      await axios({\n        url: \"http://localhost:3000/auth/kakaologin\",\n        method: \"POST\",\n        data: {\n          email: kakao_account.email,\n          name: kakao_account.profile.nickname,\n          sex: kakao_account.gender,\n          agegroup: kakao_account.age_range,\n          provider: \"kakao\"\n        }\n      }).then(async res => {\n        console.log(res.data.error.code);\n        if (res.data.error.code == 'ER_DUP_ENTRY') {\n          console.log('흠');\n        }\n        this.pullData(email);\n      });\n    },\n    pullData(email) {\n      axios({\n        url: \"http://localhost:3000/auth/kakaoData\",\n        method: \"POST\",\n        data: {\n          email: email\n        }\n      }).then(async res => {\n        localStorage.setItem(\"userID\", res.data.email);\n        localStorage.setItem(\"userNick\", res.data.nick);\n        localStorage.setItem(\"userProvider\", res.data.provider);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","defaults","baseURL","headers","post","data","email","password","passwordVisible","passwordVisibleSrc","require","passwordVisibleIndex","email_check","password_check","error_border_check","allcheck","allcheck1","allcheck2","watch","checkEmail","inputAllCheck","checkPassword","methods","passwordVisibleToggle","length","$refs","type","validateEmail","test","validatePassword","loginForm","url","method","then","res","code","localStorage","setItem","nick","provider","window","location","href","alert","error","message","catch","err","kakaoLogin","Kakao","Auth","login","scope","success","getProfile","autoObj","API","request","kakao_account","name","profile","nickname","sex","gender","agegroup","age_range","console","log","pullData"],"sources":["C:\\Users\\Lim\\Desktop\\BOOK_0728\\MOONMOON\\vue_front\\src\\views\\Login.vue"],"sourcesContent":["<style src=\"../assets/css/Login.css\"></style>\r\n\r\n<template>\r\n    <!-- <gnbBar /> -->\r\n    <div class=\"login\">\r\n        <div class=\"title-bar\">\r\n            <div class=\"login_header_logo\">\r\n                <a href=\"/\"><img src=\"../assets/img/logo.png\" alt=\"\"></a>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"login_wrap\">\r\n            <form class=\"loginform\" @submit.prevent=\"loginForm\">\r\n                <input v-model=\"email\" type=\"text\" id=\"username\" :class=\"{ error_border: error_border_check }\"\r\n                    placeholder=\"이메일\" />\r\n                <input ref=\"passwordVisible\" v-model=\"password\" type=\"password\" id=\"password\"\r\n                    :class=\"{ error_border: error_border_check }\" placeholder=\"비밀번호\" />\r\n                <img :src=\"passwordVisibleSrc[passwordVisibleIndex]\" class=\"password_visible\"\r\n                    @click=\"passwordVisibleToggle\" />\r\n\r\n                <p id=\"login_error\" v-if=\"email_check\">\r\n                <div class=\"circle\">\r\n                    <span>!</span>\r\n                </div>\r\n                이메일주소를 정확히 입력해주세요. 예)abcd@naver.com\r\n                </p>\r\n                <p id=\"login_error\" v-else-if=\"password_check\">\r\n                <div class=\"circle\">\r\n                    <span>!</span>\r\n                </div>\r\n                비밀번호를 정확히 입력해주세요.<br />\r\n                *8자리 이상 영문, 숫자, 특수문자가 각각 1개 이상\r\n                </p>\r\n                <div class=\"user_login_btns\">\r\n                    <a href=\"#\">\r\n                        <input @click=\"loginValidation\" class=\"login_submit\" type=\"submit\" id=\"login\" value=\"로그인\" /></a>\r\n                    <a class=\"join_btn\" href=\"/join\">회원가입</a>\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n        <div class=\"login_wrap2\">\r\n            <form method=\"post\">\r\n                <div class=\"user_social_btns\">\r\n                    <div class=\"user_social_btns_p\">\r\n                        <p>소셜로 간편하게 로그인하세요</p>\r\n                    </div>\r\n                    <a class=\"social_btn naver\" href=\"/naverlogin\"><img class=\"social_btn_naver\"\r\n                            src=\"../assets/img/naver.png\" alt=\"\"></a>\r\n                    <a class=\"social_btn kakao\" @click=\"kakaoLogin\"><img class=\"social_btn_kakao\"\r\n                            src=\"../assets/img/kakao.png\" alt=\"\"></a>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </div>\r\n    <!-- <Footer /> -->\r\n</template>\r\n  \r\n<script>\r\n//   import gnbBar from \"../components/gnbBar.vue\";\r\n//   import Footer from '../components/footer.vue';\r\n\r\nimport axios from \"axios\";\r\naxios.defaults.baseURL = \"http://localhost:3000\";\r\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json;charset=utf-8\";\r\naxios.defaults.headers.post[\"Access-Control-Allow-Origin\"] = \"*\";\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            email: \"\",\r\n            password: \"\",\r\n            passwordVisible: false,\r\n            passwordVisibleSrc: [\r\n                require(\"../assets/img/visible.png\"),\r\n                require(\"../assets/img/novisible.png\")\r\n            ],\r\n            passwordVisibleIndex: 0,\r\n\r\n            email_check: false,\r\n            password_check: false,\r\n            error_border_check: false,\r\n\r\n            allcheck: true,\r\n            allcheck1: true,\r\n            allcheck2: true,\r\n        };\r\n    },\r\n    // components: { gnbBar, Footer },\r\n\r\n    watch: {\r\n        email: function () {\r\n            this.checkEmail();\r\n            this.inputAllCheck();\r\n        },\r\n        password: function () {\r\n            this.checkPassword();\r\n            this.inputAllCheck();\r\n        },\r\n    },\r\n    methods: {\r\n        passwordVisibleToggle() {\r\n            this.passwordVisibleIndex = (this.passwordVisibleIndex + 1) % this.passwordVisibleSrc.length\r\n            if (!this.passwordVisible) {\r\n                this.$refs.passwordVisible.type = \"text\";\r\n                this.passwordVisible = true;\r\n            } else {\r\n                this.$refs.passwordVisible.type = \"password\";\r\n                this.passwordVisible = false;\r\n            }\r\n        },\r\n        checkEmail() {\r\n            // 이메일 형식 검사\r\n            const validateEmail =\r\n                /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\r\n\r\n            if (this.email === \"\" || !validateEmail.test(this.email) || !this.email) {\r\n                this.email_check = true;\r\n                this.error_border_check = true;\r\n                this.allcheck1 = true; //입력조건 안맞을시 true\r\n            } else {\r\n                this.email_check = false;\r\n                this.error_border_check = false;\r\n                this.allcheck1 = false;\r\n            }\r\n        },\r\n        checkPassword() {\r\n            // 최소 8자리 이상 영문 대소문자, 숫자, 특수문자가 각각 1개 이상\r\n            const validatePassword =\r\n            /^(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{8,}$/;\r\n\r\n            if (\r\n                this.password === \"\" ||\r\n                !validatePassword.test(this.password) ||\r\n                !this.password\r\n            ) {\r\n                this.password_check = true;\r\n                this.error_border_check = true;\r\n                this.allcheck2 = true;\r\n            } else {\r\n                this.password_check = false;\r\n                this.error_border_check = false;\r\n                this.allcheck2 = false;\r\n            }\r\n        },\r\n        inputAllCheck() {\r\n            if (this.allcheck1 || this.allcheck2) {\r\n                //하나라도 입력조건이 안맞을시\r\n                this.allcheck = true; //버튼 비활성\r\n            } else {\r\n                this.allcheck = false;\r\n            }\r\n        },\r\n        loginForm() {\r\n            //백엔드로 로그인정보 전달\r\n            axios({\r\n                url: \"http://localhost:3000/auth/login\",\r\n                method: \"POST\",\r\n                data: {\r\n                    email: this.email,\r\n                    password: this.password,\r\n                },\r\n            })\r\n                .then((res) => {\r\n                    if (res.data.code == 200) {\r\n                        //로그인 성공시\r\n                        localStorage.setItem(\"userID\", res.data.email);\r\n                        localStorage.setItem(\"userNick\", res.data.nick);\r\n                        localStorage.setItem(\"userProvider\", res.data.provider);\r\n\r\n                        window.location.href = \"/\";\r\n                    } else {\r\n                        if (res.data.code == 204) {\r\n                            //비밀번호 오류시\r\n                            alert(res.data.error + \"\\n\" + res.data.message);\r\n                            window.location.href = \"/login\";\r\n                        } else if (res.data.code == 206) {\r\n                            // 존재하지 않는 이메일 일때\r\n                            alert(res.data.error + \"\\n\" + res.data.message);\r\n                            window.location.href = \"/login\";\r\n                        }\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    alert(err);\r\n                });\r\n        },\r\n        kakaoLogin() {\r\n            window.Kakao.Auth.login({\r\n                scope:\r\n                    \"profile_nickname, profile_image, account_email, gender, age_range\",\r\n                success: this.getProfile,\r\n            });\r\n        },\r\n        getProfile(autoObj) {\r\n            window.Kakao.API.request({\r\n                url: \"/v2/user/me\",\r\n                success: (res) => {\r\n                    const kakao_account = res.kakao_account;\r\n                    this.login(kakao_account);\r\n                },\r\n            });\r\n        },\r\n        async login(kakao_account) {\r\n            const email = kakao_account.email;\r\n\r\n            await axios({\r\n                url: \"http://localhost:3000/auth/kakaologin\",\r\n                method: \"POST\",\r\n                data: {\r\n                    email: kakao_account.email,\r\n                    name: kakao_account.profile.nickname,\r\n                    sex: kakao_account.gender,\r\n                    agegroup: kakao_account.age_range,\r\n                    provider: \"kakao\",\r\n                },\r\n            }).then(async (res) => {\r\n                console.log(res.data.error.code);\r\n                if(res.data.error.code == 'ER_DUP_ENTRY') {\r\n                    console.log('흠')\r\n                }\r\n\r\n                this.pullData(email);\r\n            });\r\n        },\r\n        pullData(email) {\r\n            axios({\r\n                url: \"http://localhost:3000/auth/kakaoData\",\r\n                method: \"POST\",\r\n                data: {\r\n                    email: email,\r\n                },\r\n            }).then(async (res) => {\r\n                localStorage.setItem(\"userID\", res.data.email);\r\n                localStorage.setItem(\"userNick\", res.data.nick);\r\n                localStorage.setItem(\"userProvider\", res.data.provider);\r\n\r\n            });\r\n        },\r\n    },\r\n};\r\n</script>\r\n  \r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}