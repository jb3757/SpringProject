{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, withModifiers as _withModifiers, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelSelect as _vModelSelect, createCommentVNode as _createCommentVNode, createStaticVNode as _createStaticVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-4f448fb5\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"input_book_title\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"검색\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"book_info\"\n};\nconst _hoisted_4 = [\"src\"];\nconst _hoisted_5 = {\n  key: 0,\n  class: \"book_selection\"\n};\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"selectedBook\"\n}, \"Select a book:\", -1 /* HOISTED */));\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"default\"\n}, \"-----------------------\", -1 /* HOISTED */));\nconst _hoisted_8 = [\"value\"];\nconst _hoisted_9 = {\n  class: \"addinput\"\n};\nconst _hoisted_10 = /*#__PURE__*/_createStaticVNode(\"<br data-v-4f448fb5><input type=\\\"text\\\" id=\\\"sample4_roadAddress\\\" placeholder=\\\"도로명주소\\\" data-v-4f448fb5><input type=\\\"text\\\" id=\\\"sample4_jibunAddress\\\" placeholder=\\\"지번주소\\\" data-v-4f448fb5><span id=\\\"guide\\\" style=\\\"color:#999;display:none;\\\" data-v-4f448fb5></span><input type=\\\"text\\\" id=\\\"sample4_detailAddress\\\" placeholder=\\\"상세주소\\\" data-v-4f448fb5><input type=\\\"text\\\" id=\\\"sample4_extraAddress\\\" placeholder=\\\"참고항목\\\" data-v-4f448fb5><br data-v-4f448fb5>\", 7);\nconst _hoisted_17 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"form\", {\n    class: \"book_title_form\",\n    onSubmit: _cache[1] || (_cache[1] = _withModifiers((...args) => $options.book_research && $options.book_research(...args), [\"prevent\"]))\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    class: \"book_title\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.bookname = $event),\n    placeholder: \"Enter book name\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.bookname]]), _hoisted_2], 32 /* HYDRATE_EVENTS */)]), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"img\", {\n    src: $data.book_image,\n    class: \"book_image\"\n  }, null, 8 /* PROPS */, _hoisted_4), _createElementVNode(\"h6\", null, \"책 이름: \" + _toDisplayString($data.bookname2), 1 /* TEXT */), _createElementVNode(\"h6\", null, \"작가: \" + _toDisplayString($data.book_author), 1 /* TEXT */), _createElementVNode(\"h6\", null, \"가격: \" + _toDisplayString($data.book_price), 1 /* TEXT */), _createElementVNode(\"h6\", null, \"카테고리: \" + _toDisplayString($data.book_category), 1 /* TEXT */)]), $data.bookResults.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_hoisted_6, _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.selectedBook = $event),\n    onChange: _cache[3] || (_cache[3] = (...args) => $options.onBookSelectionChange && $options.onBookSelectionChange(...args))\n  }, [_hoisted_7, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.bookResults, (book, index) => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: index,\n      value: index\n    }, _toDisplayString(book.title), 9 /* TEXT, PROPS */, _hoisted_8);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelSelect, $data.selectedBook]])])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", null, [_createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.requestPay && $options.requestPay(...args))\n  }, \"결제하기\")]), _createElementVNode(\"span\", _hoisted_9, _toDisplayString($data.num), 1 /* TEXT */), _createElementVNode(\"input\", {\n    type: \"button\",\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.sample4_execDaumPostcode && $options.sample4_execDaumPostcode(...args)),\n    value: \"우편번호 찾기\"\n  }), _hoisted_10, _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = (...args) => $options.startEventWithTimeLimit && $options.startEventWithTimeLimit(...args))\n  }, \"안녕\"), $data.timeLeft > 0 ? (_openBlock(), _createElementBlock(\"p\", _hoisted_17, \"Time left: \" + _toDisplayString($options.formatTime($data.timeLeft)), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementVNode","type","for","value","_hoisted_1","onSubmit","_cache","_withModifiers","args","$options","book_research","$data","bookname","$event","placeholder","_hoisted_2","_hoisted_3","src","book_image","_toDisplayString","bookname2","book_author","book_price","book_category","bookResults","length","_createElementBlock","_hoisted_5","_hoisted_6","selectedBook","onChange","onBookSelectionChange","_hoisted_7","_Fragment","_renderList","book","index","key","title","_hoisted_8","onClick","requestPay","_hoisted_9","num","sample4_execDaumPostcode","_hoisted_10","startEventWithTimeLimit","timeLeft","_hoisted_17","formatTime"],"sources":["C:\\Users\\Lim\\Desktop\\BOOK_0728\\MOONMOON\\vue_front\\src\\views\\bookTest.vue"],"sourcesContent":["<template>\r\n  <div class=\"input_book_title\">\r\n    <form class=\"book_title_form\" @submit.prevent=\"book_research\">\r\n      <input\r\n        type=\"text\"\r\n        class=\"book_title\"\r\n        v-model=\"bookname\"\r\n        placeholder=\"Enter book name\"\r\n      />\r\n      <button type=\"submit\">검색</button>\r\n    </form>\r\n  </div>\r\n  <div class=\"book_info\">\r\n    <img :src=\"book_image\" class=\"book_image\" />\r\n    <h6>책 이름: {{ bookname2 }}</h6>\r\n    <h6>작가: {{ book_author }}</h6>\r\n    <h6>가격: {{ book_price }}</h6>\r\n    <h6>카테고리: {{ book_category }}</h6>\r\n  </div>\r\n\r\n  <div v-if=\"bookResults.length > 0\" class=\"book_selection\">\r\n    <label for=\"selectedBook\">Select a book:</label>\r\n    <select v-model=\"selectedBook\" @change=\"onBookSelectionChange\">\r\n      <option value=\"default\">-----------------------</option>\r\n      <option v-for=\"(book, index) in bookResults\" :key=\"index\" :value=\"index\">\r\n        {{ book.title }}\r\n      </option>\r\n    </select>\r\n  </div>\r\n  <div>\r\n    <button @click=\"requestPay\">결제하기</button>\r\n  </div>\r\n\r\n  <span class=\"addinput\">{{ num }}</span>\r\n  <input\r\n    type=\"button\"\r\n    @click=\"sample4_execDaumPostcode\"\r\n    value=\"우편번호 찾기\"\r\n  /><br />\r\n  <input type=\"text\" id=\"sample4_roadAddress\" placeholder=\"도로명주소\" />\r\n  <input type=\"text\" id=\"sample4_jibunAddress\" placeholder=\"지번주소\" />\r\n  <span id=\"guide\" style=\"color: #999; display: none\"></span>\r\n  <input type=\"text\" id=\"sample4_detailAddress\" placeholder=\"상세주소\" />\r\n  <input type=\"text\" id=\"sample4_extraAddress\" placeholder=\"참고항목\" />\r\n  <br />\r\n  <button @click=\"startEventWithTimeLimit\">안녕</button>\r\n  <p v-if=\"timeLeft > 0\">Time left: {{ formatTime(timeLeft) }}</p>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      num: \"test\",\r\n      showMessage: false,\r\n      timeLimit: 3, // 5분 =  5 * 60\r\n      timeLeft: 0,\r\n\r\n      bookname: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      provider: \"\",\r\n      bookname2: \"\",\r\n      book_image: \"\",\r\n      book_author: \"\",\r\n      book_price: \"\",\r\n      book_category: \"\",\r\n      zipinput: false,\r\n      bookResults: [],\r\n      naverResults: [],\r\n      selectedBook: null,\r\n      selected: \"radio1\",\r\n      options: [\r\n        { text: \"Radio 1\", value: \"radio1\" },\r\n        { text: \"Radio 3\", value: \"radio2\" },\r\n        { text: \"Radio 3 (disabled)\", value: \"radio3\", disabled: true },\r\n        { text: \"Radio 4\", value: \"radio4\" },\r\n      ],\r\n    };\r\n  },\r\n  methods: {\r\n    book_research() {\r\n      //검색 시 입력창에 있는 걸로 알라딘 api 검색 실시합니다.\r\n      axios({\r\n        url: \"/getAladin\",\r\n        method: \"POST\",\r\n        data: {\r\n          bookname: this.bookname, //서버으로 넘깁니다.\r\n        },\r\n      })\r\n        .then((res) => {\r\n          let aladinXml = res.data; //서버에서 json으로 검색 결과를 넘긴걸 변수에 넣습니다.\r\n          console.log(aladinXml.object.item);\r\n          if (aladinXml.object.item) {\r\n            //검색 결과가 있으면\r\n            this.bookResults = aladinXml.object.item.map((item) => ({\r\n              //배열에 넣어줍니다.\r\n              title: item.title._text,\r\n              image: item.cover._text,\r\n              author: item.author._text,\r\n              price: item.priceStandard._text,\r\n              category: item.categoryName._text,\r\n              isbn: item.isbn13._text,\r\n              itemID: item._attributes.itemId,\r\n            }));\r\n            this.selectedBook = \"defautl\"; //이건 왜 안될까요?\r\n          } else {\r\n            //검색결과가 없으면 선택창 작동안하게 합니다.\r\n            this.bookResults = [];\r\n            this.selectedBook = \"defautl\";\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          //에러처리\r\n          console.log(err);\r\n        });\r\n    },\r\n    startEventWithTimeLimit() {\r\n      if (this.timeLeft > 0) {\r\n        //시간이 남아있으면 버튼의 이벤트 비활성화\r\n        return;\r\n      }\r\n      this.timeLeft = this.timeLimit; //이건 왜 있는거지?\r\n      this.updateTimeDisplay(); // updateTimeDisplay() 실행\r\n    },\r\n    updateTimeDisplay() {\r\n      var time = setInterval(() => {\r\n        if (this.timeLeft > 0) {\r\n          this.timeLeft--; // 1초마다 시간을 깎는 중\r\n        } else {\r\n          //시간이 끝났을경우 뭘 할까?\r\n          alert(\"!!!!!\");\r\n          clearInterval(time);\r\n        }\r\n      }, 1000); // 1초마다 실행되도록 setInterval 설정\r\n    },\r\n    formatTime(seconds) {\r\n      const minutes = Math.floor(seconds / 60);\r\n      const remainingSeconds = seconds % 60;\r\n      return `${minutes}:${remainingSeconds.toString().padStart(2, \"0\")}`;\r\n    },\r\n    onBookSelectionChange() {\r\n      //select창에서 선택을 하게 되면 이 메소드가 실행됩니다.\r\n      if (this.selectedBook === \"default\") {\r\n        return;\r\n      }\r\n\r\n      if (this.selectedBook !== null) {\r\n        const selectedBookData = this.bookResults[this.selectedBook]; //배열에서 select에서 선택한걸로 index를 받습니다.\r\n        this.bookname2 = selectedBookData.title;\r\n        this.book_author = selectedBookData.author;\r\n        this.book_price = selectedBookData.price;\r\n        this.book_category = selectedBookData.category;\r\n\r\n        if (selectedBookData.itemID) {\r\n          //itemID을 이용하여 알라딘 api를 사용하여 책 이미지를 받습니다.\r\n          axios({\r\n            url: \"/downBookImage\",\r\n            method: \"POST\",\r\n            data: {\r\n              isbn: selectedBookData.isbn,\r\n              itemID: selectedBookData.itemID, //select로 선택한 것의 itemID을 서버로 넘깁니다. itemID는 알라딘의 고유 상품 번호입니다.\r\n            },\r\n          })\r\n            .then((res) => {\r\n              const aladinData = res.data;\r\n              console.log(aladinData.item); //서버에서 처리후 이미지 url을 받습니다.\r\n              this.book_image = aladinData.item[0].cover; //알라딘은 왤캐 이미지 해상도를 거지같이 주는거지\r\n            })\r\n            .catch((err) => {\r\n              alert(\"없을 수가 있나?\"); //네이버에서 isbn으로 검색했을때 없는 경우가 잇을까요?\r\n            });\r\n        } else {\r\n          alert(\"이 에러가 왜나?\"); //책 세트면 에러가 납니다..\r\n        }\r\n      }\r\n    },\r\n    requestPay() {\r\n      const IMP = window.IMP;\r\n      IMP.init(\"imp18828153\");\r\n\r\n      IMP.request_pay(\r\n        {\r\n          // param\r\n          pg: \"inicis\",\r\n          pay_method: \"card\",\r\n          name: \"테스트\",\r\n          amount: 1,\r\n          buyer_email: \"gildong@gmail.com\",\r\n          buyer_name: \"홍길동\",\r\n          buyer_tel: \"010-4242-4242\",\r\n          buyer_addr: \"서울특별시 강남구 신사동\",\r\n          buyer_postcode: \"01181\",\r\n        },\r\n        (rsp) => {\r\n          // callback\r\n          if (rsp.success) {\r\n            alert(\"!\");\r\n            console.log(rsp.success);\r\n            console.log(rsp);\r\n          } else {\r\n            alert(\"?\");\r\n          }\r\n        }\r\n      );\r\n    },\r\n    sample4_execDaumPostcode() {\r\n      new window.daum.Postcode({\r\n        oncomplete: (data) => {\r\n          // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\r\n\r\n          // 도로명 주소의 노출 규칙에 따라 주소를 표시한다.\r\n          // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\r\n          var roadAddr = data.roadAddress; // 도로명 주소 변수\r\n          var extraRoadAddr = \"\"; // 참고 항목 변수\r\n\r\n          // 법정동명이 있을 경우 추가한다. (법정리는 제외)\r\n          // 법정동의 경우 마지막 문자가 \"동/로/가\"로 끝난다.\r\n          if (data.bname !== \"\" && /[동|로|가]$/g.test(data.bname)) {\r\n            extraRoadAddr += data.bname;\r\n          }\r\n          // 건물명이 있고, 공동주택일 경우 추가한다.\r\n          if (data.buildingName !== \"\" && data.apartment === \"Y\") {\r\n            extraRoadAddr +=\r\n              extraRoadAddr !== \"\"\r\n                ? \", \" + data.buildingName\r\n                : data.buildingName;\r\n          }\r\n          // 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.\r\n          if (extraRoadAddr !== \"\") {\r\n            extraRoadAddr = \" (\" + extraRoadAddr + \")\";\r\n          }\r\n\r\n          // 우편번호와 주소 정보를 해당 필드에 넣는다.\r\n          this.num = data.zonecode;\r\n          document.getElementById(\"sample4_roadAddress\").value = roadAddr;\r\n          document.getElementById(\"sample4_jibunAddress\").value =\r\n            data.jibunAddress;\r\n\r\n          this.zipinput = true;\r\n        },\r\n      }).open();\r\n    },\r\n    test() {\r\n      axios({\r\n        url: \"/test\",\r\n        method: \"POST\",\r\n        data: this.num,\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.input_book_title {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.book_title_form {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.book_title {\r\n  flex: 1;\r\n  padding: 8px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n\r\nbutton {\r\n  padding: 8px 16px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  margin-left: 8px;\r\n}\r\n\r\n.book_info {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.book_image {\r\n  height: auto;\r\n  width: auto;\r\n  display: block;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.book_description {\r\n  font-size: 14px;\r\n  color: #666;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.book_selection {\r\n  margin-bottom: 20px;\r\n}\r\n\r\nlabel {\r\n  font-weight: bold;\r\n  margin-right: 8px;\r\n}\r\n\r\nselect {\r\n  padding: 8px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}