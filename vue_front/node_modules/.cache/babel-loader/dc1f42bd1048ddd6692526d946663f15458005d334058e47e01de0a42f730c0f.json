{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, vModelSelect as _vModelSelect, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-bc2128c8\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"input_book_title\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"검색\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"book_info\"\n};\nconst _hoisted_4 = [\"src\"];\nconst _hoisted_5 = {\n  key: 1\n};\nconst _hoisted_6 = {\n  key: 0,\n  class: \"book_selection\"\n};\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"selectedBook\"\n}, \"Select a book:\", -1 /* HOISTED */));\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"default\"\n}, \"-----------------------\", -1 /* HOISTED */));\nconst _hoisted_9 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"form\", {\n    class: \"book_title_form\",\n    onSubmit: _cache[1] || (_cache[1] = _withModifiers((...args) => $options.book_research && $options.book_research(...args), [\"prevent\"]))\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    class: \"book_title\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.bookname = $event),\n    placeholder: \"Enter book name\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.bookname]]), _hoisted_2], 32 /* HYDRATE_EVENTS */)]), _createElementVNode(\"div\", _hoisted_3, [$data.book_image ? (_openBlock(), _createElementBlock(\"img\", {\n    key: 0,\n    src: $data.book_image,\n    class: \"book_image\"\n  }, null, 8 /* PROPS */, _hoisted_4)) : (_openBlock(), _createElementBlock(\"p\", _hoisted_5, \"이미지없음\")), _createElementVNode(\"p\", null, \"이미지 제공 api: \" + _toDisplayString($data.book_provider), 1 /* TEXT */), _createElementVNode(\"h6\", null, \"책 이름: \" + _toDisplayString($data.book_title), 1 /* TEXT */), _createElementVNode(\"h6\", null, \"작가: \" + _toDisplayString($data.book_author), 1 /* TEXT */), _createElementVNode(\"h6\", null, \"정가: \" + _toDisplayString($data.book_pricestandard), 1 /* TEXT */), _createElementVNode(\"h6\", null, \"세일가: \" + _toDisplayString($data.book_pricesales), 1 /* TEXT */), _createElementVNode(\"h6\", null, \"카테고리: \" + _toDisplayString($data.book_categoryname), 1 /* TEXT */), _createElementVNode(\"h6\", null, \"포인트: \" + _toDisplayString($data.book_point), 1 /* TEXT */), _createElementVNode(\"h6\", null, \"출판사: \" + _toDisplayString($data.book_publisher), 1 /* TEXT */), _createElementVNode(\"h6\", null, \"출판일: \" + _toDisplayString($data.book_pubdate), 1 /* TEXT */), _createElementVNode(\"button\", {\n    type: \"button\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.insertBookInfo && $options.insertBookInfo(...args))\n  }, \"db 삽입\")]), $data.bookResults.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_hoisted_7, _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.selectedBook = $event),\n    onChange: _cache[4] || (_cache[4] = (...args) => $options.onBookSelectionChange && $options.onBookSelectionChange(...args))\n  }, [_hoisted_8, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.bookResults, (book, index) => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: index,\n      value: index\n    }, _toDisplayString(book.title), 9 /* TEXT, PROPS */, _hoisted_9);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelSelect, $data.selectedBook]])])) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementVNode","type","for","value","_hoisted_1","onSubmit","_cache","_withModifiers","args","$options","book_research","$data","bookname","$event","placeholder","_hoisted_2","_hoisted_3","book_image","_createElementBlock","src","_hoisted_5","_toDisplayString","book_provider","book_title","book_author","book_pricestandard","book_pricesales","book_categoryname","book_point","book_publisher","book_pubdate","onClick","insertBookInfo","bookResults","length","_hoisted_6","_hoisted_7","selectedBook","onChange","onBookSelectionChange","_hoisted_8","_Fragment","_renderList","book","index","key","title","_hoisted_9"],"sources":["C:\\Users\\Lim\\Desktop\\BOOK_0728\\MOONMOON\\vue_front\\src\\views\\bookInsert.vue"],"sourcesContent":["<template>\r\n  <div class=\"input_book_title\">\r\n    <form class=\"book_title_form\" @submit.prevent=\"book_research\">\r\n      <input\r\n        type=\"text\"\r\n        class=\"book_title\"\r\n        v-model=\"bookname\"\r\n        placeholder=\"Enter book name\"\r\n      />\r\n      <button type=\"submit\">검색</button>\r\n    </form>\r\n  </div>\r\n  <div class=\"book_info\">\r\n    <img v-if=\"book_image\" :src=\"book_image\" class=\"book_image\" />\r\n    <p v-else>이미지없음</p>\r\n    <p>이미지 제공 api: {{ book_provider }}</p>\r\n    <h6>책 이름: {{ book_title }}</h6>\r\n    <h6>작가: {{ book_author }}</h6>\r\n    <h6>정가: {{ book_pricestandard }}</h6>\r\n    <h6>세일가: {{ book_pricesales }}</h6>\r\n    <h6>카테고리: {{ book_categoryname }}</h6>\r\n    <h6>포인트: {{ book_point }}</h6>\r\n    <h6>출판사: {{ book_publisher }}</h6>\r\n    <h6>출판일: {{ book_pubdate }}</h6>\r\n    <button type=\"button\" @click=\"insertBookInfo\">db 삽입</button>\r\n  </div>\r\n\r\n  <div v-if=\"bookResults.length > 0\" class=\"book_selection\">\r\n    <label for=\"selectedBook\">Select a book:</label>\r\n    <select v-model=\"selectedBook\" @change=\"onBookSelectionChange\">\r\n      <option value=\"default\">-----------------------</option>\r\n      <option v-for=\"(book, index) in bookResults\" :key=\"index\" :value=\"index\">\r\n        {{ book.title }}\r\n      </option>\r\n    </select>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\naxios.defaults.baseURL = \"http://localhost:3000\";\r\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json;charset=utf-8\";\r\naxios.defaults.headers.post[\"Access-Control-Allow-Origin\"] = \"*\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      bookname: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      provider: \"\",\r\n      book_title: \"\",\r\n      book_cover: \"\",\r\n      book_author: \"\",\r\n      book_pubdate: \"\",\r\n      book_pricesales: \"\",\r\n      book_pricestandard: \"\",\r\n      book_categoryname: \"\",\r\n      book_point: \"\",\r\n      book_publisher: \"\",\r\n      bookResults: [],\r\n      naverResults: [],\r\n      selectedBook: null,\r\n      book_provider: \"\",\r\n      book_image: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    book_research() {\r\n      //검색 시 입력창에 있는 걸로 알라딘 api 검색 실시합니다.\r\n      axios({\r\n        url: \"/aladin/getInfo\",\r\n        method: \"POST\",\r\n        data: {\r\n          bookname: this.bookname, //서버으로 넘깁니다.\r\n        },\r\n      })\r\n        .then((res) => {\r\n          let aladinXml = [];\r\n          aladinXml = res.data; //서버에서 json으로 검색 결과를 넘긴걸 변수에 넣습니다.\r\n          //   console.log(aladinXml.object.totalResults._text);\r\n          //   console.log(aladinXml.object.item.title._text);\r\n          if (aladinXml.object.totalResults._text == 0) {\r\n            alert(\"검색결과가 없습니다.\");\r\n            this.bookResults = [];\r\n            this.selectedBook = \"default\";\r\n            return;\r\n          }\r\n\r\n          if (aladinXml.object.item.length == undefined) {\r\n            this.bookResults.push({\r\n              title: aladinXml.object.item.title._text,\r\n              image: aladinXml.object.item.cover._text,\r\n              author: aladinXml.object.item.author._text,\r\n              priceStandard: aladinXml.object.item.priceStandard._text,\r\n              category: aladinXml.object.item.categoryName._text,\r\n              isbn: aladinXml.object.item.isbn13._text,\r\n              itemID: aladinXml.object.item._attributes.itemId,\r\n              priceSales: aladinXml.object.item.priceSales._text,\r\n              pubDate: aladinXml.object.item.pubDate._text,\r\n              point: aladinXml.object.item.mileage._text,\r\n              publisher: aladinXml.object.item.publisher._text,\r\n            });\r\n          } else {\r\n            if (aladinXml.object.item) {\r\n              //검색 결과가 있으면\r\n              this.bookResults = aladinXml.object.item.map((item) => ({\r\n                //배열에 넣어줍니다.\r\n                title: item.title._text,\r\n                image: item.cover._text,\r\n                author: item.author._text,\r\n                priceStandard: item.priceStandard._text,\r\n                category: item.categoryName._text,\r\n                isbn: item.isbn13._text,\r\n                itemID: item._attributes.itemId,\r\n                priceSales: item.priceSales._text,\r\n                pubDate: item.pubDate._text,\r\n                point: item.mileage._text,\r\n                publisher: item.publisher._text,\r\n              }));\r\n              this.selectedBook = \"default\"; //이건 왜 안될까요?\r\n            } else {\r\n              //검색결과가 없으면 선택창 작동안하게 합니다.\r\n              this.bookResults = [];\r\n              this.selectedBook = \"default\";\r\n            }\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          //에러처리\r\n          console.log(err);\r\n        });\r\n    },\r\n    onBookSelectionChange() {\r\n      //select창에서 선택을 하게 되면 이 메소드가 실행됩니다.\r\n      if (this.selectedBook === \"default\") {\r\n        return;\r\n      }\r\n\r\n      if (this.selectedBook !== null) {\r\n        const selectedBookData = this.bookResults[this.selectedBook]; //배열에서 select에서 선택한걸로 index를 받습니다.\r\n        this.book_title = selectedBookData.title;\r\n        this.book_author = selectedBookData.author;\r\n        this.book_pricestandard = selectedBookData.priceStandard;\r\n        this.book_categoryname = selectedBookData.category;\r\n        this.book_pubdate = selectedBookData;\r\n        this.book_pricesales = selectedBookData.priceSales;\r\n        this.book_pubdate = selectedBookData.pubDate;\r\n        this.book_point = selectedBookData.point;\r\n        this.book_publisher = selectedBookData.publisher;\r\n        if (selectedBookData.itemID) {\r\n          //itemID을 이용하여 알라딘 api를 사용하여 책 이미지를 받습니다.\r\n          axios({\r\n            url: \"aladin/naverBookImage\",\r\n            method: \"POST\",\r\n            data: {\r\n              isbn: selectedBookData.isbn,\r\n              itemID: selectedBookData.itemID, //select로 선택한 것의 itemID을 서버로 넘깁니다. itemID는 알라딘의 고유 상품 번호입니다.\r\n            },\r\n          })\r\n            .then((res) => {\r\n              const aladinData = res.data;\r\n              this.book_image = aladinData; //알라딘은 왤캐 이미지 해상도를 거지같이 주는거지\r\n              this.book_provider = \"naver\";\r\n            })\r\n            .catch((err) => {\r\n              axios({\r\n                url: \"aladin/aladinBookImage\",\r\n                method: \"POST\",\r\n                data: {\r\n                  itemID: selectedBookData.itemID,\r\n                },\r\n              })\r\n                .then((res) => {\r\n                  const aladinData = res.data;\r\n                  this.book_image = aladinData.item[0].cover;\r\n                  this.book_provider = \"aladin\";\r\n                })\r\n                .catch((err) => {\r\n                  alert(err);\r\n                });\r\n            });\r\n        } else {\r\n          alert(\"이 에러가 왜나?\"); //책 세트면 에러가 납니다..\r\n        }\r\n      }\r\n    },\r\n    insertBookInfo() {\r\n      if (!this.book_title) {\r\n        alert(\"책을 선택하세요\");\r\n        return;\r\n      }\r\n      axios.post({\r\n        url: \"/aladin/insertInfo\",\r\n        method: \"POST\",\r\n        data: {\r\n          book_title: this.book_title,\r\n          book_cover: this.book_image,\r\n        },\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.input_book_title {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.book_title_form {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.book_title {\r\n  flex: 1;\r\n  padding: 8px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n\r\nbutton {\r\n  padding: 8px 16px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  margin-left: 8px;\r\n}\r\n\r\n.book_info {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.book_image {\r\n  max-height: 300px;\r\n  width: auto;\r\n  display: block;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.book_selection {\r\n  margin-bottom: 20px;\r\n}\r\n\r\nlabel {\r\n  font-weight: bold;\r\n  margin-right: 8px;\r\n}\r\n\r\nselect {\r\n  padding: 8px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n</style>\r\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAkB;gEAQzBC,mBAAA,CAAiC;EAAzBC,IAAI,EAAC;AAAQ,GAAC,IAAE;;EAGvBF,KAAK,EAAC;AAAW;;;;;;;EAeaA,KAAK,EAAC;;gEACvCC,mBAAA,CAAgD;EAAzCE,GAAG,EAAC;AAAc,GAAC,gBAAc;gEAEtCF,mBAAA,CAAwD;EAAhDG,KAAK,EAAC;AAAS,GAAC,yBAAuB;;;6DA7BnDH,mBAAA,CAUM,OAVNI,UAUM,GATJJ,mBAAA,CAQO;IARDD,KAAK,EAAC,iBAAiB;IAAEM,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAAAC,cAAA,KAAAC,IAAA,KAAUC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;sBAC1DR,mBAAA,CAKE;IAJAC,IAAI,EAAC,MAAM;IACXF,KAAK,EAAC,YAAY;+DACTY,KAAA,CAAAC,QAAQ,GAAAC,MAAA;IACjBC,WAAW,EAAC;iDADHH,KAAA,CAAAC,QAAQ,E,GAGnBG,UAAiC,C,8BAGrCf,mBAAA,CAaM,OAbNgB,UAaM,GAZOL,KAAA,CAAAM,UAAU,I,cAArBC,mBAAA,CAA8D;;IAAtCC,GAAG,EAAER,KAAA,CAAAM,UAAU;IAAElB,KAAK,EAAC;wDAC/CmB,mBAAA,CAAmB,KAAAE,UAAA,EAAT,OAAK,IACfpB,mBAAA,CAAsC,WAAnC,cAAY,GAAAqB,gBAAA,CAAGV,KAAA,CAAAW,aAAa,kBAC/BtB,mBAAA,CAA+B,YAA3B,QAAM,GAAAqB,gBAAA,CAAGV,KAAA,CAAAY,UAAU,kBACvBvB,mBAAA,CAA8B,YAA1B,MAAI,GAAAqB,gBAAA,CAAGV,KAAA,CAAAa,WAAW,kBACtBxB,mBAAA,CAAqC,YAAjC,MAAI,GAAAqB,gBAAA,CAAGV,KAAA,CAAAc,kBAAkB,kBAC7BzB,mBAAA,CAAmC,YAA/B,OAAK,GAAAqB,gBAAA,CAAGV,KAAA,CAAAe,eAAe,kBAC3B1B,mBAAA,CAAsC,YAAlC,QAAM,GAAAqB,gBAAA,CAAGV,KAAA,CAAAgB,iBAAiB,kBAC9B3B,mBAAA,CAA8B,YAA1B,OAAK,GAAAqB,gBAAA,CAAGV,KAAA,CAAAiB,UAAU,kBACtB5B,mBAAA,CAAkC,YAA9B,OAAK,GAAAqB,gBAAA,CAAGV,KAAA,CAAAkB,cAAc,kBAC1B7B,mBAAA,CAAgC,YAA5B,OAAK,GAAAqB,gBAAA,CAAGV,KAAA,CAAAmB,YAAY,kBACxB9B,mBAAA,CAA4D;IAApDC,IAAI,EAAC,QAAQ;IAAE8B,OAAK,EAAAzB,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAEC,QAAA,CAAAuB,cAAA,IAAAvB,QAAA,CAAAuB,cAAA,IAAAxB,IAAA,CAAc;KAAE,OAAK,E,GAG1CG,KAAA,CAAAsB,WAAW,CAACC,MAAM,Q,cAA7BhB,mBAAA,CAQM,OARNiB,UAQM,GAPJC,UAAgD,E,gBAChDpC,mBAAA,CAKS;+DALQW,KAAA,CAAA0B,YAAY,GAAAxB,MAAA;IAAGyB,QAAM,EAAAhC,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAEC,QAAA,CAAA8B,qBAAA,IAAA9B,QAAA,CAAA8B,qBAAA,IAAA/B,IAAA,CAAqB;MAC3DgC,UAAwD,G,kBACxDtB,mBAAA,CAESuB,SAAA,QAAAC,WAAA,CAFuB/B,KAAA,CAAAsB,WAAW,GAA3BU,IAAI,EAAEC,KAAK;yBAA3B1B,mBAAA,CAES;MAFqC2B,GAAG,EAAED,KAAK;MAAGzC,KAAK,EAAEyC;wBAC7DD,IAAI,CAACG,KAAK,wBAAAC,UAAA;2FAHApC,KAAA,CAAA0B,YAAY,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}