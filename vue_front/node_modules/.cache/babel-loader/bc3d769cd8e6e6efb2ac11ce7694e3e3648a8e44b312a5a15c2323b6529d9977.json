{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, vModelRadio as _vModelRadio, openBlock as _openBlock, createElementBlock as _createElementBlock, withDirectives as _withDirectives, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = [\"id\", \"value\", \"disabled\"];\nconst _hoisted_2 = [\"for\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" id는 label의 for값과 연결 됨 \"), _createCommentVNode(\" v-model과 value값이 연결 됨 \"), _createCommentVNode(\" radio 타입으로 클릭하면 v-model에 값이 반영됨 \"), _withDirectives((_openBlock(), _createElementBlock(\"input\", {\n    id: `star${_ctx.idx}`,\n    key: _ctx.idx,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedStarNum = $event),\n    type: \"radio\",\n    value: _ctx.idx,\n    disabled: $data.isRegistered\n  }, null, 8 /* PROPS */, _hoisted_1)), [[_vModelRadio, $data.selectedStarNum]]), (_openBlock(), _createElementBlock(\"label\", {\n    key: _ctx.idx,\n    for: `star${_ctx.idx}`,\n    onTouchmove: _cache[1] || (_cache[1] = (...args) => $options.$_onTouchMove && $options.$_onTouchMove(...args))\n  }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_2))], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createCommentVNode","_createElementBlock","id","_ctx","idx","key","$data","selectedStarNum","$event","type","value","disabled","isRegistered","for","onTouchmove","_cache","args","$options","$_onTouchMove"],"sources":["C:\\Users\\Lim\\Desktop\\BOOK_0728\\MOONMOON\\vue_front\\src\\views\\test.vue"],"sourcesContent":["<template v-for=\"idx in 5\">\r\n  <!-- id는 label의 for값과 연결 됨 -->\r\n  <!-- v-model과 value값이 연결 됨 -->\r\n  <!-- radio 타입으로 클릭하면 v-model에 값이 반영됨 -->\r\n  <input\r\n    :id=\"`star${idx}`\"\r\n    :key=\"idx\"\r\n    v-model=\"selectedStarNum\"\r\n    type=\"radio\"\r\n    :value=\"idx\"\r\n    :disabled=\"isRegistered\"\r\n  />\r\n  <label :key=\"idx\" :for=\"`star${idx}`\" @touchmove=\"$_onTouchMove\"> </label>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      selectedStarNum: 0, // 별점,\r\n      starLeftOffsetXs: [], // 드래그를 위한 위치 좌표값\r\n      isRegistered: false, // 등록이 완료 되었는지 여부\r\n    };\r\n  },\r\n\r\n  mounted() {\r\n    this.$_initStarOffsets();\r\n  },\r\n\r\n  methods: {\r\n    $_setStarNum(num) {\r\n      this.selectedStarNum = num;\r\n    },\r\n    // 드래그 기능을 위한 이벤트 감지\r\n    $_onTouchMove(e) {\r\n      if (this.isRegistered) {\r\n        return;\r\n      }\r\n      const touchEndPosX = e.changedTouches[0].pageX;\r\n      const starNum = this.$_getTouchEndStar(touchEndPosX);\r\n      this.$_setStarNum(starNum);\r\n    },\r\n    // 각 별들의 위치를 저장\r\n    $_initStarOffsets() {\r\n      [1, 2, 3, 4, 5].forEach((idx) => {\r\n        const leftOffset = document.getElementById(`star${idx}`).offsetLeft;\r\n        this.starLeftOffsetXs.push(leftOffset);\r\n      });\r\n    },\r\n    // param - 사용자의 마지막 터치지점\r\n    $_getTouchEndStar(posX) {\r\n      this.starLeftOffsetXs.entries();\r\n      /* const array1 = ['a', 'b', 'c'];\r\n           array1.entries() => [0, \"a\"] [1, \"b\"] [2, \"c\"] */\r\n      for (const [idx, offsetX] of offsetArr) {\r\n        if (posX < offsetX) {\r\n          return idx;\r\n        }\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";;;;6DACEA,mBAAA,2BAA8B,EAC9BA,mBAAA,2BAA8B,EAC9BA,mBAAA,qCAAwC,E,+BACxCC,mBAAA,CAOE;IANCC,EAAE,SAASC,IAAA,CAAAC,GAAG;IACdC,GAAG,EAAEF,IAAA,CAAAC,GAAG;+DACAE,KAAA,CAAAC,eAAe,GAAAC,MAAA;IACxBC,IAAI,EAAC,OAAO;IACXC,KAAK,EAAEP,IAAA,CAAAC,GAAG;IACVO,QAAQ,EAAEL,KAAA,CAAAM;wDAHFN,KAAA,CAAAC,eAAe,E,kBAK1BN,mBAAA,CAA0E;IAAlEI,GAAG,EAAEF,IAAA,CAAAC,GAAG;IAAGS,GAAG,SAASV,IAAA,CAAAC,GAAG;IAAKU,WAAS,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}