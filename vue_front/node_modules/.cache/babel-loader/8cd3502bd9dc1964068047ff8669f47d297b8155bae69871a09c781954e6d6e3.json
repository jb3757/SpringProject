{"ast":null,"code":"import axios from \"axios\";\nimport myPageSide from \"../components/myPageSide.vue\";\nexport default {\n  components: {\n    myPageSide\n  },\n  data() {\n    return {\n      originalData: {},\n      // 기존 데이터를 저장할 객체\n      updateData: {},\n      // 수정한 데이터를 저장할 객체\n      message: \"\"\n    };\n  },\n  created() {\n    const email = localStorage.getItem(\"userID\");\n    this.fetchUserInfo(email); // 컴포넌트 생성 시 기존 데이터를 불러오는 메소드 호출\n  },\n\n  methods: {\n    convertAgeRange(age) {\n      if (age === \"14~19\" || \"14-19\") {\n        return \"10\";\n      } else if (age === \"20~29\" || \"20-29\") {\n        return \"20\";\n      } else if (age === \"30~39\" || \"30-39\") {\n        return \"30\";\n      } else if (age === \"40~49\" || \"40-49\") {\n        return \"40\";\n      } else if (age === \"50~59\") {\n        return \"50\";\n      } else {\n        return age;\n      }\n    },\n    async fetchUserInfo(email) {\n      try {\n        const response = await axios.get(\"mypage/getUserInfo\", {\n          params: {\n            userEmail: email\n          }\n        });\n        this.originalData = {\n          ...response.data,\n          //age: response.data.age, // age 프로퍼티에 값을 할당\n          ageRange: this.convertAgeRange(response.data.age) // 나이대 변환\n        };\n\n        this.updatedFields = {\n          ...this.originalData\n        }; // 수정할 정보를 updatedFields에 복사\n      } catch (error) {\n        console.error(\"기존 회원정보 불러오기 오류:\", error);\n      }\n    },\n    async updateUserInfo() {\n      const email = localStorage.getItem(\"userID\");\n\n      // POST 요청을 보내기 위한 데이터 구성\n      const requestData = {\n        email: email,\n        updatedFields: {\n          add1: this.updatedFields.add1,\n          add2: this.updatedFields.add2,\n          zipcode: this.updatedFields.zipcode,\n          phone_num: this.updatedFields.phone_num,\n          password: this.updatedFields.password\n        }\n      };\n      try {\n        const response = await axios.post(\"mypage/updateUserInfo\", requestData);\n        this.message = response.data.message;\n      } catch (error) {\n        console.error(\"회원정보 수정 오류:\", error);\n        this.message = \"회원정보 수정에 실패했습니다.\";\n      }\n    },\n    convertGender(genderCode) {\n      if (genderCode === \"f\") {\n        return \"여자\";\n      } else if (genderCode === \"m\") {\n        return \"남자\";\n      }\n    },\n    openAddressSearch() {\n      new daum.Postcode({\n        oncomplete: data => {\n          if (data.userSelectedType === \"R\" || data.userSelectedType === \"J\") {\n            // 우편번호와 주소 정보를 업데이트\n            this.updatedFields.zipcode = data.zonecode;\n            this.updatedFields.add1 = data.roadAddress || data.jibunAddress;\n            this.updatedFields.add2 = \"\"; // 상세주소 초기화\n\n            // 상세주소 필드로 포커스 이동\n            document.getElementById(\"add2\").focus();\n          }\n        }\n      }).open();\n    },\n    cancelUpdate() {\n      // 수정 취소 시 원래 데이터로 초기화\n      this.updatedFields = {\n        ...this.originalData\n      };\n      this.message = \"\"; // 메시지 초기화\n    }\n  }\n};","map":{"version":3,"names":["axios","myPageSide","components","data","originalData","updateData","message","created","email","localStorage","getItem","fetchUserInfo","methods","convertAgeRange","age","response","get","params","userEmail","ageRange","updatedFields","error","console","updateUserInfo","requestData","add1","add2","zipcode","phone_num","password","post","convertGender","genderCode","openAddressSearch","daum","Postcode","oncomplete","userSelectedType","zonecode","roadAddress","jibunAddress","document","getElementById","focus","open","cancelUpdate"],"sources":["C:\\Users\\Lim\\Desktop\\BOOK_0728\\MOONMOON\\vue_front\\src\\views\\mypageUserInfo.vue"],"sourcesContent":["<template>\r\n    <div class=\"mypage_menu\">\r\n        <myPageSide />\r\n    </div>\r\n    <div class=\"right_box\">\r\n        <h2 class=\"userUpdateTitle\">회원정보 관리</h2>\r\n        <hr class=\"section-divider\" />\r\n\r\n        <form @submit.prevent=\"updateUserInfo\">\r\n            <div class=\"input-group\">\r\n                <div class=\"input-item\">\r\n                    <label for=\"email\">아이디</label>\r\n                    <input type=\"text\" id=\"email\" v-model=\"originalData.email\" :readonly=\"true\" />\r\n                </div>\r\n                <div class=\"input-item\">\r\n                    <label for=\"name\">이름</label>\r\n                    <input type=\"text\" id=\"name\" v-model=\"originalData.name\" :readonly=\"true\" />\r\n                </div>\r\n\r\n                <div class=\"input-item\">\r\n                    <label for=\"password\">비밀번호</label>\r\n                    <input type=\"password\" id=\"password\" v-model=\"originalData.password\" />\r\n                </div>\r\n                <div class=\"input-item\">\r\n                    <label for=\"sex\">성별</label>\r\n                    <input type=\"text\" id=\"sex\" :value=\"convertGender(originalData.sex)\" :readonly=\"true\" />\r\n                </div>\r\n                <div class=\"input-item\">\r\n                    <label for=\"age\">나이대</label>\r\n                    <input type=\"number\" id=\"age\" :value=\"convertAgeRange(originalData.age)\" :readonly=\"true\" />\r\n                </div>\r\n                <div class=\"input-item\">\r\n                    <label for=\"add1\">주소</label>\r\n                    <input type=\"text\" id=\"add1\" v-model=\"originalData.add1\" @click=\"openAddressSearch\" />\r\n                </div>\r\n                <div class=\"input-item\">\r\n                    <label for=\"add2\">상세주소</label>\r\n                    <input type=\"text\" id=\"add2\" v-model=\"originalData.add2\" />\r\n                </div>\r\n                <div class=\"input-item\">\r\n                    <label for=\"zipcode\">우편번호</label>\r\n                    <input type=\"text\" id=\"zipcode\" v-model=\"originalData.zipcode\" />\r\n                </div>\r\n                <div class=\"input-item\">\r\n                    <label for=\"phone_num\">전화번호</label>\r\n                    <input type=\"text\" id=\"phone_num\" v-model=\"originalData.phone_num\" />\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"button-group\">\r\n                <button type=\"button\" @click=\"cancelUpdate\">취소</button>\r\n                <button type=\"submit\">수정</button>\r\n            </div>\r\n        </form>\r\n        <div v-if=\"message\" class=\"status-message\">{{ message }}</div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport axios from \"axios\";\r\nimport myPageSide from \"../components/myPageSide.vue\";\r\n\r\nexport default {\r\n    components: { myPageSide },\r\n    data() {\r\n        return {\r\n            originalData: {}, // 기존 데이터를 저장할 객체\r\n            updateData: {}, // 수정한 데이터를 저장할 객체\r\n            message: \"\",\r\n        };\r\n    },\r\n    created() {\r\n        const email = localStorage.getItem(\"userID\");\r\n        this.fetchUserInfo(email); // 컴포넌트 생성 시 기존 데이터를 불러오는 메소드 호출\r\n    },\r\n    methods: {\r\n        convertAgeRange(age) {\r\n            if (age === \"14~19\" || \"14-19\") {\r\n                return \"10\";\r\n            } else if (age === \"20~29\" || \"20-29\") {\r\n                return \"20\";\r\n            } else if (age === \"30~39\" || \"30-39\") {\r\n                return \"30\";\r\n            } else if (age === \"40~49\" || \"40-49\") {\r\n                return \"40\";\r\n            } else if (age === \"50~59\") {\r\n                return \"50\";\r\n            } else {\r\n                return age;\r\n            }\r\n        },\r\n        async fetchUserInfo(email) {\r\n            try {\r\n                const response = await axios.get(\"mypage/getUserInfo\", {\r\n                    params: { userEmail: email },\r\n                });\r\n\r\n                this.originalData = {\r\n                    ...response.data,\r\n                    //age: response.data.age, // age 프로퍼티에 값을 할당\r\n                    ageRange: this.convertAgeRange(response.data.age), // 나이대 변환\r\n                };\r\n\r\n                this.updatedFields = { ...this.originalData }; // 수정할 정보를 updatedFields에 복사\r\n            } catch (error) {\r\n                console.error(\"기존 회원정보 불러오기 오류:\", error);\r\n            }\r\n        },\r\n        async updateUserInfo() {\r\n            const email = localStorage.getItem(\"userID\");\r\n\r\n            // POST 요청을 보내기 위한 데이터 구성\r\n            const requestData = {\r\n                email: email,\r\n                updatedFields: {\r\n                    add1: this.updatedFields.add1,\r\n                    add2: this.updatedFields.add2,\r\n                    zipcode: this.updatedFields.zipcode,\r\n                    phone_num: this.updatedFields.phone_num,\r\n                    password: this.updatedFields.password,\r\n                },\r\n            };\r\n\r\n            try {\r\n                const response = await axios.post(\"mypage/updateUserInfo\", requestData);\r\n                this.message = response.data.message;\r\n            } catch (error) {\r\n                console.error(\"회원정보 수정 오류:\", error);\r\n                this.message = \"회원정보 수정에 실패했습니다.\";\r\n            }\r\n        },\r\n        convertGender(genderCode) {\r\n            if (genderCode === \"f\") {\r\n                return \"여자\";\r\n            } else if (genderCode === \"m\") {\r\n                return \"남자\";\r\n            }\r\n        },\r\n        openAddressSearch() {\r\n            new daum.Postcode({\r\n                oncomplete: (data) => {\r\n                    if (data.userSelectedType === \"R\" || data.userSelectedType === \"J\") {\r\n                        // 우편번호와 주소 정보를 업데이트\r\n                        this.updatedFields.zipcode = data.zonecode;\r\n                        this.updatedFields.add1 = data.roadAddress || data.jibunAddress;\r\n                        this.updatedFields.add2 = \"\"; // 상세주소 초기화\r\n\r\n                        // 상세주소 필드로 포커스 이동\r\n                        document.getElementById(\"add2\").focus();\r\n                    }\r\n                },\r\n            }).open();\r\n        },\r\n        cancelUpdate() {\r\n            // 수정 취소 시 원래 데이터로 초기화\r\n            this.updatedFields = { ...this.originalData };\r\n            this.message = \"\"; // 메시지 초기화\r\n        },\r\n    },\r\n};\r\n</script>\r\n<style scoped>\r\n.userUpdateTitle {\r\n    font-weight: bold;\r\n    font-size: 30px;\r\n}\r\n/* ... 기존 스타일 ... */\r\n\r\n.input-group {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    gap: 15px;\r\n}\r\n\r\n.input-item {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: 10px;\r\n}\r\n.input-item label {\r\n    display: inline-block;\r\n    width: 120px; /* 레이블의 너비 조정 */\r\n    text-align: left;\r\n}\r\n.input-item input {\r\n    flex: 1; /* 입력 필드 너비 조정 */\r\n    padding: 8px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    font-size: 14px;\r\n    width: 100px; /* 너비를 2/5로 조절 */\r\n    /* readonly 상태일 때의 배경색과 글자색 설정 */\r\n    background-color: #f5f5f5; /* 배경색 */\r\n    color: #999; /* 글자색 */\r\n    pointer-events: none;\r\n}\r\n.input-item input:not([readonly]) {\r\n    /* readonly가 아닌 input에는 배경색과 글자색을 설정하지 않음 */\r\n    background-color: white;\r\n    color: black;\r\n    pointer-events: auto;\r\n}\r\n.button-group {\r\n    display: flex;\r\n    justify-content: center;\r\n    margin-top: 20px;\r\n    gap: 20px;\r\n}\r\n\r\n.button-group button {\r\n    padding: 5px 10px; /* 버튼의 내부 여백을 조절하여 크기를 조정 */\r\n    font-size: 16px; /* 버튼의 폰트 크기를 조정 */\r\n}\r\n\r\n.status-message {\r\n    margin-top: 10px;\r\n    font-weight: bold;\r\n}\r\n.section-divider {\r\n    margin-top: 40px;\r\n    margin-bottom: 40px;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}