{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport GnbBar from \"../components/gnbBar.vue\";\nimport Floating from \"../components/floating.vue\";\nimport StarIcon from \"../components/star.vue\"; // 별점 아이콘 컴포넌트의 경로를 수정해주세요.\nimport ScrollTop from \"@/components/scrollTop.vue\";\nimport axios from \"axios\";\naxios.defaults.baseURL = \"http://localhost:3000\";\naxios.defaults.headers.post[\"Contents-Type\"] = \"application/json;charset=utf-8\";\naxios.defaults.headers.post[\"Access-Control-Allow-Origin\"] = \"*\";\nexport default {\n  name: \"\",\n  components: {\n    GnbBar,\n    StarIcon,\n    Floating,\n    ScrollTop\n  },\n  data() {\n    return {\n      bestListData: [],\n      reviewScore: [],\n      // 리뷰 점수를 얻어온다고 가정\n      email: \"\",\n      bookId: \"\",\n      //좋아요 여부\n      isLiked: false,\n      likeBook: [],\n      // 페이징\n      perPage: 10,\n      //한 페이지에 보여줄 게시물 수\n      currentPage: 1,\n      // 현재 페이지 번호\n      totalPages: 1,\n      // 총 페이지 수\n      maxDisplayedPages: 9,\n      // 표시할 최대 페이지 수 (현재 페이지를 중심으로 좌우로 표시)\n\n      nextDay: 0,\n      month: 0\n    };\n  },\n  setup() {},\n  created() {\n    this.email = localStorage.getItem(\"userID\");\n    this.getLikeBook();\n    this.getBestList();\n    this.getNextDate();\n  },\n  mounted() {},\n  unmounted() {},\n  computed: {\n    totalPages() {\n      // 전체 페이지 수 계산\n      this.totalPages = Math.ceil(this.bestListData.length / this.perPage);\n      return Math.ceil(this.bestListData.length / this.perPage);\n    },\n    pageNumbers() {\n      const start = Math.max(1, this.currentPage - Math.floor(this.maxDisplayedPages / 2));\n      const end = Math.min(this.totalPages, start + this.maxDisplayedPages - 1);\n      return Array.from({\n        length: end - start + 1\n      }, (_, i) => start + i);\n    }\n  },\n  methods: {\n    changePage(pageNumber) {\n      if (pageNumber === \"first\") {\n        // 맨 앞 페이지로 이동\n        pageNumber = 1;\n      } else if (pageNumber === \"last\") {\n        // 맨 뒤 페이지로 이동\n        pageNumber = this.totalPages;\n      } else {\n        pageNumber = parseInt(pageNumber); // 페이지 번호로 변환\n      }\n\n      window.scrollTo({\n        top: 0,\n        behavior: \"auto\"\n      });\n      if (pageNumber >= 1 && pageNumber <= this.totalPages) {\n        this.currentPage = pageNumber;\n        // 페이지 변경 시 추가 로직 수행\n        // 예: API 호출하여 해당 페이지 데이터 가져오기\n        // displayedPosts 업데이트\n        this.displayedPosts = this.bestListData.slice((this.currentPage - 1) * this.perPage, this.currentPage * this.perPage);\n      }\n    },\n    async getBestList() {\n      await axios({\n        url: \"http://localhost:3000/booklist/getBest\",\n        method: \"POST\",\n        data: {}\n      }).then(res => {\n        if (localStorage.getItem(\"userID\")) {\n          this.bestListData = res.data.map(book => {\n            return {\n              ...book,\n              isLiked: this.likeBook.includes(book.BOOK_ID) // 해당 책의 BOOK_ID가 likeBook 배열에 포함되어 있는지 확인하여 isLiked 값을 설정\n            };\n          });\n\n          for (var i in res.data) {\n            //별이 5개이므로 총점10점을 2로 나눔\n            this.reviewScore.push(res.data[i].reviewpoint / 2);\n          }\n        } else {\n          this.bestListData = res.data.map(book => {\n            return {\n              ...book,\n              isLiked: false // 해당 책의 BOOK_ID가 likeBook 배열에 포함되어 있는지 확인하여 isLiked 값을 설정\n            };\n          });\n\n          for (var i in res.data) {\n            this.bestListData.push(res.data[i]);\n            //별이 5개이므로 총점10점을 2로 나눔\n            this.reviewScore.push(res.data[i].reviewpoint / 2);\n          }\n        }\n        console.log(this.bestListData);\n        // displayedPosts에 categoryData 데이터 복사\n        this.displayedPosts = this.bestListData.slice((this.currentPage - 1) * this.perPage, this.currentPage * this.perPage);\n      }).catch(err => {\n        alert(err);\n      });\n    },\n    //회원이 좋아요한 책 ID 가져오기\n    async getLikeBook() {\n      await axios({\n        url: \"http://localhost:3000/bookList/checkLikeList\",\n        method: \"POST\",\n        data: {\n          email: this.email\n        }\n      }).then(res => {\n        this.likeBook = res.data;\n      });\n    },\n    async likeToggle(bookId) {\n      if (localStorage.getItem(\"userID\")) {\n        this.bookId = bookId;\n        await axios({\n          url: \"http://localhost:3000/detail/likeOrDislike\",\n          method: \"POST\",\n          data: {\n            email: this.email,\n            bookId: this.bookId\n          }\n        }).then(res => {\n          console.log(res.data, \"좋아요 추가삭제\");\n          this.getLikeBook();\n          this.getBestList();\n        });\n      } else {\n        const conResult = confirm(\"로그인이 필요합니다. \\n 로그인 하시겠습니까?\");\n        conResult ? window.location.href = \"/login\" : null;\n      }\n    },\n    //입력된 숫자를 주어진 범위에 따라 적절한 별점으로 변환\n    convertRatingToHalfStars(number) {\n      if (Number.isInteger(number)) {\n        if (number >= 1 && number <= 5) {\n          return number;\n        } else {\n          return 0; // 범위를 벗어나는 경우\n        }\n      } else {\n        const integerPart = Math.floor(number);\n        const decimalPart = number - integerPart;\n        if (decimalPart < 0.5) {\n          return integerPart;\n        } else {\n          return integerPart + 0.5;\n        }\n      }\n    },\n    formatReviewScore(number) {\n      if (Number.isInteger(number)) {\n        return number.toFixed(1); // 정수인 경우 소수점 자리를 1로 설정하여 변환\n      } else {\n        return number.toString(); // 소수인 경우 그대로 문자열로 변환\n      }\n    },\n\n    formatNumber(number) {\n      // 숫자를 천 단위마다 쉼표가 있는 형식으로 변환\n      return new Intl.NumberFormat().format(number);\n    },\n    //장바구니에 추가\n    async addToCart(bookId) {\n      if (localStorage.getItem(\"userID\")) {\n        this.bookId = bookId;\n        await axios({\n          url: \"http://localhost:3000/detail/gotoCart\",\n          method: \"POST\",\n          data: {\n            email: this.email,\n            bookId: this.bookId\n          }\n        }).then(res => {\n          alert(\"장바구니에 추가되었습니다.\");\n          this.$refs.childComponent.getCartNum();\n        });\n      } else {\n        const conResult = confirm(\"로그인이 필요합니다. \\n 로그인 하시겠습니까?\");\n        conResult ? window.location.href = \"/login\" : null;\n      }\n    },\n    // 결제하기 버튼 클릭시 서버로 보낼 데이터\n    async goToPay(bookId, bookPrice) {\n      const totalPoint = bookPrice * 0.05;\n      const bookfee = bookPrice >= 50000 ? 0 : 2500;\n      await axios({\n        url: \"http://localhost:3000/detail/gotoPay\",\n        method: \"POST\",\n        data: {\n          bookId: bookId,\n          bookNum: 1,\n          email: this.email,\n          total_pay: bookPrice,\n          total_point: totalPoint,\n          fee: bookfee\n        }\n      }).then(res => {\n        console.log(res.data.payID);\n        this.$router.push({\n          name: \"paymentPage\",\n          query: {\n            payid: res.data.payID\n          }\n        });\n      }).catch(error => {\n        console.error(\"Error goToPay :\", error);\n      });\n    },\n    getNextDate() {\n      //내일 배송일로 나오게 하는 함수\n      const today = new Date();\n      this.nextDay = today.getDate() + 1;\n      this.month = today.getMonth() + 1;\n    }\n  }\n};","map":{"version":3,"names":["GnbBar","Floating","StarIcon","ScrollTop","axios","defaults","baseURL","headers","post","name","components","data","bestListData","reviewScore","email","bookId","isLiked","likeBook","perPage","currentPage","totalPages","maxDisplayedPages","nextDay","month","setup","created","localStorage","getItem","getLikeBook","getBestList","getNextDate","mounted","unmounted","computed","Math","ceil","length","pageNumbers","start","max","floor","end","min","Array","from","_","i","methods","changePage","pageNumber","parseInt","window","scrollTo","top","behavior","displayedPosts","slice","url","method","then","res","map","book","includes","BOOK_ID","push","reviewpoint","console","log","catch","err","alert","likeToggle","conResult","confirm","location","href","convertRatingToHalfStars","number","Number","isInteger","integerPart","decimalPart","formatReviewScore","toFixed","toString","formatNumber","Intl","NumberFormat","format","addToCart","$refs","childComponent","getCartNum","goToPay","bookPrice","totalPoint","bookfee","bookNum","total_pay","total_point","fee","payID","$router","query","payid","error","today","Date","getDate","getMonth"],"sources":["C:\\Users\\Lim\\Desktop\\BOOK_0728\\MOONMOON\\vue_front\\src\\views\\bestList.vue"],"sourcesContent":["<style src=\"../assets/css/bestList.css\"></style>\r\n\r\n<template>\r\n    <GnbBar ref=\"childComponent\" />\r\n    <div class=\"best\">\r\n        <div class=\"best_header\">\r\n            <h2>BEST</h2>\r\n        </div>\r\n        <div class=\"best_items\">\r\n            <div v-for=\"(item, i) in displayedPosts\" :key=\"i\" class=\"best_item\">\r\n                <div class=\"best_item_img\">\r\n                    <a :href=\"`/detail/${item.BOOK_ID}`\"><img :src=\"item.BOOK_COVER\" alt=\"\" /></a>\r\n                </div>\r\n                <div class=\"best_item_info\">\r\n                    <h2 class=\"best_item_info_title\">\r\n                        <a :href=\"`/detail/${item.BOOK_ID}`\">{{ item.BOOK_TITLE }}</a>\r\n                    </h2>\r\n                    <span class=\"best_item_info_author\">{{ item.BOOK_AUTHOR }} | {{ item.BOOK_PUBDATE }}</span>\r\n                    <div class=\"best_item_info_price\">\r\n                        <span>{{ formatNumber(item.BOOK_PRICE) }}</span>\r\n                        <span>원</span>\r\n                    </div>\r\n                    <p class=\"best_item_info_summary\">\r\n                        {{ item.BOOK_DESCRIPTION }}\r\n                    </p>\r\n                    <div class=\"best_item_info_star\">\r\n                        <span v-if=\"item.reviewpoint == 0\" class=\"best_item_info_star_num\">0.0</span>\r\n                        <span v-else class=\"best_item_info_star_num\">{{ formatReviewScore(item.reviewpoint) }}</span>\r\n                        <StarIcon :rating=\"convertRatingToHalfStars(reviewScore[i])\" />\r\n                    </div>\r\n                </div>\r\n                <div class=\"best_item_order\">\r\n                    <a @click=\"goToPay(item.BOOK_ID, item.BOOK_PRICE)\" href=\"#\">결제하러 가기</a>\r\n                    <p><span>내일({{month}}/{{nextDay}})</span> 도착예정</p>\r\n                </div>\r\n                <div class=\"best_item_btn\">\r\n                    <img v-if=\"item.isLiked == true\" @click=\"likeToggle(item.BOOK_ID)\" src=\"../assets/img/heartFill.png\" alt=\"Heart Filled\" />\r\n                    <img v-else-if=\"item.isLiked == false\" @click=\"likeToggle(item.BOOK_ID)\" src=\"../assets/img/heart.png\" alt=\"Heart\" />\r\n                    <img @click=\"addToCart(item.BOOK_ID)\" src=\"../assets/img/cart2.png\" alt=\"\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"booklist_paging\">\r\n            <button @click=\"changePage('first')\" :disabled=\"currentPage === 1\">맨앞</button>\r\n            <button @click=\"changePage(currentPage - 1)\" :disabled=\"currentPage === 1\">이전</button>\r\n            <button\r\n                v-for=\"pageNumber in pageNumbers\"\r\n                :key=\"pageNumber\"\r\n                @click=\"changePage(pageNumber)\"\r\n                :class=\"{ active: pageNumber === currentPage }\"\r\n            >\r\n                {{ pageNumber }}\r\n            </button>\r\n            <button @click=\"changePage(currentPage + 1)\" :disabled=\"currentPage === totalPages\">다음</button>\r\n            <button @click=\"changePage('last')\" :disabled=\"currentPage === totalPages\">맨뒤</button>\r\n        </div>\r\n        <!-- 플로팅-->\r\n        <Floating />\r\n        <!-- 스크롤 TOP -->\r\n        <ScrollTop />\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport GnbBar from \"../components/gnbBar.vue\";\r\nimport Floating from \"../components/floating.vue\";\r\nimport StarIcon from \"../components/star.vue\"; // 별점 아이콘 컴포넌트의 경로를 수정해주세요.\r\nimport ScrollTop from \"@/components/scrollTop.vue\";\r\n\r\nimport axios from \"axios\";\r\naxios.defaults.baseURL = \"http://localhost:3000\";\r\naxios.defaults.headers.post[\"Contents-Type\"] = \"application/json;charset=utf-8\";\r\naxios.defaults.headers.post[\"Access-Control-Allow-Origin\"] = \"*\";\r\n\r\nexport default {\r\n    name: \"\",\r\n    components: { GnbBar, StarIcon, Floating, ScrollTop },\r\n    data() {\r\n        return {\r\n            bestListData: [],\r\n            reviewScore: [], // 리뷰 점수를 얻어온다고 가정\r\n            email: \"\",\r\n            bookId: \"\",\r\n\r\n            //좋아요 여부\r\n            isLiked: false,\r\n            likeBook: [],\r\n\r\n            // 페이징\r\n            perPage: 10, //한 페이지에 보여줄 게시물 수\r\n            currentPage: 1, // 현재 페이지 번호\r\n            totalPages: 1, // 총 페이지 수\r\n            maxDisplayedPages: 9, // 표시할 최대 페이지 수 (현재 페이지를 중심으로 좌우로 표시)\r\n\r\n            nextDay: 0,\r\n            month: 0\r\n        };\r\n    },\r\n\r\n    setup() {},\r\n    created() {\r\n        this.email = localStorage.getItem(\"userID\");\r\n        this.getLikeBook();\r\n        this.getBestList();\r\n        this.getNextDate();\r\n    },\r\n    mounted() {},\r\n    unmounted() {},\r\n    computed: {\r\n        totalPages() {\r\n            // 전체 페이지 수 계산\r\n            this.totalPages = Math.ceil(this.bestListData.length / this.perPage);\r\n            return Math.ceil(this.bestListData.length / this.perPage);\r\n        },\r\n        pageNumbers() {\r\n            const start = Math.max(1, this.currentPage - Math.floor(this.maxDisplayedPages / 2));\r\n            const end = Math.min(this.totalPages, start + this.maxDisplayedPages - 1);\r\n            return Array.from({ length: end - start + 1 }, (_, i) => start + i);\r\n        },\r\n    },\r\n    methods: {\r\n        changePage(pageNumber) {\r\n            if (pageNumber === \"first\") {\r\n                // 맨 앞 페이지로 이동\r\n                pageNumber = 1;\r\n            } else if (pageNumber === \"last\") {\r\n                // 맨 뒤 페이지로 이동\r\n                pageNumber = this.totalPages;\r\n            } else {\r\n                pageNumber = parseInt(pageNumber); // 페이지 번호로 변환\r\n            }\r\n\r\n            window.scrollTo({ top: 0, behavior: \"auto\" });\r\n            if (pageNumber >= 1 && pageNumber <= this.totalPages) {\r\n                this.currentPage = pageNumber;\r\n                // 페이지 변경 시 추가 로직 수행\r\n                // 예: API 호출하여 해당 페이지 데이터 가져오기\r\n                // displayedPosts 업데이트\r\n                this.displayedPosts = this.bestListData.slice((this.currentPage - 1) * this.perPage, this.currentPage * this.perPage);\r\n            }\r\n        },\r\n        async getBestList() {\r\n            await axios({\r\n                url: \"http://localhost:3000/booklist/getBest\",\r\n                method: \"POST\",\r\n                data: {},\r\n            })\r\n                .then((res) => {\r\n                    if (localStorage.getItem(\"userID\")) {\r\n                        this.bestListData = res.data.map((book) => {\r\n                            return {\r\n                                ...book,\r\n                                isLiked: this.likeBook.includes(book.BOOK_ID), // 해당 책의 BOOK_ID가 likeBook 배열에 포함되어 있는지 확인하여 isLiked 값을 설정\r\n                            };\r\n                        });\r\n                        for (var i in res.data) {\r\n                            //별이 5개이므로 총점10점을 2로 나눔\r\n                            this.reviewScore.push(res.data[i].reviewpoint / 2);\r\n                        }\r\n                    } else {\r\n                        this.bestListData = res.data.map((book) => {\r\n                            return {\r\n                                ...book,\r\n                                isLiked: false, // 해당 책의 BOOK_ID가 likeBook 배열에 포함되어 있는지 확인하여 isLiked 값을 설정\r\n                            };\r\n                        });\r\n                        for (var i in res.data) {\r\n                            this.bestListData.push(res.data[i]);\r\n                            //별이 5개이므로 총점10점을 2로 나눔\r\n                            this.reviewScore.push(res.data[i].reviewpoint / 2);\r\n                        }\r\n                    }\r\n\r\n                    console.log(this.bestListData);\r\n                    // displayedPosts에 categoryData 데이터 복사\r\n                    this.displayedPosts = this.bestListData.slice((this.currentPage - 1) * this.perPage, this.currentPage * this.perPage);\r\n                })\r\n                .catch((err) => {\r\n                    alert(err);\r\n                });\r\n        },\r\n        //회원이 좋아요한 책 ID 가져오기\r\n        async getLikeBook() {\r\n            await axios({\r\n                url: \"http://localhost:3000/bookList/checkLikeList\",\r\n                method: \"POST\",\r\n                data: {\r\n                    email: this.email,\r\n                },\r\n            }).then((res) => {\r\n                this.likeBook = res.data;\r\n            });\r\n        },\r\n        async likeToggle(bookId) {\r\n            if (localStorage.getItem(\"userID\")) {\r\n                this.bookId = bookId;\r\n                await axios({\r\n                    url: \"http://localhost:3000/detail/likeOrDislike\",\r\n                    method: \"POST\",\r\n                    data: {\r\n                        email: this.email,\r\n                        bookId: this.bookId,\r\n                    },\r\n                }).then((res) => {\r\n                    console.log(res.data, \"좋아요 추가삭제\");\r\n                    this.getLikeBook();\r\n                    this.getBestList();\r\n                });\r\n            } else {\r\n                const conResult = confirm(\"로그인이 필요합니다. \\n 로그인 하시겠습니까?\");\r\n                conResult ? (window.location.href = \"/login\") : null;\r\n            }\r\n        },\r\n        //입력된 숫자를 주어진 범위에 따라 적절한 별점으로 변환\r\n        convertRatingToHalfStars(number) {\r\n            if (Number.isInteger(number)) {\r\n                if (number >= 1 && number <= 5) {\r\n                    return number;\r\n                } else {\r\n                    return 0; // 범위를 벗어나는 경우\r\n                }\r\n            } else {\r\n                const integerPart = Math.floor(number);\r\n                const decimalPart = number - integerPart;\r\n\r\n                if (decimalPart < 0.5) {\r\n                    return integerPart;\r\n                } else {\r\n                    return integerPart + 0.5;\r\n                }\r\n            }\r\n        },\r\n        formatReviewScore(number) {\r\n            if (Number.isInteger(number)) {\r\n                return number.toFixed(1); // 정수인 경우 소수점 자리를 1로 설정하여 변환\r\n            } else {\r\n                return number.toString(); // 소수인 경우 그대로 문자열로 변환\r\n            }\r\n        },\r\n        formatNumber(number) {\r\n            // 숫자를 천 단위마다 쉼표가 있는 형식으로 변환\r\n            return new Intl.NumberFormat().format(number);\r\n        },\r\n        //장바구니에 추가\r\n        async addToCart(bookId) {\r\n            if (localStorage.getItem(\"userID\")) {\r\n                this.bookId = bookId;\r\n                await axios({\r\n                    url: \"http://localhost:3000/detail/gotoCart\",\r\n                    method: \"POST\",\r\n                    data: {\r\n                        email: this.email,\r\n                        bookId: this.bookId,\r\n                    },\r\n                }).then((res) => {\r\n                    alert(\"장바구니에 추가되었습니다.\");\r\n                    this.$refs.childComponent.getCartNum();\r\n                });\r\n            } else {\r\n                const conResult = confirm(\"로그인이 필요합니다. \\n 로그인 하시겠습니까?\");\r\n                conResult ? (window.location.href = \"/login\") : null;\r\n            }\r\n        },\r\n        // 결제하기 버튼 클릭시 서버로 보낼 데이터\r\n        async goToPay(bookId, bookPrice) {\r\n            const totalPoint = bookPrice * 0.05;\r\n            const bookfee = bookPrice >= 50000 ? 0 : 2500;\r\n            await axios({\r\n                url: \"http://localhost:3000/detail/gotoPay\",\r\n                method: \"POST\",\r\n                data: {\r\n                    bookId: bookId,\r\n                    bookNum: 1,\r\n                    email: this.email,\r\n                    total_pay: bookPrice,\r\n                    total_point: totalPoint,\r\n                    fee: bookfee,\r\n                },\r\n            })\r\n                .then((res) => {\r\n                    console.log(res.data.payID);\r\n                    this.$router.push({ name: \"paymentPage\", query: { payid: res.data.payID } });\r\n                })\r\n                .catch((error) => {\r\n                    console.error(\"Error goToPay :\", error);\r\n                });\r\n        },\r\n        getNextDate() {\r\n            //내일 배송일로 나오게 하는 함수\r\n            const today = new Date();\r\n            this.nextDay = today.getDate() + 1;\r\n            this.month = today.getMonth() + 1;\r\n        },\r\n    },\r\n};\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}