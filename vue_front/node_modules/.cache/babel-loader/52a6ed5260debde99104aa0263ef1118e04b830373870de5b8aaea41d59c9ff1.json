{"ast":null,"code":"import { createRouter, createWebHistory } from \"vue-router\";\nimport Main from \"../views/Main.vue\";\nimport Login from \"../views/Login.vue\";\nimport NaverLogin from \"../views/NaverLogin.vue\";\nimport Join from \"../views/Join.vue\";\nimport Survey from \"../views/survey.vue\";\nimport RecommendList from \"../views/recommendList.vue\";\nimport SearchList from \"../views/searchList.vue\";\nimport BestList from \"../views/bestList.vue\";\nimport NewList from \"../views/newList.vue\";\nimport bookDetail from \"../views/bookDetail.vue\";\nimport startest from \"@/views/test.vue\";\nimport Goods from \"../views/goods.vue\";\nimport Categories from \"../views/categories.vue\";\nimport booktestPage from \"../views/bookTest.vue\";\nimport cart from \"../views/cart.vue\";\nimport resultpage from \"../views/paymentResult.vue\";\nimport bookInsert from \"../views/bookInsert.vue\";\nimport pay from \"../views/pay.vue\";\nimport qnaList from \"../views/qnaList.vue\";\nimport qnaWrite from \"../views/qnaWrite.vue\";\nimport qnaEdit from \"../views/qnaEdit.vue\";\nimport eventPage from \"../views/event.vue\";\nimport attendance from \"../views/attendance.vue\";\nimport myPage from \"../views/myPage.vue\";\nimport axios from \"axios\";\nimport Admin from \"../views/Admin.vue\";\nconst requireLogin = () => (to, from, next) => {\n  //로그인안하고 접근하려했을때 실행할 함수?\n  if (localStorage.getItem(\"userID\") !== null) {\n    //localStorage에 데이터 있으면\n    return next(); //접근가능\n  }\n\n  next(\"/login\"); //localStorage에 데이터 없으면 로그인창으로 리다이렉트\n};\n\nconst requireSurvey = () => (to, from, next) => {\n  if (!localStorage.getItem(\"userID\")) {\n    return next();\n  }\n  axios({\n    url: \"http://localhost:3000/sur/check\",\n    method: \"POST\",\n    data: {\n      email: localStorage.getItem(\"userID\")\n    }\n  }).then(res => {\n    if (res.data == \"설문조사 안한 유저\") {\n      next(\"/survey\");\n    } else {\n      return next();\n    }\n  }).catch(err => {\n    console.log(err);\n  });\n};\n// beforeEnter: requireLogin(),  <<로그인한 사람만 들어갈 수 있는 페이지 component아래에 붙여넣으면됨\nconst routes = [{\n  path: \"/\",\n  name: \"Main\",\n  component: Main,\n  beforeEnter: requireSurvey()\n}, {\n  path: \"/login\",\n  name: \"Login\",\n  component: Login\n}, {\n  path: \"/naverlogin\",\n  name: \"naverlogin\",\n  component: NaverLogin\n}, {\n  path: \"/join\",\n  name: \"Join\",\n  component: Join\n}, {\n  path: \"/survey\",\n  name: \"Survey\",\n  component: Survey,\n  beforeEnter: requireLogin()\n}, {\n  path: \"/test\",\n  name: \"testAPIPage\",\n  component: booktestPage\n},\n//---책리스트-------------------------------------------------\n{\n  path: \"/recommendlist\",\n  name: \"RecommendList\",\n  component: RecommendList\n}, {\n  path: \"/search\",\n  name: \"SearchList\",\n  component: SearchList\n}, {\n  path: \"/best\",\n  name: \"BestList\",\n  component: BestList\n}, {\n  path: \"/new\",\n  name: \"NewList\",\n  component: NewList\n}, {\n  path: \"/detail/:id\",\n  name: \"bookDetail\",\n  component: bookDetail,\n  props: true // 라우트 파라미터를 컴포넌트의 프롭스로 전달\n}, {\n  path: \"/startest\",\n  name: \"writeStar\",\n  component: startest\n}, {\n  path: \"/goods\",\n  name: \"Goods\",\n  component: Goods\n}, {\n  path: \"/categories/:category\",\n  name: \"Categories\",\n  component: Categories,\n  props: true // 전달된 파라미터를 컴포넌트의 props로 전달\n},\n//-------------------------------------------------------------\n//장바구니 - 결제 - 결제완료\n{\n  path: \"/cart\",\n  name: \"cartPage\",\n  component: cart\n}, {\n  path: \"/pay\",\n  name: \"paymentPage\",\n  component: pay\n}, {\n  path: \"/result/:orderNum\",\n  name: \"resultpage\",\n  component: resultpage\n},\n//-------------------------------------------------------------\n//QNA\n{\n  path: \"/qna\",\n  name: \"qnaList\",\n  component: qnaList\n}, {\n  path: \"/qnaWrite\",\n  name: \"qnaWrite\",\n  component: qnaWrite\n}, {\n  path: \"/qnaEdit\",\n  name: \"qnaEdit\",\n  component: qnaEdit\n},\n//-------------------------------------------------------------\n//룰렛, 쿠폰주는 화면\n{\n  path: \"/event\",\n  name: \"eventPage\",\n  component: eventPage\n},\n//-------------------------------------------------------------\n//관리자페이지\n{\n  path: \"/admin/bookinsert\",\n  name: \"bookInsert\",\n  component: bookInsert\n}, {\n  path: \"/admin\",\n  name: \"Admin\",\n  component: Admin\n},\n//-------------------------------------------------------------\n//출석체크페이지\n{\n  path: \"/attendance\",\n  name: \"attendanceEventPage\",\n  component: attendance\n}, {\n  path: \"/mypage\",\n  name: \"mypage\",\n  component: myPage\n}];\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes,\n  scrollBehavior() {\n    return {\n      top: 0\n    };\n  }\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","Main","Login","NaverLogin","Join","Survey","RecommendList","SearchList","BestList","NewList","bookDetail","startest","Goods","Categories","booktestPage","cart","resultpage","bookInsert","pay","qnaList","qnaWrite","qnaEdit","eventPage","attendance","myPage","axios","Admin","requireLogin","to","from","next","localStorage","getItem","requireSurvey","url","method","data","email","then","res","catch","err","console","log","routes","path","name","component","beforeEnter","props","router","history","process","env","BASE_URL","scrollBehavior","top"],"sources":["C:/Users/Lim/Desktop/BOOK_0728/MOONMOON/vue_front/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from \"vue-router\";\r\nimport Main from \"../views/Main.vue\";\r\nimport Login from \"../views/Login.vue\";\r\nimport NaverLogin from \"../views/NaverLogin.vue\";\r\nimport Join from \"../views/Join.vue\";\r\nimport Survey from \"../views/survey.vue\";\r\n\r\nimport RecommendList from \"../views/recommendList.vue\";\r\nimport SearchList from \"../views/searchList.vue\";\r\nimport BestList from \"../views/bestList.vue\";\r\nimport NewList from \"../views/newList.vue\";\r\nimport bookDetail from \"../views/bookDetail.vue\";\r\nimport startest from \"@/views/test.vue\";\r\nimport Goods from \"../views/goods.vue\";\r\nimport Categories from \"../views/categories.vue\";\r\n\r\nimport booktestPage from \"../views/bookTest.vue\";\r\nimport cart from \"../views/cart.vue\";\r\nimport resultpage from \"../views/paymentResult.vue\";\r\nimport bookInsert from \"../views/bookInsert.vue\";\r\nimport pay from \"../views/pay.vue\";\r\n\r\nimport qnaList from \"../views/qnaList.vue\";\r\nimport qnaWrite from \"../views/qnaWrite.vue\";\r\nimport qnaEdit from \"../views/qnaEdit.vue\";\r\nimport eventPage from \"../views/event.vue\";\r\nimport attendance from \"../views/attendance.vue\";\r\nimport myPage from \"../views/myPage.vue\";\r\nimport axios from \"axios\";\r\n\r\nimport Admin from \"../views/Admin.vue\";\r\n\r\nconst requireLogin = () => (to, from, next) => {\r\n    //로그인안하고 접근하려했을때 실행할 함수?\r\n    if (localStorage.getItem(\"userID\") !== null) {\r\n        //localStorage에 데이터 있으면\r\n        return next(); //접근가능\r\n    }\r\n    next(\"/login\"); //localStorage에 데이터 없으면 로그인창으로 리다이렉트\r\n};\r\nconst requireSurvey = () => (to, from, next) => {\r\n    if (!localStorage.getItem(\"userID\")) {\r\n        return next();\r\n    }\r\n    axios({\r\n        url: \"http://localhost:3000/sur/check\",\r\n        method: \"POST\",\r\n        data: { email: localStorage.getItem(\"userID\") },\r\n    })\r\n        .then((res) => {\r\n            if (res.data == \"설문조사 안한 유저\") {\r\n                next(\"/survey\");\r\n            } else {\r\n                return next();\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n};\r\n// beforeEnter: requireLogin(),  <<로그인한 사람만 들어갈 수 있는 페이지 component아래에 붙여넣으면됨\r\nconst routes = [\r\n    {\r\n        path: \"/\",\r\n        name: \"Main\",\r\n        component: Main,\r\n        beforeEnter: requireSurvey(),\r\n    },\r\n    {\r\n        path: \"/login\",\r\n        name: \"Login\",\r\n        component: Login,\r\n    },\r\n    {\r\n        path: \"/naverlogin\",\r\n        name: \"naverlogin\",\r\n        component: NaverLogin,\r\n    },\r\n    {\r\n        path: \"/join\",\r\n        name: \"Join\",\r\n        component: Join,\r\n    },\r\n    {\r\n        path: \"/survey\",\r\n        name: \"Survey\",\r\n        component: Survey,\r\n        beforeEnter: requireLogin(),\r\n    },\r\n    {\r\n        path: \"/test\",\r\n        name: \"testAPIPage\",\r\n        component: booktestPage,\r\n    },\r\n    //---책리스트-------------------------------------------------\r\n    {\r\n        path: \"/recommendlist\",\r\n        name: \"RecommendList\",\r\n        component: RecommendList,\r\n    },\r\n    {\r\n        path: \"/search\",\r\n        name: \"SearchList\",\r\n        component: SearchList,\r\n    },\r\n    {\r\n        path: \"/best\",\r\n        name: \"BestList\",\r\n        component: BestList,\r\n    },\r\n    {\r\n        path: \"/new\",\r\n        name: \"NewList\",\r\n        component: NewList,\r\n    },\r\n    {\r\n        path: \"/detail/:id\",\r\n        name: \"bookDetail\",\r\n        component: bookDetail,\r\n        props: true, // 라우트 파라미터를 컴포넌트의 프롭스로 전달\r\n    },\r\n    {\r\n        path: \"/startest\",\r\n        name: \"writeStar\",\r\n        component: startest,\r\n    },\r\n    {\r\n        path: \"/goods\",\r\n        name: \"Goods\",\r\n        component: Goods,\r\n    },\r\n    {\r\n        path: \"/categories/:category\",\r\n        name: \"Categories\",\r\n        component: Categories,\r\n        props: true, // 전달된 파라미터를 컴포넌트의 props로 전달\r\n    },\r\n    //-------------------------------------------------------------\r\n    //장바구니 - 결제 - 결제완료\r\n    {\r\n        path: \"/cart\",\r\n        name: \"cartPage\",\r\n        component: cart,\r\n    },\r\n    {\r\n        path: \"/pay\",\r\n        name: \"paymentPage\",\r\n        component: pay,\r\n    },\r\n    {\r\n        path: \"/result/:orderNum\",\r\n        name: \"resultpage\",\r\n        component: resultpage,\r\n    },\r\n    //-------------------------------------------------------------\r\n    //QNA\r\n    {\r\n        path: \"/qna\",\r\n        name: \"qnaList\",\r\n        component: qnaList,\r\n    },\r\n    {\r\n        path: \"/qnaWrite\",\r\n        name: \"qnaWrite\",\r\n        component: qnaWrite,\r\n    },\r\n    {\r\n        path: \"/qnaEdit\",\r\n        name: \"qnaEdit\",\r\n        component: qnaEdit,\r\n    },\r\n    //-------------------------------------------------------------\r\n    //룰렛, 쿠폰주는 화면\r\n    {\r\n        path: \"/event\",\r\n        name: \"eventPage\",\r\n        component: eventPage,\r\n    },\r\n    //-------------------------------------------------------------\r\n    //관리자페이지\r\n    {\r\n        path: \"/admin/bookinsert\",\r\n        name: \"bookInsert\",\r\n        component: bookInsert,\r\n    },\r\n    {\r\n        path: \"/admin\",\r\n        name: \"Admin\",\r\n        component: Admin,\r\n    },\r\n    //-------------------------------------------------------------\r\n    //출석체크페이지\r\n    {\r\n        path: \"/attendance\",\r\n        name: \"attendanceEventPage\",\r\n        component: attendance,\r\n    },\r\n    {\r\n        path: \"/mypage\",\r\n        name: \"mypage\",\r\n        component: myPage,\r\n    },\r\n];\r\n\r\nconst router = createRouter({\r\n    history: createWebHistory(process.env.BASE_URL),\r\n    routes,\r\n    scrollBehavior() {\r\n        return { top: 0 };\r\n    },\r\n});\r\nexport default router;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}