{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass } from \"vue\";\nimport _imports_0 from '../assets/img/heartFill.png';\nimport _imports_1 from '../assets/img/heart.png';\nimport _imports_2 from '../assets/img/cart2.png';\nconst _hoisted_1 = {\n  class: \"search_category_header\"\n};\nconst _hoisted_2 = {\n  class: \"search\"\n};\nconst _hoisted_3 = {\n  class: \"search_header\"\n};\nconst _hoisted_4 = {\n  class: \"search_header_left\"\n};\nconst _hoisted_5 = {\n  class: \"search_header_right\"\n};\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"판매순\"\n}, \"판매순\", -1 /* HOISTED */);\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"신상품순\"\n}, \"신상품순\", -1 /* HOISTED */);\nconst _hoisted_8 = [_hoisted_6, _hoisted_7];\nconst _hoisted_9 = {\n  class: \"search_items\"\n};\nconst _hoisted_10 = {\n  class: \"search_item_img\"\n};\nconst _hoisted_11 = [\"href\"];\nconst _hoisted_12 = [\"src\"];\nconst _hoisted_13 = {\n  class: \"search_item_info\"\n};\nconst _hoisted_14 = {\n  class: \"best_item_info_title\"\n};\nconst _hoisted_15 = [\"href\"];\nconst _hoisted_16 = {\n  class: \"search_item_info_author\"\n};\nconst _hoisted_17 = {\n  class: \"search_item_info_price\"\n};\nconst _hoisted_18 = /*#__PURE__*/_createElementVNode(\"span\", null, \"원\", -1 /* HOISTED */);\nconst _hoisted_19 = {\n  class: \"best_item_info_summary\"\n};\nconst _hoisted_20 = {\n  class: \"search_item_info_star\"\n};\nconst _hoisted_21 = {\n  key: 0,\n  class: \"best_item_info_star_num\"\n};\nconst _hoisted_22 = {\n  key: 1,\n  class: \"best_item_info_star_num\"\n};\nconst _hoisted_23 = {\n  class: \"search_item_order\"\n};\nconst _hoisted_24 = [\"onClick\"];\nconst _hoisted_25 = {\n  class: \"search_item_btn\"\n};\nconst _hoisted_26 = [\"onClick\"];\nconst _hoisted_27 = [\"onClick\"];\nconst _hoisted_28 = [\"onClick\"];\nconst _hoisted_29 = {\n  class: \"booklist_paging\"\n};\nconst _hoisted_30 = [\"disabled\"];\nconst _hoisted_31 = [\"disabled\"];\nconst _hoisted_32 = [\"onClick\"];\nconst _hoisted_33 = [\"disabled\"];\nconst _hoisted_34 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_GnbBar = _resolveComponent(\"GnbBar\");\n  const _component_StarIcon = _resolveComponent(\"StarIcon\");\n  const _component_Floating = _resolveComponent(\"Floating\");\n  const _component_ScrollTop = _resolveComponent(\"ScrollTop\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_GnbBar, {\n    ref: \"childComponent\",\n    onSearchKeyword: $options.handleSearchKeyword\n  }, null, 8 /* PROPS */, [\"onSearchKeyword\"]), _createElementVNode(\"div\", null, [_createElementVNode(\"h1\", _hoisted_1, \"카테고리 - \" + _toDisplayString($data.currentHeaderCategory), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"span\", null, \"'\" + _toDisplayString($data.currentCategory) + \"'\", 1 /* TEXT */), _createTextVNode(\"에 대한 \"), _createElementVNode(\"span\", null, _toDisplayString($data.categoryData.length), 1 /* TEXT */), _createTextVNode(\"개의 결과 \")]), _createElementVNode(\"div\", _hoisted_5, [_withDirectives(_createElementVNode(\"select\", {\n    onChange: _cache[0] || (_cache[0] = (...args) => $options.getCateGoryData && $options.getCateGoryData(...args)),\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.filterValue = $event)\n  }, _hoisted_8, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelSelect, $data.filterValue]])])]), _createElementVNode(\"div\", _hoisted_9, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.displayedPosts, (item, i) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: i,\n      class: \"search_item\"\n    }, [_createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"a\", {\n      href: `/detail/${item.BOOK_ID}`\n    }, [_createElementVNode(\"img\", {\n      src: item.BOOK_COVER,\n      alt: \"\"\n    }, null, 8 /* PROPS */, _hoisted_12)], 8 /* PROPS */, _hoisted_11)]), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"h2\", _hoisted_14, [_createElementVNode(\"a\", {\n      href: `/detail/${item.BOOK_ID}`\n    }, _toDisplayString(item.BOOK_TITLE), 9 /* TEXT, PROPS */, _hoisted_15)]), _createElementVNode(\"span\", _hoisted_16, _toDisplayString(item.BOOK_AUTHOR) + \" | \" + _toDisplayString(item.BOOK_PUBDATE), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_17, [_createElementVNode(\"span\", null, _toDisplayString($options.formatNumber(item.BOOK_PRICE)), 1 /* TEXT */), _hoisted_18]), _createElementVNode(\"p\", _hoisted_19, _toDisplayString(item.BOOK_DESCRIPTION), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_20, [item.reviewpoint == 0 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_21, \"0.0\")) : (_openBlock(), _createElementBlock(\"span\", _hoisted_22, _toDisplayString($options.formatReviewScore(item.reviewpoint)), 1 /* TEXT */)), _createVNode(_component_StarIcon, {\n      rating: $options.convertRatingToHalfStars($data.reviewScore[i])\n    }, null, 8 /* PROPS */, [\"rating\"])])]), _createElementVNode(\"div\", _hoisted_23, [_createElementVNode(\"a\", {\n      onClick: $event => $options.goToPay(item.BOOK_ID, item.BOOK_PRICE),\n      href: \"#\"\n    }, \"결제하러 가기\", 8 /* PROPS */, _hoisted_24), _createElementVNode(\"p\", null, [_createElementVNode(\"span\", null, \"내일(\" + _toDisplayString($data.month) + \"/\" + _toDisplayString($data.nextDay) + \")\", 1 /* TEXT */), _createTextVNode(\" 도착예정\")])]), _createElementVNode(\"div\", _hoisted_25, [item.isLiked == true ? (_openBlock(), _createElementBlock(\"img\", {\n      key: 0,\n      onClick: $event => $options.likeToggle(item.BOOK_ID),\n      src: _imports_0,\n      alt: \"Heart Filled\"\n    }, null, 8 /* PROPS */, _hoisted_26)) : item.isLiked == false ? (_openBlock(), _createElementBlock(\"img\", {\n      key: 1,\n      onClick: $event => $options.likeToggle(item.BOOK_ID),\n      src: _imports_1,\n      alt: \"Heart\"\n    }, null, 8 /* PROPS */, _hoisted_27)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"img\", {\n      onClick: $event => $options.addToCart(item.BOOK_ID),\n      src: _imports_2,\n      alt: \"\"\n    }, null, 8 /* PROPS */, _hoisted_28)])]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_29, [_createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = $event => $options.changePage('first')),\n    disabled: $data.currentPage === 1\n  }, \"맨앞\", 8 /* PROPS */, _hoisted_30), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = $event => $options.changePage($data.currentPage - 1)),\n    disabled: $data.currentPage === 1\n  }, \"이전\", 8 /* PROPS */, _hoisted_31), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.pageNumbers, pageNumber => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: pageNumber,\n      onClick: $event => $options.changePage(pageNumber),\n      class: _normalizeClass({\n        active: pageNumber === $data.currentPage\n      })\n    }, _toDisplayString(pageNumber), 11 /* TEXT, CLASS, PROPS */, _hoisted_32);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = $event => $options.changePage($data.currentPage + 1)),\n    disabled: $data.currentPage === $options.totalPages\n  }, \"다음\", 8 /* PROPS */, _hoisted_33), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = $event => $options.changePage('last')),\n    disabled: $data.currentPage === $options.totalPages\n  }, \"맨뒤\", 8 /* PROPS */, _hoisted_34)]), _createCommentVNode(\" 플로팅\"), _createVNode(_component_Floating), _createCommentVNode(\" 스크롤 TOP \"), _createVNode(_component_ScrollTop)])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_imports_0","_imports_1","_imports_2","class","_createElementVNode","value","_hoisted_6","_hoisted_7","_createVNode","_component_GnbBar","ref","onSearchKeyword","$options","handleSearchKeyword","_hoisted_1","_toDisplayString","$data","currentHeaderCategory","_hoisted_2","_hoisted_3","_hoisted_4","currentCategory","categoryData","length","_hoisted_5","onChange","_cache","args","getCateGoryData","filterValue","$event","_hoisted_9","_createElementBlock","_Fragment","_renderList","_ctx","displayedPosts","item","i","key","_hoisted_10","href","BOOK_ID","src","BOOK_COVER","alt","_hoisted_13","_hoisted_14","BOOK_TITLE","_hoisted_15","_hoisted_16","BOOK_AUTHOR","BOOK_PUBDATE","_hoisted_17","formatNumber","BOOK_PRICE","_hoisted_18","_hoisted_19","BOOK_DESCRIPTION","_hoisted_20","reviewpoint","_hoisted_21","_hoisted_22","formatReviewScore","_component_StarIcon","rating","convertRatingToHalfStars","reviewScore","_hoisted_23","onClick","goToPay","_hoisted_24","month","nextDay","_hoisted_25","isLiked","likeToggle","addToCart","_hoisted_29","changePage","disabled","currentPage","_hoisted_30","_hoisted_31","pageNumbers","pageNumber","_normalizeClass","active","_hoisted_32","totalPages","_hoisted_33","_hoisted_34","_createCommentVNode","_component_Floating","_component_ScrollTop"],"sources":["C:\\Users\\bj375\\Documents\\workspace-sts-3.9.18.RELEASE\\Moonmoon\\vue_front\\src\\views\\categories.vue"],"sourcesContent":["<style src=\"../assets/css/searchList.css\"></style>\r\n\r\n<template>\r\n    <GnbBar ref=\"childComponent\" @search-keyword=\"handleSearchKeyword\" />\r\n    <div>\r\n        <h1 class=\"search_category_header\">카테고리 - {{ currentHeaderCategory }}</h1>\r\n    </div>\r\n    <div class=\"search\">\r\n        <div class=\"search_header\">\r\n            <div class=\"search_header_left\">\r\n                <span>'{{ currentCategory }}'</span>에 대한\r\n                <span>{{ categoryData.length }}</span>개의 결과\r\n            </div>\r\n            <div class=\"search_header_right\">\r\n                <select @change=\"getCateGoryData\" v-model=\"filterValue\">\r\n                    <option value=\"판매순\">판매순</option>\r\n                    <option value=\"신상품순\">신상품순</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n        <div class=\"search_items\">\r\n            <div v-for=\"(item, i) in displayedPosts\" :key=\"i\" class=\"search_item\">\r\n                <div class=\"search_item_img\">\r\n                    <a :href=\"`/detail/${item.BOOK_ID}`\"><img :src=\"item.BOOK_COVER\" alt=\"\" /></a>\r\n                </div>\r\n                <div class=\"search_item_info\">\r\n                    <h2 class=\"best_item_info_title\"><a :href=\"`/detail/${item.BOOK_ID}`\">{{ item.BOOK_TITLE }}</a></h2>\r\n                    <span class=\"search_item_info_author\">{{ item.BOOK_AUTHOR }} | {{ item.BOOK_PUBDATE }}</span>\r\n                    <div class=\"search_item_info_price\">\r\n                        <span>{{ formatNumber(item.BOOK_PRICE) }}</span>\r\n                        <span>원</span>\r\n                    </div>\r\n                    <p class=\"best_item_info_summary\">\r\n                        {{ item.BOOK_DESCRIPTION }}\r\n                    </p>\r\n                    <div class=\"search_item_info_star\">\r\n                        <span v-if=\"item.reviewpoint == 0\" class=\"best_item_info_star_num\">0.0</span>\r\n                        <span v-else class=\"best_item_info_star_num\">{{ formatReviewScore(item.reviewpoint) }}</span>\r\n                        <StarIcon :rating=\"convertRatingToHalfStars(reviewScore[i])\" />\r\n                    </div>\r\n                </div>\r\n                <div class=\"search_item_order\">\r\n                    <a @click=\"goToPay(item.BOOK_ID, item.BOOK_PRICE)\" href=\"#\">결제하러 가기</a>\r\n                    <p><span>내일({{ month }}/{{ nextDay }})</span> 도착예정</p>\r\n                </div>\r\n                <div class=\"search_item_btn\">\r\n                    <img v-if=\"item.isLiked == true\" @click=\"likeToggle(item.BOOK_ID)\" src=\"../assets/img/heartFill.png\"\r\n                        alt=\"Heart Filled\" />\r\n                    <img v-else-if=\"item.isLiked == false\" @click=\"likeToggle(item.BOOK_ID)\" src=\"../assets/img/heart.png\"\r\n                        alt=\"Heart\" />\r\n                    <img @click=\"addToCart(item.BOOK_ID)\" src=\"../assets/img/cart2.png\" alt=\"\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"booklist_paging\">\r\n            <button @click=\"changePage('first')\" :disabled=\"currentPage === 1\">맨앞</button>\r\n            <button @click=\"changePage(currentPage - 1)\" :disabled=\"currentPage === 1\">이전</button>\r\n            <button v-for=\"pageNumber in pageNumbers\" :key=\"pageNumber\" @click=\"changePage(pageNumber)\"\r\n                :class=\"{ active: pageNumber === currentPage }\">\r\n                {{ pageNumber }}\r\n            </button>\r\n            <button @click=\"changePage(currentPage + 1)\" :disabled=\"currentPage === totalPages\">다음</button>\r\n            <button @click=\"changePage('last')\" :disabled=\"currentPage === totalPages\">맨뒤</button>\r\n        </div>\r\n        <!-- 플로팅-->\r\n        <Floating />\r\n        <!-- 스크롤 TOP -->\r\n        <ScrollTop />\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport GnbBar from \"../components/gnbBar.vue\";\r\nimport Floating from \"../components/floating.vue\"\r\nimport StarIcon from \"../components/star.vue\"; // 별점 아이콘 컴포넌트의 경로를 수정해주세요.\r\nimport ScrollTop from \"@/components/scrollTop.vue\";\r\n\r\nimport axios from \"axios\";\r\naxios.defaults.baseURL = \"http://localhost:3000\";\r\naxios.defaults.headers.post[\"Contents-Type\"] = \"application/json;charset=utf-8\";\r\naxios.defaults.headers.post[\"Access-Control-Allow-Origin\"] = \"*\";\r\n\r\nexport default {\r\n\r\n    name: \"\",\r\n    components: { GnbBar, StarIcon, Floating, ScrollTop },\r\n    data() {\r\n        return {\r\n            categoryData: [], // 카테고리 게시글 데이터\r\n            // 페이징\r\n            perPage: 10, //한 페이지에 보여줄 게시물 수\r\n            currentPage: 1, // 현재 페이지 번호\r\n            totalPages: 1, // 총 페이지 수\r\n            maxDisplayedPages: 9, // 표시할 최대 페이지 수 (현재 페이지를 중심으로 좌우로 표시)\r\n\r\n            //현재 카테고리 올바른 출력 위한 배열\r\n            categoryHeader: [\r\n                {\r\n                    id: 1,\r\n                    top: \"경제경영\",\r\n                    middle: [\"경제학/경제일반\", \"기업 경영\", \"재테크/투자\"],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 2,\r\n                    top: \"과학\",\r\n                    middle: [\"기초과학/교양과학\", \"의학\", \"화학\", \"공학\"],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 3,\r\n                    top: \"사회과학\",\r\n                    middle: [\"비평/칼럼\", \"기업 사회문제\", \" 정치학/외교학/행정학\"],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 4,\r\n                    top: \"소설/시/희곡\",\r\n                    middle: [\r\n                        \"한국소설\",\r\n                        \"일본소설\",\r\n                        \"영미소설\",\r\n                        \"추리/미스터리소설\",\r\n                        \"과학소설(SF)\",\r\n                        \"호러,공포소설\",\r\n                        \"액션/스릴러소설\",\r\n                        \"로맨스소설\",\r\n                        \"시\",\r\n                        \"희곡\",\r\n                        \"영미소설\",\r\n                        \"영미소설\",\r\n                    ],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 5,\r\n                    top: \"수험서/자격증\",\r\n                    middle: [\r\n                        \"국가기술자격\",\r\n                        \"국가전문자격\",\r\n                        \"공무원 수험서\",\r\n                        \"한국사능력검정시험\",\r\n                        \"공인중개사/주택관리사\",\r\n                        \"운전면허\",\r\n                        \"컴퓨터 활용능력\",\r\n                        \"편입/검정고시/독학사\",\r\n                    ],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 6,\r\n                    top: \"에세이\",\r\n                    middle: [\"한국에세이\", \"외국에세이\", \"여행에세이\", \"사랑/연애 에세이\", \"자연에세이\"],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 7,\r\n                    top: \"여행\",\r\n                    middle: [\r\n                        \"서울/수도권 여행가이드\",\r\n                        \"국내 여행가이드\",\r\n                        \"캠핑여행\",\r\n                        \"유럽여행\",\r\n                        \"일본여행\",\r\n                        \"중국여행\",\r\n                        \"동남아시아여행\",\r\n                        \"세계일주여행\",\r\n                    ],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 8,\r\n                    top: \"역사\",\r\n                    middle: [\"동양사 일반\", \"역사학\", \"한국사 일반\", \"한국고대~고려시대\", \"조선사\", \"한국근현대사\", \"아시아사\", \"세계사 일반\"],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 9,\r\n                    top: \"예술/대중문화\",\r\n                    middle: [\"예술/대중문화의 이해\", \"미술\", \"음악\", \"영화/드라마\", \"사진\", \"건축\", \"뮤지컬/오페라\"],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 10,\r\n                    top: \"외국어\",\r\n                    middle: [\"어학사전\", \"토익\", \"토플\", \"영어회화\", \"영문법\", \"영어사전\", \"일본어\", \"중국어\", \"한자\", \" 통역/번역\"],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 11,\r\n                    top: \"요리/살림\",\r\n                    middle: [\"건강요리\", \"다이어트 요리\", \"도시락\", \"디저트\", \"살림/정리수납\", \"술/음료/차\", \"이유식\", \"제과제빵\"],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 12,\r\n                    top: \"인문학\",\r\n                    middle: [\"교양 인문학\", \"철학 일반\", \"서양철학\", \"동양철학\", \" 심리학/정신분석학\", \"인류학/고고학\"],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 13,\r\n                    top: \"자기계발\",\r\n                    middle: [\"성공\", \"리더십\", \"인간관계\", \"창의적사고/두뇌계발\", \"취업/진로/유망직업\", \"20대의자기계발\"],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 14,\r\n                    top: \"장르소설\",\r\n                    middle: [\"추리/미스터리소설\", \" 판타지/환상문학\", \"호러/공포\", \"액션/스릴러\", \"로맨스\"],\r\n                    expanded: false,\r\n                },\r\n                {\r\n                    id: 15,\r\n                    top: \"컴퓨터/모바일\",\r\n                    middle: [\"웹디자인/홈페이지\", \"인공지능\", \"프로그래밍 개발/방법론\", \"프로그래밍 언어\", \"PC/게임/디지털 카메라\"],\r\n                    expanded: false,\r\n                },\r\n            ],\r\n            currentHeaderCategory: \"\",\r\n            reviewScore: [], // 리뷰 점수를 얻어온다고 가정\r\n            email: \"\",\r\n            bookId: \"\",\r\n            filterValue: \"판매순\",\r\n\r\n            currentCategory: \"\",\r\n\r\n            //좋아요 여부\r\n            isLiked: false,\r\n            likeBook: [],\r\n\r\n            nextDay: 0,\r\n            month: 0\r\n\r\n        };\r\n    },\r\n\r\n    setup() { },\r\n    created() {\r\n        this.email = localStorage.getItem(\"userID\");\r\n        this.getLikeBook();\r\n        this.getNextDate();\r\n    },\r\n    mounted() {\r\n        this.$route.params.category == '장르소설' ? this.currentCategory = '소설/시/희곡' : this.currentCategory = this.$route.params.category;\r\n        this.isCategoryHeaderMatch();\r\n        console.log(this.currentCategory);\r\n        this.$nextTick(() => {\r\n            this.getCateGoryData();\r\n        });\r\n    },\r\n    unmounted() { },\r\n    computed: {\r\n        totalPages() { // 전체 페이지 수 계산\r\n            this.totalPages = Math.ceil(this.categoryData.length / this.perPage);\r\n            return Math.ceil(this.categoryData.length / this.perPage);\r\n        },\r\n        pageNumbers() {\r\n            const start = Math.max(1, this.currentPage - Math.floor(this.maxDisplayedPages / 2));\r\n            const end = Math.min(this.totalPages, start + this.maxDisplayedPages - 1);\r\n            return Array.from({ length: end - start + 1 }, (_, i) => start + i);\r\n        }\r\n    },\r\n    watch: {\r\n        '$route'(to, from) {\r\n            this.$route.params.category == '장르소설' ? this.currentCategory = '소설/시/희곡' : this.currentCategory = this.$route.params.category;\r\n            this.getCateGoryData();\r\n            this.isCategoryHeaderMatch();\r\n        }\r\n    },\r\n    methods: {\r\n\r\n        changePage(pageNumber) {\r\n            if (pageNumber === 'first') { // 맨 앞 페이지로 이동\r\n                pageNumber = 1;\r\n            } else if (pageNumber === 'last') { // 맨 뒤 페이지로 이동\r\n                pageNumber = this.totalPages;\r\n            } else {\r\n                pageNumber = parseInt(pageNumber); // 페이지 번호로 변환\r\n            }\r\n\r\n            window.scrollTo({ top: 0, behavior: 'auto' });\r\n            if (pageNumber >= 1 && pageNumber <= this.totalPages) {\r\n                this.currentPage = pageNumber;\r\n                // 페이지 변경 시 추가 로직 수행\r\n                // 예: API 호출하여 해당 페이지 데이터 가져오기\r\n                // displayedPosts 업데이트\r\n                this.displayedPosts = this.categoryData.slice(\r\n                    (this.currentPage - 1) * this.perPage,\r\n                    this.currentPage * this.perPage\r\n                );\r\n            }\r\n        },\r\n        isCategoryHeaderMatch() {\r\n            if (!this.categoryHeader.some(category => category.top.includes(this.currentCategory))) {\r\n                const foundCategory = this.categoryHeader.find(category => category.middle.includes(this.currentCategory));\r\n                if (foundCategory) {\r\n                    this.currentHeaderCategory = foundCategory.top + ' ➜ ' + this.currentCategory;\r\n                } else {\r\n                    this.currentHeaderCategory = this.currentCategory;\r\n                }\r\n            } else {\r\n                this.currentHeaderCategory = this.currentCategory;\r\n            }\r\n        },\r\n        handleSearchKeyword(keyword) {\r\n            this.searchKeyword = keyword;\r\n            this.getCateGoryData();\r\n        },\r\n        //카테고리 데이터 가져오기\r\n        async getCateGoryData() {\r\n            //판매순\r\n            if (this.filterValue === \"판매순\") {\r\n                await axios({\r\n                    url: \"http://localhost:3000/bookList/bestCate\",\r\n                    method: \"POST\",\r\n                    data: {\r\n                        category: this.currentCategory\r\n                    }\r\n                })\r\n                    .then((res) => {\r\n                        if (localStorage.getItem(\"userID\")) {\r\n                            console.log(res, this.currentCategory + \"카테고리 데이터\");\r\n                            this.categoryData = res.data;\r\n\r\n                            this.categoryData = res.data.map(book => {\r\n                                return {\r\n                                    ...book,\r\n                                    isLiked: this.likeBook.includes(book.BOOK_ID) // 해당 책의 BOOK_ID가 likeBook 배열에 포함되어 있는지 확인하여 isLiked 값을 설정\r\n                                };\r\n                            });\r\n                            for (var i in res.data) {\r\n                                //별이 5개이므로 총점10점을 2로 나눔\r\n                                this.reviewScore.push((res.data[i].reviewpoint) / 2)\r\n                            }\r\n                        } else {\r\n                            this.categoryData = res.data.map(book => {\r\n                                return {\r\n                                    ...book,\r\n                                    isLiked: false // 해당 책의 BOOK_ID가 likeBook 배열에 포함되어 있는지 확인하여 isLiked 값을 설정\r\n                                };\r\n                            });\r\n                        }\r\n                        console.log(this.categoryData, \"최종 카테고리\")\r\n                        console.log(this.reviewScore, \"리뷰\")\r\n                        // displayedPosts에 categoryData 데이터 복사\r\n                        this.displayedPosts = this.categoryData.slice(\r\n                            (this.currentPage - 1) * this.perPage,\r\n                            this.currentPage * this.perPage\r\n                        );\r\n                    })\r\n                    .catch((err) => {\r\n                        console.log(err);\r\n                    })\r\n            } else if (this.filterValue === \"신상품순\") {\r\n                await axios({\r\n                    url: \"http://localhost:3000/bookList/newCate\",\r\n                    method: \"POST\",\r\n                    data: {\r\n                        category: this.currentCategory\r\n                    }\r\n                })\r\n                    .then((res) => {\r\n                        if (localStorage.getItem(\"userID\")) {\r\n                            console.log(res, this.currentCategory + \"카테고리 데이터\");\r\n                            this.categoryData = res.data;\r\n\r\n                            this.categoryData = res.data.map(book => {\r\n                                return {\r\n                                    ...book,\r\n                                    isLiked: this.likeBook.includes(book.BOOK_ID) // 해당 책의 BOOK_ID가 likeBook 배열에 포함되어 있는지 확인하여 isLiked 값을 설정\r\n                                };\r\n                            });\r\n                            for (var i in res.data) {\r\n                                //별이 5개이므로 총점10점을 2로 나눔\r\n                                this.reviewScore.push((res.data[i].reviewpoint) / 2)\r\n                            }\r\n                        } else {\r\n                            this.categoryData = res.data.map(book => {\r\n                                return {\r\n                                    ...book,\r\n                                    isLiked: false // 해당 책의 BOOK_ID가 likeBook 배열에 포함되어 있는지 확인하여 isLiked 값을 설정\r\n                                };\r\n                            });\r\n                        }\r\n                        console.log(this.categoryData, \"최종 카테고리\")\r\n                        console.log(this.reviewScore, \"리뷰\")\r\n                        // displayedPosts에 categoryData 데이터 복사\r\n                        this.displayedPosts = this.categoryData.slice(\r\n                            (this.currentPage - 1) * this.perPage,\r\n                            this.currentPage * this.perPage\r\n                        );\r\n                    })\r\n                    .catch((err) => {\r\n                        console.log(err);\r\n                    })\r\n            }\r\n\r\n        },\r\n        //회원이 좋아요한 책 ID 가져오기\r\n        async getLikeBook() {\r\n            await axios({\r\n                url: \"http://localhost:3000/bookList/checkLikeList\",\r\n                method: \"POST\",\r\n                data: {\r\n                    email: this.email\r\n                }\r\n            })\r\n                .then((res) => {\r\n                    this.likeBook = res.data;\r\n                })\r\n        },\r\n        async likeToggle(bookId) {\r\n            if (localStorage.getItem(\"userID\")) {\r\n                this.bookId = bookId;\r\n                await axios({\r\n                    url: \"http://localhost:3000/detail/likeOrDislike\",\r\n                    method: \"POST\",\r\n                    data: {\r\n                        email: this.email,\r\n                        bookId: this.bookId\r\n                    }\r\n                })\r\n                    .then((res) => {\r\n                        console.log(res.data, \"좋아요 추가삭제\")\r\n                        this.getLikeBook();\r\n                        this.getCateGoryData();\r\n                    })\r\n\r\n            } else {\r\n                const conResult = confirm(\"로그인이 필요합니다. \\n 로그인 하시겠습니까?\");\r\n                conResult ? window.location.href = \"/login\" : null;\r\n            }\r\n\r\n        },\r\n        //입력된 숫자를 주어진 범위에 따라 적절한 별점으로 변환\r\n        convertRatingToHalfStars(number) {\r\n            if (Number.isInteger(number)) {\r\n                if (number >= 1 && number <= 5) {\r\n                    return number;\r\n                } else {\r\n                    return 0; // 범위를 벗어나는 경우\r\n                }\r\n            } else {\r\n                const integerPart = Math.floor(number);\r\n                const decimalPart = number - integerPart;\r\n\r\n                if (decimalPart < 0.5) {\r\n                    return integerPart;\r\n                } else {\r\n                    return integerPart + 0.5;\r\n                }\r\n            }\r\n        },\r\n        formatReviewScore(number) {\r\n            if (number === undefined) {\r\n                return 'N/A'; // 또는 다른 특별한 값으로 대체\r\n            }\r\n\r\n            if (Number.isInteger(number)) {\r\n                return number.toFixed(1); // 정수인 경우 소수점 자리를 1로 설정하여 변환\r\n            } else {\r\n                return number.toString(); // 소수인 경우 그대로 문자열로 변환\r\n            }\r\n        },\r\n        formatNumber(number) {\r\n            // 숫자를 천 단위마다 쉼표가 있는 형식으로 변환\r\n            return new Intl.NumberFormat().format(number);\r\n        },\r\n        //장바구니에 추가\r\n        async addToCart(bookId) {\r\n            if (localStorage.getItem(\"userID\")) {\r\n                this.bookId = bookId;\r\n                await axios({\r\n                    url: \"http://localhost:3000/detail/gotoCart\",\r\n                    method: \"POST\",\r\n                    data: {\r\n                        email: this.email,\r\n                        bookId: this.bookId\r\n                    }\r\n                })\r\n                    .then((res) => {\r\n                        alert(\"장바구니에 추가되었습니다.\");\r\n                        this.$refs.childComponent.getCartNum();\r\n                    })\r\n            } else {\r\n                const conResult = confirm(\"로그인이 필요합니다. \\n 로그인 하시겠습니까?\");\r\n                conResult ? window.location.href = \"/login\" : null;\r\n            }\r\n        },\r\n        // 결제하기 버튼 클릭시 서버로 보낼 데이터\r\n        async goToPay(bookId, bookPrice) {\r\n            const totalPoint = bookPrice * 0.05;\r\n            const bookfee = bookPrice >= 50000 ? 0 : 2500;\r\n            await axios({\r\n                url: \"http://localhost:3000/detail/gotoPay\",\r\n                method: \"POST\",\r\n                data: {\r\n                    bookId: bookId,\r\n                    bookNum: 1,\r\n                    email: this.email,\r\n                    total_pay: bookPrice,\r\n                    total_point: totalPoint,\r\n                    fee: bookfee\r\n                },\r\n            })\r\n                .then((res) => {\r\n                    console.log(res.data.payID);\r\n                    window.location.href = `/pay/${res.data.payID}`;\r\n                })\r\n                .catch((error) => {\r\n                    console.error(\"Error goToPay :\", error);\r\n                });\r\n        },\r\n        getNextDate() {\r\n            //내일 배송일로 나오게 하는 함수\r\n            const today = new Date();\r\n            this.nextDay = today.getDate() + 1;\r\n            this.month = today.getMonth() + 1;\r\n        },\r\n    },\r\n};\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}