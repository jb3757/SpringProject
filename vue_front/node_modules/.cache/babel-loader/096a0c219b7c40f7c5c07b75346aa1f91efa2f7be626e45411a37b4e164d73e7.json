{"ast":null,"code":"import { createRouter, createWebHistory } from \"vue-router\";\nimport Main from \"../views/Main.vue\";\nimport Login from \"../views/Login.vue\";\nimport Join from \"../views/Join.vue\";\nimport SearchList from \"../views/searchList.vue\";\nimport BestList from \"../views/bestList.vue\";\nimport NewList from \"../views/newList.vue\";\nimport booktestPage from \"../views/bookTest.vue\";\nimport cart from \"../views/cart.vue\";\nimport resultpage from \"../views/paymentResult.vue\";\nimport bookInsert from \"../views/bookInsert.vue\";\nimport pay from \"../views/pay.vue\";\nimport qnaList from \"../views/qnaList.vue\";\nimport qnaWrite from \"../views/qnaWrite.vue\";\nimport qnaEdit from \"../views/qnaEdit.vue\";\nimport eventPage from \"../views/event.vue\";\nconst requireLogin = () => (to, from, next) => {\n  //로그인안하고 접근하려했을때 실행할 함수?\n  if (localStorage.getItem(\"userID\") !== null) {\n    //localStorage에 데이터 있으면\n    return next(); //접근가능\n  }\n\n  next(\"/login\"); //localStorage에 데이터 없으면 로그인창으로 리다이렉트\n};\n\n// beforeEnter: requireLogin(),  <<로그인 한사람만 들어갈 수 있는 페이지 component아래에 붙여넣으면됨\nconst routes = [{\n  path: \"/\",\n  name: \"Main\",\n  component: Main\n}, {\n  path: \"/login\",\n  name: \"Login\",\n  component: Login\n}, {\n  path: \"/join\",\n  name: \"Join\",\n  component: Join\n}, {\n  path: \"/test\",\n  name: \"testAPIPage\",\n  component: booktestPage\n},\n//---책리스트---\n{\n  path: \"/search\",\n  name: \"SearchList\",\n  component: SearchList\n}, {\n  path: \"/best\",\n  name: \"BestList\",\n  component: BestList\n}, {\n  path: \"/new\",\n  name: \"NewList\",\n  component: NewList\n},\n//-------------\n{\n  path: \"/cart\",\n  name: \"cartPage\",\n  component: cart\n}, {\n  path: \"/result/:orderNum\",\n  name: \"resultpage\",\n  component: resultpage\n}, {\n  path: \"/qna\",\n  name: \"qnaList\",\n  component: qnaList\n}, {\n  path: \"/qnaWrite\",\n  name: \"qnaWrite\",\n  component: qnaWrite\n}, {\n  path: \"/qnaEdit\",\n  name: \"qnaEdit\",\n  component: qnaEdit\n}, {\n  path: \"/pay\",\n  name: \"paymentPage\",\n  component: pay\n}, {\n  path: \"/bookinsert\",\n  name: \"bookInsert\",\n  component: bookInsert\n}, {\n  path: \"/event\",\n  name: \"eventPage\",\n  component: eventPage\n}];\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes,\n  scrollBehavior() {\n    return {\n      top: 0\n    };\n  }\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","Main","Login","Join","SearchList","BestList","NewList","booktestPage","cart","resultpage","bookInsert","pay","qnaList","qnaWrite","qnaEdit","eventPage","requireLogin","to","from","next","localStorage","getItem","routes","path","name","component","router","history","process","env","BASE_URL","scrollBehavior","top"],"sources":["C:/Users/Lim/Desktop/BOOK_0728/MOONMOON/vue_front/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from \"vue-router\";\r\nimport Main from \"../views/Main.vue\";\r\nimport Login from \"../views/Login.vue\";\r\nimport Join from \"../views/Join.vue\";\r\n\r\nimport SearchList from \"../views/searchList.vue\";\r\nimport BestList from \"../views/bestList.vue\";\r\nimport NewList from \"../views/newList.vue\";\r\n\r\nimport booktestPage from \"../views/bookTest.vue\";\r\nimport cart from \"../views/cart.vue\";\r\nimport resultpage from \"../views/paymentResult.vue\";\r\nimport bookInsert from \"../views/bookInsert.vue\";\r\nimport pay from \"../views/pay.vue\";\r\n\r\nimport qnaList from \"../views/qnaList.vue\";\r\nimport qnaWrite from \"../views/qnaWrite.vue\";\r\nimport qnaEdit from \"../views/qnaEdit.vue\";\r\nimport eventPage from \"../views/event.vue\";\r\n\r\nconst requireLogin = () => (to, from, next) => {\r\n  //로그인안하고 접근하려했을때 실행할 함수?\r\n  if (localStorage.getItem(\"userID\") !== null) {\r\n    //localStorage에 데이터 있으면\r\n    return next(); //접근가능\r\n  }\r\n  next(\"/login\"); //localStorage에 데이터 없으면 로그인창으로 리다이렉트\r\n};\r\n\r\n// beforeEnter: requireLogin(),  <<로그인 한사람만 들어갈 수 있는 페이지 component아래에 붙여넣으면됨\r\nconst routes = [\r\n  {\r\n    path: \"/\",\r\n    name: \"Main\",\r\n    component: Main,\r\n  },\r\n  {\r\n    path: \"/login\",\r\n    name: \"Login\",\r\n    component: Login,\r\n  },\r\n  {\r\n    path: \"/join\",\r\n    name: \"Join\",\r\n    component: Join,\r\n  },\r\n  {\r\n    path: \"/test\",\r\n    name: \"testAPIPage\",\r\n    component: booktestPage,\r\n  },\r\n  //---책리스트---\r\n  {\r\n    path: \"/search\",\r\n    name: \"SearchList\",\r\n    component: SearchList,\r\n  },\r\n  {\r\n    path: \"/best\",\r\n    name: \"BestList\",\r\n    component: BestList,\r\n  },\r\n  {\r\n    path: \"/new\",\r\n    name: \"NewList\",\r\n    component: NewList,\r\n  },\r\n  //-------------\r\n  {\r\n    path: \"/cart\",\r\n    name: \"cartPage\",\r\n    component: cart,\r\n  },\r\n  {\r\n    path: \"/result/:orderNum\",\r\n    name: \"resultpage\",\r\n    component: resultpage,\r\n  },\r\n  {\r\n    path: \"/qna\",\r\n    name: \"qnaList\",\r\n    component: qnaList,\r\n  },\r\n  {\r\n    path: \"/qnaWrite\",\r\n    name: \"qnaWrite\",\r\n    component: qnaWrite,\r\n  },\r\n  {\r\n    path: \"/qnaEdit\",\r\n    name: \"qnaEdit\",\r\n    component: qnaEdit,\r\n  },\r\n  {\r\n    path: \"/pay\",\r\n    name: \"paymentPage\",\r\n    component: pay,\r\n  },\r\n  {\r\n    path: \"/bookinsert\",\r\n    name: \"bookInsert\",\r\n    component: bookInsert,\r\n  },\r\n  {\r\n    path: \"/event\",\r\n    name: \"eventPage\",\r\n    component: eventPage,\r\n  },\r\n];\r\n\r\nconst router = createRouter({\r\n  history: createWebHistory(process.env.BASE_URL),\r\n  routes,\r\n  scrollBehavior() {\r\n    return { top: 0 };\r\n  },\r\n});\r\nexport default router;\r\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,IAAI,MAAM,mBAAmB;AAEpC,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,OAAO,MAAM,sBAAsB;AAE1C,OAAOC,YAAY,MAAM,uBAAuB;AAChD,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,UAAU,MAAM,4BAA4B;AACnD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,GAAG,MAAM,kBAAkB;AAElC,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,SAAS,MAAM,oBAAoB;AAE1C,MAAMC,YAAY,GAAGA,CAAA,KAAM,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EAC7C;EACA,IAAIC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAE;IAC3C;IACA,OAAOF,IAAI,CAAC,CAAC,CAAC,CAAC;EACjB;;EACAA,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAClB,CAAC;;AAED;AACA,MAAMG,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAExB;AACb,CAAC,EACD;EACEsB,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEvB;AACb,CAAC,EACD;EACEqB,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAEtB;AACb,CAAC,EACD;EACEoB,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,aAAa;EACnBC,SAAS,EAAElB;AACb,CAAC;AACD;AACA;EACEgB,IAAI,EAAE,SAAS;EACfC,IAAI,EAAE,YAAY;EAClBC,SAAS,EAAErB;AACb,CAAC,EACD;EACEmB,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,UAAU;EAChBC,SAAS,EAAEpB;AACb,CAAC,EACD;EACEkB,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE,SAAS;EACfC,SAAS,EAAEnB;AACb,CAAC;AACD;AACA;EACEiB,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,UAAU;EAChBC,SAAS,EAAEjB;AACb,CAAC,EACD;EACEe,IAAI,EAAE,mBAAmB;EACzBC,IAAI,EAAE,YAAY;EAClBC,SAAS,EAAEhB;AACb,CAAC,EACD;EACEc,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE,SAAS;EACfC,SAAS,EAAEb;AACb,CAAC,EACD;EACEW,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,UAAU;EAChBC,SAAS,EAAEZ;AACb,CAAC,EACD;EACEU,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,SAAS;EACfC,SAAS,EAAEX;AACb,CAAC,EACD;EACES,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE,aAAa;EACnBC,SAAS,EAAEd;AACb,CAAC,EACD;EACEY,IAAI,EAAE,aAAa;EACnBC,IAAI,EAAE,YAAY;EAClBC,SAAS,EAAEf;AACb,CAAC,EACD;EACEa,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,WAAW;EACjBC,SAAS,EAAEV;AACb,CAAC,CACF;AAED,MAAMW,MAAM,GAAG3B,YAAY,CAAC;EAC1B4B,OAAO,EAAE3B,gBAAgB,CAAC4B,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;EAC/CR,MAAM;EACNS,cAAcA,CAAA,EAAG;IACf,OAAO;MAAEC,GAAG,EAAE;IAAE,CAAC;EACnB;AACF,CAAC,CAAC;AACF,eAAeN,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}