{"ast":null,"code":"import axios from \"axios\";\naxios.defaults.baseURL = \"http://localhost:3000\";\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json;charset=utf-8\";\naxios.defaults.headers.post[\"Access-Control-Allow-Origin\"] = \"*\";\nexport default {\n  name: '',\n  components: {},\n  data() {\n    return {\n      // 플로팅 데이터\n      floatingState: \"recent\",\n      floatingRecent: [],\n      floatingHeart: [],\n      email: \"\",\n      //좋아요 여부\n      isLiked: false,\n      likeBook: []\n    };\n  },\n  setup() {},\n  created() {\n    this.email = localStorage.getItem(\"userID\");\n    this.getLikeBook();\n  },\n  mounted() {\n    this.getFloatRecentBook();\n  },\n  unmounted() {},\n  methods: {\n    openFloating() {\n      const floatdiv = this.$refs.float.classList;\n      floatdiv.toggle(\"display_none\");\n    },\n    closeFloating() {\n      const floatdiv = this.$refs.float.classList;\n      floatdiv.toggle(\"display_none\");\n    },\n    floatingMenuRecent() {\n      const floatRecentBtn = this.$refs.floatRecent;\n      const floatHeartBtn = this.$refs.floatHeart;\n      this.floatingState = \"recent\";\n      if (this.floatingState == \"recent\") {\n        floatRecentBtn.classList.add(\"current\");\n        floatHeartBtn.classList.remove(\"current\");\n      }\n    },\n    floatingMenuHeart() {\n      const floatRecentBtn = this.$refs.floatRecent;\n      const floatHeartBtn = this.$refs.floatHeart;\n      this.floatingState = \"heart\";\n      if (this.floatingState == \"heart\") {\n        floatHeartBtn.classList.add(\"current\");\n        floatRecentBtn.classList.remove(\"current\");\n      }\n    },\n    //최근 본 목록 조회\n    async getFloatRecentBook() {\n      this.floatingRecent = [];\n      await axios({\n        url: \"http://localhost:3000/floating/recentbook\",\n        method: \"GET\",\n        params: {\n          userEmail: this.email\n        }\n      }).then(res => {\n        if (localStorage.getItem(\"userID\")) {\n          this.floatingRecent = res.data.recentBooks.map(book => {\n            return {\n              ...book,\n              isLiked: this.likeBook.includes(book.BOOK_ID) // 해당 책의 BOOK_ID가 likeBook 배열에 포함되어 있는지 확인하여 isLiked 값을 설정\n            };\n          });\n        } else {\n          this.floatingRecent = res.data.recentBooks.map(book => {\n            return {\n              ...book,\n              isLiked: false // 해당 책의 BOOK_ID가 likeBook 배열에 포함되어 있는지 확인하여 isLiked 값을 설정\n            };\n          });\n        }\n      }).catch(err => {\n        alert(err);\n      });\n    },\n    // 최근 본 목록 삭제\n    async deleteFloatRecentBook(bookId) {\n      await axios({\n        url: `http://localhost:3000/floating/delrecentbook/${bookId}`,\n        method: \"DELETE\",\n        params: {\n          id: bookId\n        }\n      }).then(res => {\n        this.getFloatRecentBook();\n      }).catch(err => {\n        alert(err);\n      });\n    },\n    //최근 본 전체 삭제\n    async allDeleteFloatRecentBook() {\n      await axios({\n        url: \"http://localhost:3000/floating/delAllRec\",\n        method: \"DELETE\",\n        params: {\n          userEmail: this.email\n        }\n      }).then(res => {\n        this.getFloatRecentBook();\n      }).catch(err => {\n        alert(err);\n      });\n    },\n    //찜 목록 조회\n    async getFloatHeartBook() {\n      this.floatingHeart = [];\n      await axios({\n        url: \"http://localhost:3000/floating/likebook\",\n        method: \"GET\",\n        params: {\n          userEmail: this.email\n        }\n      }).then(res => {\n        console.log(res, \"찜하기\");\n        if (localStorage.getItem(\"userID\")) {\n          this.floatingHeart = res.data.likeBooks.map(book => {\n            return {\n              ...book,\n              isLiked: this.likeBook.includes(book.BOOK_ID) // 해당 책의 BOOK_ID가 likeBook 배열에 포함되어 있는지 확인하여 isLiked 값을 설정\n            };\n          });\n        } else {\n          this.floatingHeart = res.data.likeBooks.map(book => {\n            return {\n              ...book,\n              isLiked: false // 해당 책의 BOOK_ID가 likeBook 배열에 포함되어 있는지 확인하여 isLiked 값을 설정\n            };\n          });\n        }\n      }).catch(err => {\n        alert(err);\n      });\n    },\n    //찜목록 전체 삭제\n    async allDeleteFloatHeartBook() {\n      await axios({\n        url: \"http://localhost:3000/floating/delAllLike\",\n        method: \"DELETE\",\n        params: {\n          userEmail: this.email\n        }\n      }).then(res => {\n        this.getFloatHeartBook();\n      }).catch(err => {\n        alert(err);\n      });\n    },\n    //회원이 좋아요한 책 ID 가져오기\n    async getLikeBook() {\n      await axios({\n        url: \"http://localhost:3000/bookList/checkLikeList\",\n        method: \"POST\",\n        data: {\n          email: this.email\n        }\n      }).then(res => {\n        this.likeBook = res.data;\n      });\n    },\n    async likeToggle(bookId) {\n      if (localStorage.getItem(\"userID\")) {\n        this.bookId = bookId;\n        await axios({\n          url: \"http://localhost:3000/detail/likeOrDislike\",\n          method: \"POST\",\n          data: {\n            email: this.email,\n            bookId: this.bookId\n          }\n        }).then(res => {\n          console.log(res.data, \"좋아요 추가삭제\");\n          this.getLikeBook();\n          this.getFloatRecentBook();\n          this.getFloatHeartBook();\n        });\n      } else {\n        const conResult = confirm(\"로그인이 필요합니다. \\n 로그인 하시겠습니까?\");\n        conResult ? window.location.href = \"/login\" : null;\n      }\n    },\n    formatNumber(number) {\n      // 숫자를 천 단위마다 쉼표가 있는 형식으로 변환\n      return new Intl.NumberFormat().format(number);\n    }\n  }\n};","map":{"version":3,"names":["axios","defaults","baseURL","headers","post","name","components","data","floatingState","floatingRecent","floatingHeart","email","isLiked","likeBook","setup","created","localStorage","getItem","getLikeBook","mounted","getFloatRecentBook","unmounted","methods","openFloating","floatdiv","$refs","float","classList","toggle","closeFloating","floatingMenuRecent","floatRecentBtn","floatRecent","floatHeartBtn","floatHeart","add","remove","floatingMenuHeart","url","method","params","userEmail","then","res","recentBooks","map","book","includes","BOOK_ID","catch","err","alert","deleteFloatRecentBook","bookId","id","allDeleteFloatRecentBook","getFloatHeartBook","console","log","likeBooks","allDeleteFloatHeartBook","likeToggle","conResult","confirm","window","location","href","formatNumber","number","Intl","NumberFormat","format"],"sources":["C:\\Users\\Lim\\Desktop\\BOOK_0728\\MOONMOON\\vue_front\\src\\components\\floating.vue"],"sourcesContent":["<style src=\"../assets/css/floating.css\"></style>\r\n\r\n<template>\r\n    <!-- 최근 본 -->\r\n    <div @click=\"openFloating\" class=\"floating_btn\">\r\n        <img src=\"../assets/img/floating.png\" alt=\"\" />\r\n        <span class=\"floating_num\">{{ formatNumber(floatingRecent.length) }}</span>\r\n    </div>\r\n    <div ref=\"float\" class=\"floating_modal_wrap display_none\">\r\n        <div class=\"floating_modal\">\r\n            <div class=\"floating_modal_header\">\r\n                <h2 ref=\"floatRecent\" class=\"floating_modal_heart_btn current\"\r\n                    @click=\"floatingMenuRecent(), getFloatRecentBook()\">\r\n                    최근 본\r\n                </h2>\r\n                <h2 ref=\"floatHeart\" class=\"floating_modal_recent_btn\" @click=\"floatingMenuHeart(), getFloatHeartBook()\">\r\n                    찜 목록\r\n                </h2>\r\n                <span @click=\"closeFloating\" class=\"cursor\">✖</span>\r\n            </div>\r\n            <!-- 최근 본 -->\r\n            <div v-if=\"floatingState == 'recent'\" class=\"floating_modal_recent_wrap\">\r\n                <div class=\"floating_modal_list_header\">\r\n                    <div class=\"floating_modal_list_header_left\">\r\n                        <span>{{ floatingRecent.length }}</span>\r\n                        <span>건</span>\r\n                    </div>\r\n                    <div @click=\"allDeleteFloatRecentBook\" class=\"floating_modal_list_header_right cursor\">\r\n                        <img src=\"../assets/img/trash.png\" alt=\"\" />\r\n                        <span>전체삭제</span>\r\n                    </div>\r\n                </div>\r\n                <div class=\"floating_modal_list\">\r\n                    <div v-for=\"(item, i) in floatingRecent\" class=\"floating_modal_item\">\r\n                        <a class=\"floating_modal_item_img\" :href=\"`/detail/${item.BOOK_ID}`\"><img :src=\"item.BOOK_COVER\"\r\n                                alt=\"\" /></a>\r\n                        <div class=\"floating_modal_item_info\">\r\n                            <a :href=\"`/detail/${item.BOOK_ID}`\">\r\n                                <h2>{{ item.BOOK_TITLE }}</h2>\r\n                            </a>\r\n                            <p>{{ item.BOOK_AUTHOR }}</p>\r\n                            <div class=\"floating_modal_item_info_price\">\r\n                                <span>10%</span>\r\n                                <span>{{ formatNumber(item.BOOK_PRICE) }}</span>원\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"floating_modal_item_control\">\r\n                            <img v-if=\"item.isLiked == true\" @click=\"likeToggle(item.BOOK_ID)\"\r\n                                src=\"../assets/img/heartFill.png\" alt=\"Heart Filled\" />\r\n                            <img v-else-if=\"item.isLiked == false\" @click=\"likeToggle(item.BOOK_ID)\"\r\n                                src=\"../assets/img/heart.png\" alt=\"Heart\" />\r\n                            <span @click=\"deleteFloatRecentBook(item.BOOK_ID)\" class=\"cursor\">✖</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!-- 찜 목록 -->\r\n            <div v-if=\"floatingState == 'heart'\" class=\"floating_modal_heart_wrap\">\r\n                <div class=\"floating_modal_list_header\">\r\n                    <div class=\"floating_modal_list_header_left\">\r\n                        <span>{{ floatingHeart.length }}</span>\r\n                        <span>건</span>\r\n                    </div>\r\n                    <div @click=\"allDeleteFloatHeartBook\" class=\"floating_modal_list_header_right cursor\">\r\n                        <img src=\"../assets/img/trash.png\" alt=\"\" />\r\n                        <span>전체삭제</span>\r\n                    </div>\r\n                </div>\r\n                <div class=\"floating_modal_list\">\r\n                    <div v-for=\"(item, i) in floatingHeart\" class=\"floating_modal_item\">\r\n                        <a class=\"floating_modal_item_img\" :href=\"`/detail/${item.BOOK_ID}`\"><img :src=\"item.BOOK_COVER\"\r\n                                alt=\"\" /></a>\r\n                        <div class=\"floating_modal_item_info\">\r\n                            <a :href=\"`/detail/${item.BOOK_ID}`\">\r\n                                <h2>{{ item.BOOK_TITLE }}</h2>\r\n                            </a>\r\n                            <p>{{ item.BOOK_AUTHOR }}</p>\r\n                            <div class=\"floating_modal_item_info_price\">\r\n                                <span>10%</span>\r\n                                <span>{{ formatNumber(item.BOOK_PRICE) }}</span>원\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"floating_modal_item_control\">\r\n                            <img @click=\"likeToggle(item.BOOK_ID)\"\r\n                                src=\"../assets/img/heartFill.png\" alt=\"Heart Filled\" />\r\n                            <!-- <img v-if=\"item.isLiked == true\" @click=\"likeToggle(item.BOOK_ID)\"\r\n                                src=\"../assets/img/heartFill.png\" alt=\"Heart Filled\" />\r\n                            <img v-else-if=\"item.isLiked == false\" @click=\"likeToggle(item.BOOK_ID)\"\r\n                                src=\"../assets/img/heart.png\" alt=\"Heart\" /> -->\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\naxios.defaults.baseURL = \"http://localhost:3000\";\r\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json;charset=utf-8\";\r\naxios.defaults.headers.post[\"Access-Control-Allow-Origin\"] = \"*\";\r\n\r\nexport default {\r\n    name: '',\r\n    components: {},\r\n    data() {\r\n        return {\r\n            // 플로팅 데이터\r\n            floatingState: \"recent\",\r\n            floatingRecent: [],\r\n            floatingHeart: [],\r\n            email: \"\",\r\n\r\n            //좋아요 여부\r\n            isLiked: false,\r\n            likeBook: [],\r\n        };\r\n    },\r\n\r\n    setup() { },\r\n    created() {\r\n        this.email = localStorage.getItem(\"userID\");\r\n        this.getLikeBook();\r\n    },\r\n    mounted() {\r\n        this.getFloatRecentBook();\r\n\r\n    },\r\n    unmounted() { },\r\n    methods: {\r\n        openFloating() {\r\n            const floatdiv = this.$refs.float.classList;\r\n            floatdiv.toggle(\"display_none\");\r\n        },\r\n        closeFloating() {\r\n            const floatdiv = this.$refs.float.classList;\r\n            floatdiv.toggle(\"display_none\");\r\n        },\r\n        floatingMenuRecent() {\r\n            const floatRecentBtn = this.$refs.floatRecent;\r\n            const floatHeartBtn = this.$refs.floatHeart;\r\n            this.floatingState = \"recent\";\r\n            if (this.floatingState == \"recent\") {\r\n                floatRecentBtn.classList.add(\"current\");\r\n                floatHeartBtn.classList.remove(\"current\");\r\n            }\r\n        },\r\n        floatingMenuHeart() {\r\n            const floatRecentBtn = this.$refs.floatRecent;\r\n            const floatHeartBtn = this.$refs.floatHeart;\r\n            this.floatingState = \"heart\";\r\n            if (this.floatingState == \"heart\") {\r\n                floatHeartBtn.classList.add(\"current\");\r\n                floatRecentBtn.classList.remove(\"current\");\r\n            }\r\n        },\r\n        //최근 본 목록 조회\r\n        async getFloatRecentBook() {\r\n            this.floatingRecent = [];\r\n            await axios({\r\n                url: \"http://localhost:3000/floating/recentbook\",\r\n                method: \"GET\",\r\n                params: {\r\n                    userEmail: this.email\r\n                },\r\n            })\r\n                .then((res) => {\r\n                    if (localStorage.getItem(\"userID\")) {\r\n                        this.floatingRecent = res.data.recentBooks.map(book => {\r\n                            return {\r\n                                ...book,\r\n                                isLiked: this.likeBook.includes(book.BOOK_ID) // 해당 책의 BOOK_ID가 likeBook 배열에 포함되어 있는지 확인하여 isLiked 값을 설정\r\n                            };\r\n                        });\r\n                    } else {\r\n                        this.floatingRecent = res.data.recentBooks.map(book => {\r\n                            return {\r\n                                ...book,\r\n                                isLiked: false // 해당 책의 BOOK_ID가 likeBook 배열에 포함되어 있는지 확인하여 isLiked 값을 설정\r\n                            };\r\n                        });\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    alert(err);\r\n                });\r\n        },\r\n        // 최근 본 목록 삭제\r\n        async deleteFloatRecentBook(bookId) {\r\n            await axios({\r\n                url: `http://localhost:3000/floating/delrecentbook/${bookId}`,\r\n                method: \"DELETE\",\r\n                params: {\r\n                    id: bookId\r\n                },\r\n            })\r\n                .then((res) => {\r\n                    this.getFloatRecentBook()\r\n                })\r\n                .catch((err) => {\r\n                    alert(err);\r\n                });\r\n        },\r\n        //최근 본 전체 삭제\r\n        async allDeleteFloatRecentBook() {\r\n            await axios({\r\n                url: \"http://localhost:3000/floating/delAllRec\",\r\n                method: \"DELETE\",\r\n                params: {\r\n                    userEmail: this.email\r\n                }\r\n            })\r\n                .then((res) => {\r\n                    this.getFloatRecentBook();\r\n                })\r\n                .catch((err) => {\r\n                    alert(err);\r\n                });\r\n        },\r\n        //찜 목록 조회\r\n        async getFloatHeartBook() {\r\n            this.floatingHeart = [];\r\n            await axios({\r\n                url: \"http://localhost:3000/floating/likebook\",\r\n                method: \"GET\",\r\n                params: {\r\n                    userEmail: this.email\r\n                },\r\n            })\r\n                .then((res) => {\r\n                    console.log(res, \"찜하기\")\r\n                    if (localStorage.getItem(\"userID\")) {\r\n                        this.floatingHeart = res.data.likeBooks.map(book => {\r\n                            return {\r\n                                ...book,\r\n                                isLiked: this.likeBook.includes(book.BOOK_ID) // 해당 책의 BOOK_ID가 likeBook 배열에 포함되어 있는지 확인하여 isLiked 값을 설정\r\n                            };\r\n                        });\r\n                    } else {\r\n                        this.floatingHeart = res.data.likeBooks.map(book => {\r\n                            return {\r\n                                ...book,\r\n                                isLiked: false // 해당 책의 BOOK_ID가 likeBook 배열에 포함되어 있는지 확인하여 isLiked 값을 설정\r\n                            };\r\n                        });\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    alert(err);\r\n                });\r\n        },\r\n        //찜목록 전체 삭제\r\n        async allDeleteFloatHeartBook() {\r\n            await axios({\r\n                url: \"http://localhost:3000/floating/delAllLike\",\r\n                method: \"DELETE\",\r\n                params: {\r\n                    userEmail: this.email\r\n                }\r\n            })\r\n                .then((res) => {\r\n                    this.getFloatHeartBook();\r\n                })\r\n                .catch((err) => {\r\n                    alert(err);\r\n                });\r\n        },\r\n        //회원이 좋아요한 책 ID 가져오기\r\n        async getLikeBook() {\r\n            await axios({\r\n                url: \"http://localhost:3000/bookList/checkLikeList\",\r\n                method: \"POST\",\r\n                data: {\r\n                    email: this.email\r\n                }\r\n            })\r\n                .then((res) => {\r\n                    this.likeBook = res.data;\r\n                })\r\n        },\r\n        async likeToggle(bookId) {\r\n            if (localStorage.getItem(\"userID\")) {\r\n                this.bookId = bookId;\r\n                await axios({\r\n                    url: \"http://localhost:3000/detail/likeOrDislike\",\r\n                    method: \"POST\",\r\n                    data: {\r\n                        email: this.email,\r\n                        bookId: this.bookId\r\n                    }\r\n                })\r\n                    .then((res) => {\r\n                        console.log(res.data, \"좋아요 추가삭제\")\r\n                        this.getLikeBook();\r\n                        this.getFloatRecentBook();\r\n                        this.getFloatHeartBook();\r\n                    })\r\n\r\n            } else {\r\n                const conResult = confirm(\"로그인이 필요합니다. \\n 로그인 하시겠습니까?\");\r\n                conResult ? window.location.href = \"/login\" : null;\r\n            }\r\n\r\n        },\r\n\r\n        formatNumber(number) {\r\n            // 숫자를 천 단위마다 쉼표가 있는 형식으로 변환\r\n            return new Intl.NumberFormat().format(number);\r\n        },\r\n    }\r\n}\r\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}